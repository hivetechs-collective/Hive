    Checking hive-ai v0.1.0 (/Users/veronelazio/Developer/Private/hive)
error: cannot find macro `params` in this scope
    --> src/core/database.rs:1103:24
     |
1103 |             .query_map(params![limit], |row| {
     |                        ^^^^^^
     |
help: consider importing this macro
     |
1    + use rusqlite::params;
     |

error: cannot find macro `params` in this scope
    --> src/core/database.rs:1075:13
     |
1075 |             params![
     |             ^^^^^^
     |
help: consider importing this macro
     |
1    + use rusqlite::params;
     |

error: cannot find macro `params` in this scope
   --> src/core/database.rs:987:17
    |
987 |                 params![name],
    |                 ^^^^^^
    |
help: consider importing this macro
    |
1   + use rusqlite::params;
    |

error: cannot find macro `params` in this scope
   --> src/core/database.rs:961:13
    |
961 |             params![
    |             ^^^^^^
    |
help: consider importing this macro
    |
1   + use rusqlite::params;
    |

error: cannot find macro `params` in this scope
   --> src/core/database.rs:897:17
    |
897 |                 params![id],
    |                 ^^^^^^
    |
help: consider importing this macro
    |
1   + use rusqlite::params;
    |

error: cannot find macro `params` in this scope
   --> src/core/database.rs:868:24
    |
868 |             .query_map(params![limit], |row| {
    |                        ^^^^^^
    |
help: consider importing this macro
    |
1   + use rusqlite::params;
    |

error: cannot find macro `params` in this scope
   --> src/core/database.rs:836:24
    |
836 |             .query_map(params![&search_pattern, limit], |row| {
    |                        ^^^^^^
    |
help: consider importing this macro
    |
1   + use rusqlite::params;
    |

error: cannot find macro `params` in this scope
   --> src/core/database.rs:803:13
    |
803 |             params![
    |             ^^^^^^
    |
help: consider importing this macro
    |
1   + use rusqlite::params;
    |

error: cannot find macro `params` in this scope
   --> src/core/database.rs:744:24
    |
744 |             .query_map(params![conversation_id], |row| {
    |                        ^^^^^^
    |
help: consider importing this macro
    |
1   + use rusqlite::params;
    |

error: cannot find macro `params` in this scope
   --> src/core/database.rs:717:13
    |
717 |             params![
    |             ^^^^^^
    |
help: consider importing this macro
    |
1   + use rusqlite::params;
    |

error: cannot find macro `params` in this scope
   --> src/core/database.rs:673:13
    |
673 |             params![&self.end_time, &self.updated_at, &self.id],
    |             ^^^^^^
    |
help: consider importing this macro
    |
1   + use rusqlite::params;
    |

error: cannot find macro `params` in this scope
   --> src/core/database.rs:649:13
    |
649 |             params![
    |             ^^^^^^
    |
help: consider importing this macro
    |
1   + use rusqlite::params;
    |

error: cannot find macro `params` in this scope
   --> src/core/database.rs:609:17
    |
609 |                 params![id],
    |                 ^^^^^^
    |
help: consider importing this macro
    |
1   + use rusqlite::params;
    |

error: cannot find macro `params` in this scope
   --> src/core/database.rs:576:13
    |
576 |             params![
    |             ^^^^^^
    |
help: consider importing this macro
    |
1   + use rusqlite::params;
    |

error: cannot find macro `params` in this scope
   --> src/core/database.rs:505:17
    |
505 |                 params![email],
    |                 ^^^^^^
    |
help: consider importing this macro
    |
1   + use rusqlite::params;
    |

error: cannot find macro `params` in this scope
   --> src/core/database.rs:479:17
    |
479 |                 params![id],
    |                 ^^^^^^
    |
help: consider importing this macro
    |
1   + use rusqlite::params;
    |

error: cannot find macro `params` in this scope
   --> src/core/database.rs:457:13
    |
457 |             params![
    |             ^^^^^^
    |
help: consider importing this macro
    |
1   + use rusqlite::params;
    |

error: cannot find macro `params` in this scope
   --> src/core/database.rs:224:25
    |
224 |                         params![version, name, Utc::now().to_rfc3339()],
    |                         ^^^^^^
    |
help: consider importing this macro
    |
1   + use rusqlite::params;
    |

warning: unused import: `AST`
 --> src/transformation/syntax.rs:5:31
  |
5 | use crate::analysis::{Parser, AST};
  |                               ^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `anyhow`
 --> src/transformation/conflict.rs:3:22
  |
3 | use anyhow::{Result, anyhow};
  |                      ^^^^^^

warning: unused import: `HashSet`
 --> src/transformation/conflict.rs:4:33
  |
4 | use std::collections::{HashMap, HashSet};
  |                                 ^^^^^^^

warning: unused import: `anyhow`
 --> src/transformation/preview.rs:3:22
  |
3 | use anyhow::{Result, anyhow};
  |                      ^^^^^^

warning: unused import: `std::path::Path`
 --> src/transformation/preview.rs:4:5
  |
4 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^

warning: unused import: `anyhow::Result`
 --> src/transformation/types.rs:3:5
  |
3 | use anyhow::Result;
  |     ^^^^^^^^^^^^^^

warning: unused import: `anyhow`
 --> src/transformation/validation.rs:6:22
  |
6 | use anyhow::{Result, anyhow};
  |                      ^^^^^^

warning: unused import: `get_security_context`
  --> src/transformation/validation.rs:12:33
   |
12 |     core::{Language, security::{get_security_context, check_write_access}},
   |                                 ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::num::NonZeroUsize`
  --> src/cache/mod.rs:14:5
   |
14 | use std::num::NonZeroUsize;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ErrorCategory`
  --> src/cache/mod.rs:23:37
   |
23 | use crate::core::error::{HiveError, ErrorCategory};
   |                                     ^^^^^^^^^^^^^

warning: unused import: `std::io::IsTerminal`
 --> src/cli/args.rs:8:5
  |
8 | use std::io::IsTerminal;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
 --> src/cli/commands.rs:8:5
  |
8 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused imports: `PerformanceOptimizer`, `ValidationSuiteConfig`, `ValidationSuite`, and `benchmark_against_typescript`
  --> src/cli/commands.rs:15:19
   |
15 |     performance::{PerformanceOptimizer, PerformanceConfig, benchmark_against_typescript},
   |                   ^^^^^^^^^^^^^^^^^^^^                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
16 |     validation_suite::{ValidationSuite, ValidationSuiteConfig, run_quick_validation},
   |                        ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `rusqlite::params`
  --> src/cli/commands.rs:21:5
   |
21 | use rusqlite::params;
   |     ^^^^^^^^^^^^^^^^

warning: unused import: `IncrementalParser`
    --> src/cli/commands.rs:2511:43
     |
2511 |     use crate::analysis::{AnalysisEngine, IncrementalParser};
     |                                           ^^^^^^^^^^^^^^^^^

warning: unused import: `Write`
 --> src/cli/completions.rs:8:21
  |
8 | use std::io::{self, Write};
  |                     ^^^^^

warning: unused import: `anyhow::Result`
 --> src/cli/accessibility.rs:6:5
  |
6 | use anyhow::Result;
  |     ^^^^^^^^^^^^^^

warning: unused import: `HiveError`
  --> src/analysis/parser.rs:14:39
   |
14 | use crate::core::{Language, Position, HiveError};
   |                                       ^^^^^^^^^

warning: unused import: `anyhow`
  --> src/analysis/language_detector.rs:10:22
   |
10 | use anyhow::{Result, anyhow};
   |                      ^^^^^^

warning: unused import: `tree_sitter::Tree`
  --> src/analysis/incremental.rs:11:5
   |
11 | use tree_sitter::Tree;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
   --> src/analysis/performance.rs:348:13
    |
348 |         use std::path::Path;
    |             ^^^^^^^^^^^^^^^

warning: unused import: `HashSet`
 --> src/analysis/symbol_index.rs:6:33
  |
6 | use std::collections::{HashMap, HashSet};
  |                                 ^^^^^^^

warning: unused import: `OptionalExtension`
  --> src/analysis/symbol_index.rs:11:49
   |
11 | use rusqlite::{params, Connection, Transaction, OptionalExtension};
   |                                                 ^^^^^^^^^^^^^^^^^

warning: unused import: `toposort`
  --> src/analysis/symbol_index.rs:14:22
   |
14 | use petgraph::algo::{toposort, is_cyclic_directed};
   |                      ^^^^^^^^

warning: unused import: `info`
  --> src/analysis/symbol_index.rs:16:22
   |
16 | use tracing::{debug, info, instrument};
   |                      ^^^^

warning: unused import: `DbConnection`
  --> src/analysis/symbol_index.rs:24:46
   |
24 | use crate::core::database::{DatabaseManager, DbConnection};
   |                                              ^^^^^^^^^^^^

warning: unused import: `VecDeque`
 --> src/analysis/dependency.rs:8:42
  |
8 | use std::collections::{HashMap, HashSet, VecDeque};
  |                                          ^^^^^^^^

warning: unused import: `Context`
  --> src/analysis/dependency.rs:11:22
   |
11 | use anyhow::{Result, Context};
   |                      ^^^^^^^

warning: unused import: `is_cyclic_directed`
  --> src/analysis/dependency.rs:13:32
   |
13 | use petgraph::algo::{toposort, is_cyclic_directed, tarjan_scc, has_path_connecting};
   |                                ^^^^^^^^^^^^^^^^^^

warning: unused import: `Context`
  --> src/analysis/repository_intelligence.rs:13:22
   |
13 | use anyhow::{Result, Context, anyhow};
   |                      ^^^^^^^

warning: unused import: `debug`
  --> src/analysis/repository_intelligence.rs:16:15
   |
16 | use tracing::{debug, info, instrument};
   |               ^^^^^

warning: unused import: `Position`
  --> src/analysis/repository_intelligence.rs:23:31
   |
23 | use crate::core::{SymbolKind, Position};
   |                               ^^^^^^^^

warning: unused import: `ParseResult`
  --> src/analysis/repository_intelligence.rs:24:24
   |
24 | use crate::core::ast::{ParseResult, CodeMetrics};
   |                        ^^^^^^^^^^^

warning: unused import: `FileInfo`
  --> src/analysis/mod.rs:49:29
   |
49 | use crate::core::{Language, FileInfo};
   |                             ^^^^^^^^

warning: unused imports: `debug` and `info`
  --> src/commands/search.rs:10:15
   |
10 | use tracing::{info, debug};
   |               ^^^^  ^^^^^

warning: unused import: `Context`
 --> src/commands/analyze.rs:6:22
  |
6 | use anyhow::{Result, Context};
  |                      ^^^^^^^

warning: unused imports: `debug` and `info`
  --> src/commands/analyze.rs:10:15
   |
10 | use tracing::{info, debug};
   |               ^^^^  ^^^^^

warning: unused imports: `ArchitectureInfo`, `ArchitecturePattern`, `Effort`, `PerformanceReport`, `QualityReport`, `Recommendation`, `SecurityReport`, and `TechnicalDebtReport`
  --> src/commands/analyze.rs:16:29
   |
16 |         RepositoryAnalyzer, ArchitecturePattern, Severity, Priority, Impact, Effort,
   |                             ^^^^^^^^^^^^^^^^^^^                              ^^^^^^
17 |         ArchitectureInfo, QualityReport, SecurityReport, PerformanceReport, TechnicalDebtReport,
   |         ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^
18 |         Recommendation
   |         ^^^^^^^^^^^^^^

warning: unused import: `Term`
 --> src/commands/index.rs:9:22
  |
9 | use console::{style, Term};
  |                      ^^^^

warning: unused import: `info`
  --> src/commands/index.rs:11:15
   |
11 | use tracing::{info, debug};
   |               ^^^^

warning: unused imports: `ABTestConfig`, `ModelRanking`, and `TaskRecommendation`
 --> src/commands/models.rs:8:21
  |
8 |     ScoringWeights, ABTestConfig, ABTestStatus, ModelRanking, TaskRecommendation, HealthStatus, CircuitState,
  |                     ^^^^^^^^^^^^                ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^

warning: unused import: `rand::Rng as _`
   --> src/commands/models.rs:663:5
    |
663 | use rand::Rng as _;
    |     ^^^^^^^^^^^^^^

warning: unused import: `MemoryInsight`
  --> src/commands/memory.rs:18:31
   |
18 |         SemanticSearchResult, MemoryInsight, InsightType,
   |                               ^^^^^^^^^^^^^

warning: unused import: `Context`
 --> src/commands/analytics.rs:9:14
  |
9 | use anyhow::{Context, Result};
  |              ^^^^^^^

warning: unused import: `Style`
  --> src/commands/analytics.rs:11:22
   |
11 | use console::{style, Style, Term};
   |                      ^^^^^

warning: unused imports: `DateTime` and `Duration`
  --> src/commands/analytics.rs:14:14
   |
14 | use chrono::{DateTime, Utc, Duration};
   |              ^^^^^^^^       ^^^^^^^^

warning: unused imports: `AdvancedAnalyticsConfig`, `AnalyticsConfig`, `ImpactLevel`, `InsightCategory`, and `TrendDirection`
  --> src/commands/analytics.rs:18:53
   |
18 |         get_analytics_engine, initialize_analytics, AnalyticsConfig,
   |                                                     ^^^^^^^^^^^^^^^
19 |         AggregationPeriod, ReportType, TrendDirection, InsightCategory,
   |                                        ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^
20 |         ImpactLevel, DashboardWidget,
   |         ^^^^^^^^^^^
...
24 |         AdvancedAnalyticsConfig, ForecastHorizon,
   |         ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `DateTime` and `Utc`
 --> src/commands/hooks.rs:7:14
  |
7 | use chrono::{DateTime, Utc};
  |              ^^^^^^^^  ^^^

warning: unused imports: `ConsensusIntegrationConfig`, `ConsensusIntegration`, `CostController`, and `QualityGateManager`
  --> src/commands/hooks.rs:11:5
   |
11 |     ConsensusIntegration, ConsensusIntegrationConfig,
   |     ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |     QualityGateManager, CostController,
   |     ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused import: `chrono::Utc`
 --> src/commands/consensus.rs:7:5
  |
7 | use chrono::Utc;
  |     ^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
 --> src/commands/consensus.rs:9:5
  |
9 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused import: `ConsensusRequest`
  --> src/commands/consensus.rs:12:41
   |
12 | use crate::consensus::{ConsensusEngine, ConsensusRequest, TemporalContextProvider};
   |                                         ^^^^^^^^^^^^^^^^

warning: unused imports: `EnhancedProgressTracker` and `StreamingCallbacks`
  --> src/commands/consensus.rs:13:53
   |
13 | use crate::consensus::streaming::{ConsensusMetrics, EnhancedProgressTracker, StreamingCallbacks};
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^

warning: unused imports: `ConsensusConfig` and `ConsensusProfile`
  --> src/commands/consensus.rs:14:31
   |
14 | use crate::consensus::types::{ConsensusConfig, ConsensusProfile, Stage};
   |                               ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^

warning: unused import: `crate::core::context::ContextBuilder`
  --> src/commands/consensus.rs:15:5
   |
15 | use crate::core::context::ContextBuilder;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::core::semantic::SemanticIndex`
  --> src/commands/consensus.rs:16:5
   |
16 | use crate::core::semantic::SemanticIndex;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ConsensusStage`, `CuratorStage`, `RefinerStage`, and `ValidatorStage`
   --> src/commands/consensus.rs:147:52
    |
147 |     use crate::consensus::stages::{GeneratorStage, RefinerStage, ValidatorStage, CuratorStage, ConsensusStage};
    |                                                    ^^^^^^^^^^^^  ^^^^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused import: `Documentation`
   --> src/commands/consensus.rs:288:100
    |
288 |     use crate::core::context::{QueryContext, CodeSnippet, ContextSymbol, FileSummary, ProjectInfo, Documentation};
    |                                                                                                    ^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
   --> src/commands/consensus.rs:291:9
    |
291 |     use std::collections::HashMap;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ModeType`
 --> src/commands/planning.rs:9:62
  |
9 | use crate::planning::{PlanningEngine, PlanningContext, Plan, ModeType};
  |                                                              ^^^^^^^^

warning: unused imports: `EncryptionConfig`, `PasswordPolicy`, and `SecurityGroup`
  --> src/commands/security.rs:11:37
   |
11 |     SecuritySystem, SecurityConfig, PasswordPolicy, EncryptionConfig,
   |                                     ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^
12 |     EnterpriseUser, EnterpriseTeam, EnterpriseRole, SecurityGroup,
   |                                                     ^^^^^^^^^^^^^

warning: unused import: `MemberStatus`
  --> src/commands/security.rs:15:83
   |
15 | use crate::security::teams::{TeamType, TeamAccess, TeamSettings, TeamPermissions, MemberStatus};
   |                                                                                   ^^^^^^^^^^^^

warning: unused imports: `ConditionOperator`, `ConditionType`, and `PermissionCondition`
  --> src/commands/security.rs:16:72
   |
16 | use crate::security::permissions::{PermissionSubject, PermissionScope, PermissionCondition, ConditionType, ConditionOperator};
   |                                                                        ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^

warning: unused import: `Response`
 --> src/providers/openrouter/client.rs:8:23
  |
8 | use reqwest::{Client, Response};
  |                       ^^^^^^^^

warning: unused import: `Context`
 --> src/providers/openrouter/cost.rs:6:14
  |
6 | use anyhow::{Context, Result};
  |              ^^^^^^^

warning: unused import: `Context`
 --> src/providers/openrouter/performance.rs:6:14
  |
6 | use anyhow::{Context, Result};
  |              ^^^^^^^

warning: unused import: `Response`
  --> src/providers/openrouter/streaming.rs:10:23
   |
10 | use reqwest::{Client, Response};
   |                       ^^^^^^^^

warning: unused import: `Serialize`
  --> src/providers/openrouter/streaming.rs:11:26
   |
11 | use serde::{Deserialize, Serialize};
   |                          ^^^^^^^^^

warning: unused import: `MessageRole`
  --> src/providers/openrouter/streaming.rs:18:44
   |
18 | use super::client::{ChatCompletionRequest, MessageRole, OpenRouterMessage, UsageInfo};
   |                                            ^^^^^^^^^^^

warning: unused imports: `Clear`, `Gauge`, `Line`, `Margin`, and `Span`
  --> src/interactive_tui.rs:11:56
   |
11 |     layout::{Alignment, Constraint, Direction, Layout, Margin, Rect},
   |                                                        ^^^^^^
12 |     style::{Color, Modifier, Style},
13 |     text::{Line, Span, Text},
   |            ^^^^  ^^^^
14 |     widgets::{Block, Borders, Clear, Gauge, List, ListItem, Paragraph, Wrap},
   |                               ^^^^^  ^^^^^

warning: unused import: `TuiTheme`
  --> src/interactive_tui.rs:22:44
   |
22 | use crate::cli::tui_themes::{ThemeManager, TuiTheme};
   |                                            ^^^^^^^^

warning: unused imports: `Alignment`, `Clear`, `Line`, `Margin`, `Paragraph`, `Span`, and `Wrap`
 --> src/tui/ui.rs:5:14
  |
5 |     layout::{Alignment, Constraint, Direction, Layout, Margin, Rect},
  |              ^^^^^^^^^                                 ^^^^^^
6 |     style::{Color, Modifier, Style},
7 |     text::{Line, Span, Text},
  |            ^^^^  ^^^^
8 |     widgets::{Block, Borders, Clear, List, ListItem, Paragraph, Wrap},
  |                               ^^^^^                  ^^^^^^^^^  ^^^^

warning: unused imports: `Constraint`, `Direction`, `Layout`, `Line`, and `Span`
 --> src/tui/input.rs:5:14
  |
5 |     layout::{Constraint, Direction, Layout, Rect},
  |              ^^^^^^^^^^  ^^^^^^^^^  ^^^^^^
6 |     style::{Color, Modifier, Style},
7 |     text::{Line, Span},
  |            ^^^^  ^^^^

warning: unused import: `Gauge`
 --> src/tui/consensus_view.rs:6:31
  |
6 |     widgets::{Block, Borders, Gauge, Paragraph},
  |                               ^^^^^

warning: unused import: `Modifier`
 --> src/tui/status_line.rs:5:20
  |
5 |     style::{Color, Modifier, Style},
  |                    ^^^^^^^^

warning: unused import: `symbols`
 --> src/tui/widgets/progress_bar.rs:7:5
  |
7 |     symbols,
  |     ^^^^^^^

warning: unused imports: `Line` and `Span`
 --> src/tui/widgets/input_field.rs:7:12
  |
7 |     text::{Line, Span},
  |            ^^^^  ^^^^

warning: unused imports: `Color`, `Constraint`, `Direction`, `Layout`, `ListItem`, `List`, `Margin`, and `Style`
 --> src/tui/widgets/help_popup.rs:5:25
  |
5 |     layout::{Alignment, Constraint, Direction, Layout, Margin, Rect},
  |                         ^^^^^^^^^^  ^^^^^^^^^  ^^^^^^  ^^^^^^
6 |     style::{Color, Modifier, Style},
  |             ^^^^^            ^^^^^
7 |     text::{Line, Span, Text},
8 |     widgets::{Block, Borders, Clear, List, ListItem, Paragraph, Widget, Wrap},
  |                                      ^^^^  ^^^^^^^^

warning: unused import: `widgets::Widget`
  --> src/tui/widgets/mod.rs:15:5
   |
15 |     widgets::Widget,
   |     ^^^^^^^^^^^^^^^

warning: unused import: `anyhow::Result`
 --> src/tui/advanced/panels.rs:5:5
  |
5 | use anyhow::Result;
  |     ^^^^^^^^^^^^^^

warning: unused import: `ratatui::layout::Rect`
 --> src/tui/advanced/panels.rs:6:5
  |
6 | use ratatui::layout::Rect;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::tui::themes::Theme`
 --> src/tui/advanced/panels.rs:7:5
  |
7 | use crate::tui::themes::Theme;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Color`
  --> src/tui/advanced/editor.rs:15:13
   |
15 |     style::{Color, Style, Modifier},
   |             ^^^^^

warning: unused import: `collections::HashMap`
  --> src/tui/advanced/editor.rs:21:5
   |
21 |     collections::HashMap,
   |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Command`
  --> src/tui/advanced/terminal.rs:21:15
   |
21 |     process::{Command, Stdio},
   |               ^^^^^^^

warning: unused imports: `Constraint`, `Direction`, and `Layout`
  --> src/tui/advanced/mod.rs:21:14
   |
21 |     layout::{Constraint, Direction, Layout, Rect},
   |              ^^^^^^^^^^  ^^^^^^^^^  ^^^^^^

warning: variant `WCAG_A` should have an upper camel case name
  --> src/tui/accessibility/mod.rs:60:5
   |
60 |     WCAG_A,
   |     ^^^^^^ help: convert the identifier to upper camel case: `WcagA`
   |
   = note: `#[warn(non_camel_case_types)]` on by default

warning: variant `WCAG_AA` should have an upper camel case name
  --> src/tui/accessibility/mod.rs:62:5
   |
62 |     WCAG_AA,
   |     ^^^^^^^ help: convert the identifier to upper camel case: `WcagAa`

warning: variant `WCAG_AAA` should have an upper camel case name
  --> src/tui/accessibility/mod.rs:64:5
   |
64 |     WCAG_AAA,
   |     ^^^^^^^^ help: convert the identifier to upper camel case: `WcagAaa`

warning: unused import: `KeyCode`
  --> src/tui/mod.rs:29:67
   |
29 |     event::{self, DisableMouseCapture, EnableMouseCapture, Event, KeyCode, KeyEventKind},
   |                                                                   ^^^^^^^

warning: unused import: `std::time::Duration`
 --> src/hooks/security.rs:4:5
  |
4 | use std::time::Duration;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `anyhow`
 --> src/hooks/audit.rs:8:22
  |
8 | use anyhow::{Result, anyhow};
  |                      ^^^^^^

warning: unused import: `SecurityPolicy`
 --> src/hooks/rbac.rs:8:21
  |
8 | use super::{HookId, SecurityPolicy};
  |                     ^^^^^^^^^^^^^^

warning: unused import: `ApprovalStatus`
  --> src/hooks/consensus_integration.rs:13:60
   |
13 |     approval_workflow::{ApprovalWorkflow, ApprovalRequest, ApprovalStatus, ApprovalPriority},
   |                                                            ^^^^^^^^^^^^^^

warning: unused import: `ConsensusConfig`
  --> src/hooks/consensus_integration.rs:15:31
   |
15 | use crate::consensus::types::{ConsensusConfig, Stage, StageResult, StageAnalytics};
   |                               ^^^^^^^^^^^^^^^

warning: unused import: `uuid::Uuid`
  --> src/hooks/approval_workflow.rs:12:5
   |
12 | use uuid::Uuid;
   |     ^^^^^^^^^^

warning: unused imports: `ApprovalStatus`, `EventSource`, `EventType`, and `HookEvent`
 --> src/hooks/quality_gates.rs:7:5
  |
7 |     HookEvent, EventType, EventSource,
  |     ^^^^^^^^^  ^^^^^^^^^  ^^^^^^^^^^^
8 |     HookAuditLogger, AuditEvent, AuditEventType,
9 |     approval_workflow::{ApprovalWorkflow, ApprovalRequest, ApprovalStatus},
  |                                                            ^^^^^^^^^^^^^^

warning: unused import: `StageAnalytics`
  --> src/hooks/quality_gates.rs:11:51
   |
11 | use crate::consensus::types::{Stage, StageResult, StageAnalytics};
   |                                                   ^^^^^^^^^^^^^^

warning: unused import: `Context`
  --> src/hooks/quality_gates.rs:12:22
   |
12 | use anyhow::{Result, Context};
   |                      ^^^^^^^

warning: unused imports: `ApprovalRequest` and `ApprovalStatus`
 --> src/hooks/cost_control.rs:8:43
  |
8 |     approval_workflow::{ApprovalWorkflow, ApprovalRequest, ApprovalStatus},
  |                                           ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused import: `Context`
  --> src/hooks/cost_control.rs:11:22
   |
11 | use anyhow::{Result, Context};
   |                      ^^^^^^^

warning: unused import: `serde_json::json`
 --> src/planning/decomposer.rs:8:5
  |
8 | use serde_json::json;
  |     ^^^^^^^^^^^^^^^^

warning: unused import: `HiveError`
 --> src/planning/risk_analyzer.rs:5:38
  |
5 | use crate::core::error::{HiveResult, HiveError};
  |                                      ^^^^^^^^^

warning: unused import: `HiveError`
 --> src/planning/mode_detector.rs:5:38
  |
5 | use crate::core::error::{HiveResult, HiveError};
  |                                      ^^^^^^^^^

warning: unused import: `HiveError`
 --> src/planning/integration.rs:5:38
  |
5 | use crate::core::error::{HiveResult, HiveError};
  |                                      ^^^^^^^^^

warning: unused import: `Context as _`
 --> src/memory/embeddings.rs:9:14
  |
9 | use anyhow::{Context as _, Result};
  |              ^^^^^^^^^^^^

warning: unused import: `Path`
  --> src/memory/embeddings.rs:12:17
   |
12 | use std::path::{Path, PathBuf};
   |                 ^^^^

warning: unused import: `all_simple_paths`
  --> src/memory/knowledge_graph.rs:11:32
   |
11 | use petgraph::algo::{dijkstra, all_simple_paths};
   |                                ^^^^^^^^^^^^^^^^

warning: unused import: `debug`
  --> src/memory/knowledge_graph.rs:16:15
   |
16 | use tracing::{debug, info};
   |               ^^^^^

warning: unused import: `MemorySystem`
  --> src/memory/retrieval.rs:15:49
   |
15 | use crate::core::memory::{SemanticSearchResult, MemorySystem};
   |                                                 ^^^^^^^^^^^^

warning: unused import: `Context as _`
 --> src/memory/analytics.rs:9:14
  |
9 | use anyhow::{Context as _, Result};
  |              ^^^^^^^^^^^^

warning: unused import: `info`
  --> src/memory/analytics.rs:14:22
   |
14 | use tracing::{debug, info};
   |                      ^^^^

warning: unused import: `PatternLearner`
  --> src/memory/analytics.rs:18:48
   |
18 | use crate::memory::pattern_learning::{Pattern, PatternLearner};
   |                                                ^^^^^^^^^^^^^^

warning: unused import: `Context as _`
  --> src/memory/mod.rs:19:14
   |
19 | use anyhow::{Context as _, Result};
   |              ^^^^^^^^^^^^

warning: unused import: `Context`
  --> src/analytics/trend_analysis.rs:10:14
   |
10 | use anyhow::{Context, Result};
   |              ^^^^^^^

warning: unused import: `warn`
  --> src/analytics/trend_analysis.rs:16:28
   |
16 | use tracing::{debug, info, warn};
   |                            ^^^^

warning: unused import: `Datelike`
  --> src/analytics/executive.rs:11:39
   |
11 | use chrono::{DateTime, Duration, Utc, Datelike};
   |                                       ^^^^^^^^

warning: unused import: `Context`
  --> src/analytics/cost_intelligence.rs:11:14
   |
11 | use anyhow::{Context, Result};
   |              ^^^^^^^

warning: unused import: `Datelike`
  --> src/analytics/cost_intelligence.rs:12:39
   |
12 | use chrono::{DateTime, Duration, Utc, Datelike};
   |                                       ^^^^^^^^

warning: unused import: `warn`
  --> src/analytics/cost_intelligence.rs:17:28
   |
17 | use tracing::{debug, info, warn};
   |                            ^^^^

warning: unused import: `get_database`
  --> src/analytics/cost_intelligence.rs:20:29
   |
20 | use crate::core::database::{get_database, ActivityLog};
   |                             ^^^^^^^^^^^^

warning: unused import: `Context`
  --> src/analytics/dashboard.rs:11:14
   |
11 | use anyhow::{Context, Result};
   |              ^^^^^^^

warning: unused import: `Duration`
  --> src/analytics/dashboard.rs:12:24
   |
12 | use chrono::{DateTime, Duration, Utc};
   |                        ^^^^^^^^

warning: unused import: `Context`
  --> src/analytics/performance.rs:11:14
   |
11 | use anyhow::{Context, Result};
   |              ^^^^^^^

warning: unused import: `BTreeMap`
  --> src/analytics/performance.rs:14:33
   |
14 | use std::collections::{HashMap, BTreeMap};
   |                                 ^^^^^^^^

warning: unused import: `get_database`
  --> src/analytics/performance.rs:20:29
   |
20 | use crate::core::database::{get_database, ActivityLog};
   |                             ^^^^^^^^^^^^

warning: unused import: `Context`
  --> src/analytics/ml_models.rs:10:22
   |
10 | use anyhow::{Result, Context};
   |                      ^^^^^^^

warning: unused import: `Datelike`
  --> src/analytics/templates.rs:12:29
   |
12 | use chrono::{DateTime, Utc, Datelike};
   |                             ^^^^^^^^

warning: unused import: `Interval`
  --> src/analytics/alerts.rs:16:29
   |
16 | use tokio::time::{interval, Interval};
   |                             ^^^^^^^^

warning: unused import: `Context`
  --> src/analytics/api.rs:10:22
   |
10 | use anyhow::{Result, Context};
   |                      ^^^^^^^

warning: unused import: `Context`
  --> src/analytics/export.rs:10:22
   |
10 | use anyhow::{Result, Context};
   |                      ^^^^^^^

warning: unused import: `crate::core::database_working::DatabaseConfig`
 --> src/migration/config.rs:8:5
  |
8 | use crate::core::database_working::DatabaseConfig;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `serde_json::Value as JsonValue`
 --> src/migration/config.rs:9:5
  |
9 | use serde_json::Value as JsonValue;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ThematicCluster`
  --> src/migration/database.rs:66:68
   |
66 | use crate::migration::analyzer::{TypeScriptAnalysis, DatabaseInfo, ThematicCluster};
   |                                                                    ^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
  --> src/migration/database.rs:70:5
   |
70 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `MigrationConfig`
  --> src/migration/validator.rs:10:41
   |
10 | use crate::migration::{ValidationLevel, MigrationConfig};
   |                                         ^^^^^^^^^^^^^^^

warning: unused imports: `DateTime` and `Utc`
  --> src/migration/validator.rs:14:14
   |
14 | use chrono::{DateTime, Utc};
   |              ^^^^^^^^  ^^^

warning: unused import: `MigrationPhase`
 --> src/migration/rollback.rs:7:41
  |
7 | use crate::migration::{MigrationConfig, MigrationPhase};
  |                                         ^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
  --> src/migration/guide.rs:10:5
   |
10 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `DatabaseInfo`, `ThematicCluster`, and `TypeScriptAnalysis`
 --> src/migration/database_impl.rs:7:34
  |
7 | use crate::migration::analyzer::{TypeScriptAnalysis, DatabaseInfo, ThematicCluster};
  |                                  ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^

warning: unused imports: `Row` and `Transaction`
 --> src/migration/database_impl.rs:8:60
  |
8 | use rusqlite::{Connection, Result as SqliteResult, params, Row, Transaction};
  |                                                            ^^^  ^^^^^^^^^^^

warning: unused import: `PathBuf`
  --> src/migration/database_impl.rs:10:23
   |
10 | use std::path::{Path, PathBuf};
   |                       ^^^^^^^

warning: unused import: `std::collections::HashMap`
  --> src/migration/database_impl.rs:11:5
   |
11 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `uuid::Uuid`
  --> src/migration/database_impl.rs:13:5
   |
13 | use uuid::Uuid;
   |     ^^^^^^^^^^

warning: unused import: `MigrationPhase`
  --> src/migration/live_test.rs:7:91
   |
7  | use crate::migration::{MigrationManager, MigrationConfig, MigrationType, ValidationLevel, MigrationPhase};
   |                                                                                           ^^^^^^^^^^^^^^
   |
help: if this is a test module, consider adding a `#[cfg(test)]` to the containing module
  --> src/migration/mod.rs:13:1
   |
13 | pub mod live_test;
   | ^^^^^^^^^^^^^^^^^^

warning: unused import: `Ordering`
  --> src/migration/live_test.rs:14:36
   |
14 | use std::sync::atomic::{AtomicU64, Ordering};
   |                                    ^^^^^^^^
   |
help: if this is a test module, consider adding a `#[cfg(test)]` to the containing module
  --> src/migration/mod.rs:13:1
   |
13 | pub mod live_test;
   | ^^^^^^^^^^^^^^^^^^

warning: unused import: `MigrationStats`
 --> src/migration/performance.rs:7:59
  |
7 | use crate::migration::database_impl::{ProductionDatabase, MigrationStats, BatchConfig};
  |                                                           ^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
  --> src/migration/performance.rs:10:5
   |
10 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unnecessary parentheses around assigned value
   --> src/migration/performance.rs:494:42
    |
494 |           let overall_optimization_score = (
    |  __________________________________________^
495 | |             performance_improvement_factor * 0.4 +
    | |____________^
...
498 |               disk_io_efficiency_score * 0.2
    |  ___________________________________________^
499 | |         );
    | |_________^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
494 ~         let overall_optimization_score = performance_improvement_factor * 0.4 +
495 |             memory_efficiency_score * 0.2 +
496 |             cpu_utilization_score * 0.2 +
497 ~             disk_io_efficiency_score * 0.2;
    |

warning: unused import: `MigrationStatus`
 --> src/migration/ui.rs:7:107
  |
7 | use crate::migration::{MigrationManager, MigrationConfig, MigrationType, ValidationLevel, MigrationPhase, MigrationStatus};
  |                                                                                                           ^^^^^^^^^^^^^^^

warning: unused imports: `ClearType`, `Clear`, `Event`, `KeyCode`, `KeyEvent`, `cursor`, `execute`, `queue`, `self`, `self`, and `style`
  --> src/migration/ui.rs:13:5
   |
13 |     cursor, execute, queue, style,
   |     ^^^^^^  ^^^^^^^  ^^^^^  ^^^^^
14 |     terminal::{self, Clear, ClearType},
   |                ^^^^  ^^^^^  ^^^^^^^^^
15 |     event::{self, Event, KeyCode, KeyEvent},
   |             ^^^^  ^^^^^  ^^^^^^^  ^^^^^^^^

warning: unused import: `AtomicU64`
  --> src/migration/ui.rs:21:37
   |
21 | use std::sync::atomic::{AtomicBool, AtomicU64, Ordering};
   |                                     ^^^^^^^^^

warning: unused imports: `MigrationStats` and `ProductionDatabase`
 --> src/migration/validation_suite.rs:7:39
  |
7 | use crate::migration::database_impl::{ProductionDatabase, MigrationStats};
  |                                       ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused import: `MigrationConfig`
 --> src/migration/validation_suite.rs:8:41
  |
8 | use crate::migration::{ValidationLevel, MigrationConfig};
  |                                         ^^^^^^^^^^^^^^^

warning: unused import: `params`
  --> src/migration/validation_suite.rs:13:28
   |
13 | use rusqlite::{Connection, params};
   |                            ^^^^^^

warning: unused import: `anyhow`
  --> src/security/audit.rs:11:22
   |
11 | use anyhow::{Result, anyhow};
   |                      ^^^^^^

warning: unused import: `AuditEvent`
  --> src/security/compliance.rs:16:43
   |
16 | use super::audit::{EnterpriseAuditLogger, AuditEvent, AuditEventType};
   |                                           ^^^^^^^^^^

warning: unused import: `HashSet`
 --> src/security/permissions.rs:9:33
  |
9 | use std::collections::{HashMap, HashSet};
  |                                 ^^^^^^^

warning: unused import: `tokio::sync::RwLock`
  --> src/security/mod.rs:18:5
   |
18 | use tokio::sync::RwLock;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::os::unix::fs::MetadataExt`
   --> src/shell/mod.rs:313:17
    |
313 |             use std::os::unix::fs::MetadataExt;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `memory-stats`
   --> src/startup/fast_boot.rs:183:15
    |
183 |         #[cfg(feature = "memory-stats")]
    |               ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `coverage-reporting`, `debug-mode`, `default`, `embeddings`, `integration-tests`, `local-optimizations`, `minimal-dependencies`, `optimized-consensus`, `performance-tests`, `pprof`, `production`, `profiling`, `security-tests`, `static-linking`, `testing`, and `unit-tests`
    = help: consider adding `memory-stats` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unused imports: `Statement` and `params`
  --> src/database/optimize.rs:13:28
   |
13 | use rusqlite::{Connection, Statement, params};
   |                            ^^^^^^^^^  ^^^^^^

warning: use of deprecated function `base64::encode`: Use Engine::encode
   --> src/analytics/api.rs:614:13
    |
614 |     base64::encode(&bytes)
    |             ^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: unused variable: `cached`
   --> src/core/semantic.rs:200:25
    |
200 |             if let Some(cached) = cache::get(&cache_key, CacheCategory::Repository).await {
    |                         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_cached`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `query`
   --> src/core/memory.rs:603:45
    |
603 |     async fn update_search_analytics(&self, query: &str, results: &[SemanticSearchResult]) -> Result<()> {
    |                                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_query`

warning: unused variable: `db`
   --> src/core/analytics.rs:555:13
    |
555 |         let db = get_database().await?;
    |             ^^ help: if this is intentional, prefix it with an underscore: `_db`

warning: unused variable: `period`
   --> src/core/analytics.rs:695:9
    |
695 |         period: AggregationPeriod,
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_period`

warning: unused variable: `db_path`
   --> src/core/migrator.rs:778:13
    |
778 |         let db_path = self.rust_config_dir.join("conversations.db");
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_db_path`

warning: unused variable: `context`
  --> src/consensus/engine.rs:89:13
   |
89 |         let context = request.context.clone();
   |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: unused variable: `config`
  --> src/consensus/engine.rs:91:13
   |
91 |         let config = self.config.read().await.clone();
   |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: value assigned to `final_content` is never read
   --> src/consensus/engine.rs:102:21
    |
102 |             let mut final_content = String::new();
    |                     ^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: value assigned to `response_content` is never read
   --> src/consensus/pipeline.rs:447:17
    |
447 |         let mut response_content = String::new();
    |                 ^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `cost` is never read
   --> src/consensus/pipeline.rs:450:17
    |
450 |         let mut cost = 0.0f64;
    |                 ^^^^
    |
    = help: maybe it is overwritten before being read?

error[E0308]: mismatched types
  --> src/transformation/engine.rs:61:55
   |
61 |             syntax_modifier: SyntaxAwareModifier::new(parser.clone()),
   |                              ------------------------ ^^^^^^^^^^^^^^ expected `Arc<TreeSitterParser>`, found `Arc<Mutex<TreeSitterParser>>`
   |                              |
   |                              arguments to this function are incorrect
   |
   = note: expected struct `Arc<TreeSitterParser>`
              found struct `Arc<tokio::sync::Mutex<TreeSitterParser>>`
note: associated function defined here
  --> src/transformation/syntax.rs:14:12
   |
14 |     pub fn new(parser: Arc<Parser>) -> Self {
   |            ^^^ -------------------

warning: unused variable: `ast`
  --> src/transformation/engine.rs:80:13
   |
80 |         let ast = parser.parse(&content)?;
   |             ^^^ help: if this is intentional, prefix it with an underscore: `_ast`

warning: variable does not need to be mutable
  --> src/transformation/engine.rs:83:13
   |
83 |         let mut symbol_index = self.symbol_index.lock().await;
   |             ----^^^^^^^^^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> src/transformation/engine.rs:124:13
    |
124 |         let mut history = self.history.lock().await;
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/transformation/engine.rs:143:13
    |
143 |         let mut history = self.history.lock().await;
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/transformation/engine.rs:154:13
    |
154 |         let mut history = self.history.lock().await;
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `conflicts`
   --> src/transformation/conflict.rs:173:9
    |
173 |         conflicts: Vec<ConflictInfo>,
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_conflicts`

warning: unused variable: `resolutions`
   --> src/transformation/conflict.rs:174:9
    |
174 |         resolutions: HashMap<String, ResolutionAction>,
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_resolutions`

warning: unused variable: `changes`
   --> src/transformation/conflict.rs:199:9
    |
199 |         changes: &[CodeChange],
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_changes`

warning: unused variable: `tag`
  --> src/transformation/preview.rs:78:18
   |
78 |             let (tag, old_range, new_range) = group[0].as_tag_tuple();
   |                  ^^^ help: if this is intentional, prefix it with an underscore: `_tag`

error[E0596]: cannot borrow data in an `Arc` as mutable
   --> src/transformation/validation.rs:102:15
    |
102 |         match parser.parse(&change.new_content) {
    |               ^^^^^^ cannot borrow as mutable
    |
    = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Arc<TreeSitterParser>`

warning: unused variable: `include_declaration`
   --> src/cli/commands.rs:112:52
    |
112 |         Commands::References { symbol, file, line, include_declaration, group_by_file } => {
    |                                                    ^^^^^^^^^^^^^^^^^^^ help: try ignoring the field: `include_declaration: _`

warning: unused variable: `group_by_file`
   --> src/cli/commands.rs:112:73
    |
112 |         Commands::References { symbol, file, line, include_declaration, group_by_file } => {
    |                                                                         ^^^^^^^^^^^^^ help: try ignoring the field: `group_by_file: _`

warning: unused variable: `incoming`
   --> src/cli/commands.rs:115:56
    |
115 |         Commands::CallGraph { function, depth, format, incoming, outgoing } => {
    |                                                        ^^^^^^^^ help: try ignoring the field: `incoming: _`

warning: unused variable: `outgoing`
   --> src/cli/commands.rs:115:66
    |
115 |         Commands::CallGraph { function, depth, format, incoming, outgoing } => {
    |                                                                  ^^^^^^^^ help: try ignoring the field: `outgoing: _`

warning: unused variable: `recommendations`
   --> src/cli/commands.rs:434:5
    |
434 |     recommendations: bool,
    |     ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_recommendations`

warning: unused variable: `charts`
   --> src/cli/commands.rs:561:58
    |
561 |         AnalyticsCommands::Report { report_type, period, charts, output } => {
    |                                                          ^^^^^^ help: try ignoring the field: `charts: _`

warning: unused variable: `output`
   --> src/cli/commands.rs:561:66
    |
561 |         AnalyticsCommands::Report { report_type, period, charts, output } => {
    |                                                                  ^^^^^^ help: try ignoring the field: `output: _`

warning: unused variable: `predict`
   --> src/cli/commands.rs:579:53
    |
579 |         AnalyticsCommands::Trends { metric, period, predict } => {
    |                                                     ^^^^^^^ help: try ignoring the field: `predict: _`

warning: unused variable: `detailed`
   --> src/cli/commands.rs:818:44
    |
818 |                 KnowledgeCommands::Stats { detailed } => {
    |                                            ^^^^^^^^ help: try ignoring the field: `detailed: _`

warning: unused variable: `paths`
   --> src/cli/commands.rs:821:58
    |
821 |                 KnowledgeCommands::Query { query, limit, paths } => {
    |                                                          ^^^^^ help: try ignoring the field: `paths: _`

warning: unused variable: `output`
   --> src/cli/commands.rs:824:45
    |
824 |                 KnowledgeCommands::Export { output, format, attributes } => {
    |                                             ^^^^^^ help: try ignoring the field: `output: _`

warning: unused variable: `attributes`
   --> src/cli/commands.rs:824:61
    |
824 |                 KnowledgeCommands::Export { output, format, attributes } => {
    |                                                             ^^^^^^^^^^ help: try ignoring the field: `attributes: _`

warning: unused variable: `output`
   --> src/cli/commands.rs:827:48
    |
827 |                 KnowledgeCommands::Visualize { output, layout, focus } => {
    |                                                ^^^^^^ help: try ignoring the field: `output: _`

warning: unused variable: `layout`
   --> src/cli/commands.rs:827:56
    |
827 |                 KnowledgeCommands::Visualize { output, layout, focus } => {
    |                                                        ^^^^^^ help: try ignoring the field: `layout: _`

warning: unused variable: `focus`
   --> src/cli/commands.rs:827:64
    |
827 |                 KnowledgeCommands::Visualize { output, layout, focus } => {
    |                                                                ^^^^^ help: try ignoring the field: `focus: _`

warning: unused variable: `progress`
    --> src/cli/commands.rs:1405:69
     |
1405 |         IndexCommands::Build { path, force, include_tests, exclude, progress } => {
     |                                                                     ^^^^^^^^ help: try ignoring the field: `progress: _`

warning: unused variable: `detailed`
    --> src/cli/commands.rs:1408:32
     |
1408 |         IndexCommands::Stats { detailed, health } => {
     |                                ^^^^^^^^ help: try ignoring the field: `detailed: _`

warning: unused variable: `health`
    --> src/cli/commands.rs:1408:42
     |
1408 |         IndexCommands::Stats { detailed, health } => {
     |                                          ^^^^^^ help: try ignoring the field: `health: _`

warning: unused variable: `detailed`
    --> src/cli/commands.rs:1627:31
     |
1627 |         TrustCommands::List { detailed, status, expired } => {
     |                               ^^^^^^^^ help: try ignoring the field: `detailed: _`

warning: unused variable: `from`
    --> src/cli/commands.rs:2987:35
     |
2987 |         MigrateCommands::Wizard { from, professional, skip_checks } => {
     |                                   ^^^^ help: try ignoring the field: `from: _`

warning: unused variable: `migration_config`
    --> src/cli/commands.rs:3002:20
     |
3002 |                 Ok(migration_config) => {
     |                    ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_migration_config`

warning: unused variable: `backup`
    --> src/cli/commands.rs:3013:68
     |
3013 |         MigrateCommands::Quick { from, migration_type, validation, backup } => {
     |                                                                    ^^^^^^ help: try ignoring the field: `backup: _`

warning: unused variable: `stats`
    --> src/cli/commands.rs:3093:33
     |
3093 |                     if let Some(stats) = results.migration_stats {
     |                                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_stats`

warning: unused variable: `from`
    --> src/cli/commands.rs:3152:38
     |
3152 |         MigrateCommands::Benchmark { from, conversations, batch_sizes, parallel, output } => {
     |                                      ^^^^ help: try ignoring the field: `from: _`

warning: unused variable: `from`
    --> src/cli/commands.rs:3268:37
     |
3268 |         MigrateCommands::Optimize { from, target, memory, cores, max_performance } => {
     |                                     ^^^^ help: try ignoring the field: `from: _`

warning: variable does not need to be mutable
   --> src/analysis/repository_intelligence.rs:445:13
    |
445 |         let mut analyzer = Self {
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/analysis/fast_parse.rs:500:13
    |
500 |         let mut symbols = Vec::new();
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/analysis/fast_parse.rs:502:13
    |
502 |         let mut classes = Vec::new();
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/analysis/fast_parse.rs:264:13
    |
264 |         let mut parsers = self.parsers.write().await;
    |             ----^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/analysis/fast_parse.rs:265:13
    |
265 |         let mut parser = parsers.get_parser(&language)?;
    |             ----^^^^^^
    |             |
    |             help: remove this `mut`

error[E0596]: cannot borrow `*parser` as mutable, as it is behind a `&` reference
   --> src/analysis/fast_parse.rs:267:20
    |
267 |         let tree = parser.parse(content_str.as_bytes(), None);
    |                    ^^^^^^ `parser` is a `&` reference, so the data it refers to cannot be borrowed as mutable
    |
help: consider specifying this binding's type
    |
265 |         let mut parser: &mut tree_sitter::Parser = parsers.get_parser(&language)?;
    |                       ++++++++++++++++++++++++++

warning: unused variable: `path`
  --> src/commands/search.rs:20:5
   |
20 |     path: Option<PathBuf>,
   |     ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `depth`
   --> src/commands/search.rs:241:5
    |
241 |     depth: Option<usize>,
    |     ^^^^^ help: if this is intentional, prefix it with an underscore: `_depth`

warning: unused variable: `architecture`
  --> src/commands/analyze.rs:69:5
   |
69 |     architecture: bool,
   |     ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_architecture`

warning: unused variable: `dependencies`
  --> src/commands/analyze.rs:70:5
   |
70 |     dependencies: bool,
   |     ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dependencies`

warning: unused variable: `output_format`
  --> src/commands/analyze.rs:71:5
   |
71 |     output_format: Option<String>,
   |     ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_format`

warning: unused variable: `min_quality`
   --> src/commands/models.rs:219:5
    |
219 |     min_quality: Option<f32>,
    |     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_min_quality`

warning: unused variable: `selector`
   --> src/commands/models.rs:231:9
    |
231 |     let selector = ModelSelector::new(ModelSelectionStrategy::Balanced);
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_selector`

warning: variable does not need to be mutable
   --> src/commands/models.rs:245:13
    |
245 |         let mut strategy_selector = ModelSelector::new(*strategy);
    |             ----^^^^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `budget`
   --> src/commands/models.rs:452:21
    |
452 |         if let Some(budget) = budget {
    |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_budget`

warning: unused variable: `engine`
   --> src/commands/improve.rs:220:13
    |
220 |         let engine = TransformationEngine::new(context).await?;
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_engine`

warning: unused variable: `metric`
   --> src/commands/analytics.rs:233:25
    |
233 | async fn analyze_trends(metric: Option<&str>, period: AggregationPeriod) -> Result<()> {
    |                         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_metric`

warning: unused variable: `period`
   --> src/commands/analytics.rs:258:57
    |
258 | async fn analyze_costs(breakdown: bool, optimize: bool, period: AggregationPeriod) -> Result<()> {
    |                                                         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_period`

warning: unused variable: `period`
   --> src/commands/analytics.rs:534:5
    |
534 |     period: AggregationPeriod,
    |     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_period`

error[E0716]: temporary value dropped while borrowed
   --> src/commands/analytics.rs:550:25
    |
550 |         pb.set_message(&format!("Analyzing trend for metric: {}", metric_name));
    |         ----------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-- temporary value is freed at the end of this statement
    |         |               |
    |         |               creates a temporary value which is freed while still in use
    |         argument requires that borrow lasts for `'static`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `period`
   --> src/commands/analytics.rs:590:5
    |
590 |     period: AggregationPeriod,
    |     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_period`

error[E0308]: arguments to this method are incorrect
   --> src/commands/analytics.rs:740:54
    |
740 |             let ascii_dashboard = engine.dashboard().render_ascii(
    |                                                      ^^^^^^^^^^^^
741 |                 width as usize,
    |                 -------------- expected `u16`, found `usize`
742 |                 height.saturating_sub(2) as usize
    |                 --------------------------------- expected `u16`, found `usize`
    |
note: method defined here
   --> src/analytics/dashboard.rs:337:18
    |
337 |     pub async fn render_ascii(&self, width: u16, height: u16) -> Result<String> {
    |                  ^^^^^^^^^^^^        ----------  -----------
help: you can convert a `usize` to a `u16` and panic if the converted value doesn't fit
    |
741 |                 (width as usize).try_into().unwrap(),
    |                 +              +++++++++++++++++++++
help: you can convert a `usize` to a `u16` and panic if the converted value doesn't fit
    |
742 |                 (height.saturating_sub(2) as usize).try_into().unwrap()
    |                 +                                 +++++++++++++++++++++

error[E0308]: arguments to this method are incorrect
   --> src/commands/analytics.rs:764:50
    |
764 |         let ascii_dashboard = engine.dashboard().render_ascii(
    |                                                  ^^^^^^^^^^^^
765 |             width as usize,
    |             -------------- expected `u16`, found `usize`
766 |             height.saturating_sub(2) as usize
    |             --------------------------------- expected `u16`, found `usize`
    |
note: method defined here
   --> src/analytics/dashboard.rs:337:18
    |
337 |     pub async fn render_ascii(&self, width: u16, height: u16) -> Result<String> {
    |                  ^^^^^^^^^^^^        ----------  -----------
help: you can convert a `usize` to a `u16` and panic if the converted value doesn't fit
    |
765 |             (width as usize).try_into().unwrap(),
    |             +              +++++++++++++++++++++
help: you can convert a `usize` to a `u16` and panic if the converted value doesn't fit
    |
766 |             (height.saturating_sub(2) as usize).try_into().unwrap()
    |             +                                 +++++++++++++++++++++

warning: variable does not need to be mutable
   --> src/commands/hooks.rs:259:13
    |
259 |         let mut invalid_count = 0;
    |             ----^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

error[E0609]: no field `event_type` on type `&hooks::audit::AuditEvent`
   --> src/commands/hooks.rs:573:48
    |
573 |             println!("   {} - {:?}", time, log.event_type);
    |                                                ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `timestamp`, `event`, `user_id`, `session_id`, `context`

warning: unused variable: `query`
   --> src/commands/consensus.rs:284:5
    |
284 |     query: &str,
    |     ^^^^^ help: if this is intentional, prefix it with an underscore: `_query`

warning: unused variable: `config`
  --> src/commands/planning.rs:27:9
   |
27 |     let config = get_config().await?;
   |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `depth`
  --> src/commands/planning.rs:93:5
   |
93 |     depth: Option<usize>,
   |     ^^^^^ help: if this is intentional, prefix it with an underscore: `_depth`

warning: unused variable: `config`
  --> src/commands/planning.rs:99:9
   |
99 |     let config = get_config().await?;
   |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `config`
   --> src/commands/planning.rs:164:9
    |
164 |     let config = get_config().await?;
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `planning_engine`
   --> src/commands/planning.rs:166:9
    |
166 |     let planning_engine = PlanningEngine::new(consensus_engine).await?;
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_planning_engine`

warning: unused variable: `config`
   --> src/commands/planning.rs:225:9
    |
225 |     let config = get_config().await?;
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `planning_engine`
   --> src/commands/planning.rs:227:9
    |
227 |     let planning_engine = PlanningEngine::new(consensus_engine).await?;
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_planning_engine`

error[E0282]: type annotations needed for `Vec<_>`
   --> src/commands/security.rs:383:17
    |
383 |             let users = vec![];
    |                 ^^^^^
...
390 |                     user.id,
    |                     ---- type must be known at this point
    |
help: consider giving `users` an explicit type, where the placeholders `_` are specified
    |
383 |             let users: Vec<_> = vec![];
    |                      ++++++++

error[E0599]: the method `join` exists for struct `Vec<&String>`, but its trait bounds were not satisfied
   --> src/commands/security.rs:549:89
    |
549 |                 println!("Permissions: {}", role.permissions.iter().collect::<Vec<_>>().join(", "));
    |                                                                                         ^^^^ method cannot be called on `Vec<&String>` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `[&std::string::String]: std::slice::Join<_>`

error[E0282]: type annotations needed for `Vec<_>`
   --> src/commands/security.rs:590:17
    |
590 |             let teams = vec![];
    |                 ^^^^^
...
597 |                     team.id,
    |                     ---- type must be known at this point
    |
help: consider giving `teams` an explicit type, where the placeholders `_` are specified
    |
590 |             let teams: Vec<_> = vec![];
    |                      ++++++++

warning: variable does not need to be mutable
   --> src/providers/openrouter/performance.rs:477:22
    |
477 |         let (status, mut issues, recommendation) = if let Some(m) = metrics {
    |                      ----^^^^^^
    |                      |
    |                      help: remove this `mut`

error[E0382]: borrow of moved value: `name`
    --> src/providers/openrouter/performance.rs:1176:49
     |
1141 |         name: String,
     |         ---- move occurs because `name` has type `std::string::String`, which does not implement the `Copy` trait
...
1153 |             name,
     |             ---- value moved here
...
1176 |         log::info!("Created A/B test: {} ({})", name, test_id);
     |                                                 ^^^^ value borrowed here after move
     |
     = note: this error originates in the macro `$crate::__private_api::format_args` which comes from the expansion of the macro `log::info` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider cloning the value if the performance cost is acceptable
     |
1153 |             name: name.clone(),
     |                 ++++++++++++++

warning: variable does not need to be mutable
   --> src/providers/openrouter/streaming.rs:231:9
    |
231 |         mut cancel_rx: oneshot::Receiver<()>,
    |         ----^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `event_sender`
   --> src/interactive_tui.rs:136:14
    |
136 |         let (event_sender, event_receiver) = mpsc::unbounded_channel();
    |              ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_event_sender`

warning: variable does not need to be mutable
   --> src/interactive_tui.rs:154:13
    |
154 |         let mut accessibility = AccessibilityManager::new();
    |             ----^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unreachable pattern
   --> src/interactive_tui.rs:302:25
    |
221 |                         KeyCode::Char(c) => {
    |                         ---------------- matches all the relevant values
...
302 |                         KeyCode::Char('?') => {
    |                         ^^^^^^^^^^^^^^^^^^ no value can reach this
    |
    = note: `#[warn(unreachable_patterns)]` on by default

warning: unreachable pattern
   --> src/interactive_tui.rs:309:25
    |
221 |                         KeyCode::Char(c) => {
    |                         ---------------- matches all the relevant values
...
309 |                         KeyCode::Char('h') if key.modifiers.contains(KeyModifiers::CONTROL) => {
    |                         ^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> src/interactive_tui.rs:314:25
    |
221 |                         KeyCode::Char(c) => {
    |                         ---------------- matches all the relevant values
...
314 |                         KeyCode::Char('a') if key.modifiers.contains(KeyModifiers::CONTROL) => {
    |                         ^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> src/interactive_tui.rs:319:25
    |
221 |                         KeyCode::Char(c) => {
    |                         ---------------- matches all the relevant values
...
319 |                         KeyCode::Char('p') if key.modifiers.contains(KeyModifiers::CONTROL) => {
    |                         ^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> src/interactive_tui.rs:325:25
    |
221 |                         KeyCode::Char(c) => {
    |                         ---------------- matches all the relevant values
...
325 |                         KeyCode::Char('t') if key.modifiers.contains(KeyModifiers::CONTROL) => {
    |                         ^^^^^^^^^^^^^^^^^^ no value can reach this

error[E0499]: cannot borrow `*self` as mutable more than once at a time
   --> src/interactive_tui.rs:206:21
    |
204 |             if let Some(receiver) = &mut self.event_receiver {
    |                                     ------------------------ first mutable borrow occurs here
205 |                 while let Ok(tui_event) = receiver.try_recv() {
    |                                           -------- first borrow later used here
206 |                     self.handle_tui_event(tui_event).await?;
    |                     ^^^^ second mutable borrow occurs here

error[E0599]: no variant or associated item named `ConsensusProgress` found for enum `tui_commands::TuiEvent` in the current scope
   --> src/interactive_tui.rs:694:23
    |
694 |             TuiEvent::ConsensusProgress(progress) => {
    |                       ^^^^^^^^^^^^^^^^^ variant or associated item not found in `TuiEvent`
    |
   ::: src/cli/tui_commands.rs:13:1
    |
13  | pub enum TuiEvent {
    | ----------------- variant or associated item `ConsensusProgress` not found for this enum

error[E0599]: no variant or associated item named `ConsensusComplete` found for enum `tui_commands::TuiEvent` in the current scope
   --> src/interactive_tui.rs:697:23
    |
697 |             TuiEvent::ConsensusComplete => {
    |                       ^^^^^^^^^^^^^^^^^ variant or associated item not found in `TuiEvent`
    |
   ::: src/cli/tui_commands.rs:13:1
    |
13  | pub enum TuiEvent {
    | ----------------- variant or associated item `ConsensusComplete` not found for this enum

error[E0599]: no variant or associated item named `StatusUpdate` found for enum `tui_commands::TuiEvent` in the current scope
   --> src/interactive_tui.rs:703:23
    |
703 |             TuiEvent::StatusUpdate(status) => {
    |                       ^^^^^^^^^^^^ variant or associated item not found in `TuiEvent`
    |
   ::: src/cli/tui_commands.rs:13:1
    |
13  | pub enum TuiEvent {
    | ----------------- variant or associated item `StatusUpdate` not found for this enum

error[E0308]: mismatched types
   --> src/interactive_tui.rs:692:36
    |
692 |                 self.messages.push(message);
    |                               ---- ^^^^^^^ expected `Message`, found `String`
    |                               |
    |                               arguments to this method are incorrect
    |
note: method defined here
   --> /rustc/6b00bc3880198600130e1cf62b8f8a93494488cc/library/alloc/src/vec/mod.rs:2442:12

error[E0502]: cannot borrow `self.theme_manager` as mutable because it is also borrowed as immutable
    --> src/interactive_tui.rs:1018:25
     |
1004 |         let available_themes = self.theme_manager.available_themes();
     |                                ------------------ immutable borrow occurs here
...
1018 |         if let Err(e) = self.theme_manager.load_theme(next_theme) {
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here
...
1021 |             self.add_message(&format!("🎨 Switched to '{}' theme", next_theme), MessageType::SystemResponse).await;
     |                                                                    ---------- immutable borrow later used here

warning: unreachable pattern
   --> src/tui/app.rs:250:13
    |
202 |             KeyCode::Char(c) => {
    |             ---------------- matches all the relevant values
...
250 |             KeyCode::Char('h') if key.modifiers.contains(KeyModifiers::CONTROL) => {
    |             ^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> src/tui/app.rs:254:13
    |
202 |             KeyCode::Char(c) => {
    |             ---------------- matches all the relevant values
...
254 |             KeyCode::Char('a') if key.modifiers.contains(KeyModifiers::CONTROL) => {
    |             ^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> src/tui/app.rs:258:13
    |
202 |             KeyCode::Char(c) => {
    |             ---------------- matches all the relevant values
...
258 |             KeyCode::Char('p') if key.modifiers.contains(KeyModifiers::CONTROL) => {
    |             ^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> src/tui/app.rs:273:13
    |
202 |             KeyCode::Char(c) => {
    |             ---------------- matches all the relevant values
...
273 |             KeyCode::Char('l') if key.modifiers.contains(KeyModifiers::CONTROL) => {
    |             ^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> src/tui/app.rs:279:13
    |
202 |             KeyCode::Char(c) => {
    |             ---------------- matches all the relevant values
...
279 |             KeyCode::Char('?') => {
    |             ^^^^^^^^^^^^^^^^^^ no value can reach this

error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable
   --> src/tui/advanced/explorer.rs:102:9
    |
102 |         self.load_directory_tree(&self.current_dir, 0).await?;
    |         ^^^^^-------------------^-----------------^^^^
    |         |    |                   |
    |         |    |                   immutable borrow occurs here
    |         |    immutable borrow later used by call
    |         mutable borrow occurs here

error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable
   --> src/tui/advanced/explorer.rs:331:29
    |
329 |                     if let Some(entry) = self.entries.get(selected) {
    |                                          ------------ immutable borrow occurs here
330 |                         if entry.entry_type == EntryType::Directory {
331 |                             self.toggle_directory_expansion(&entry.path).await?;
    |                             ^^^^^--------------------------^^^^^^^^^^^^^
    |                             |    |
    |                             |    immutable borrow later used by call
    |                             mutable borrow occurs here

error[E0308]: `?` operator has incompatible types
   --> src/tui/advanced/editor.rs:498:21
    |
456 |     pub async fn handle_key_event(&mut self, key: KeyEvent, _theme: &Theme) -> Result<bool> {
    |                                                                                ------------ expected `std::result::Result<bool, anyhow::Error>` because of return type
...
498 |                     self.handle_editor_navigation(tab, key).await?
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<bool, Error>`, found `bool`
    |
    = note: `?` operator cannot convert from `bool` to `std::result::Result<bool, anyhow::Error>`
    = note: expected enum `std::result::Result<bool, anyhow::Error>`
               found type `bool`
help: try removing this `?`
    |
498 -                     self.handle_editor_navigation(tab, key).await?
498 +                     self.handle_editor_navigation(tab, key).await
    |
help: try wrapping the expression in `Ok`
    |
498 |                     Ok(self.handle_editor_navigation(tab, key).await?)
    |                     +++                                              +

error[E0308]: mismatched types
  --> src/hooks/mod.rs:88:13
   |
85 |         let executor = Arc::new(HookExecutor::new(
   |                                 ----------------- arguments to this function are incorrect
...
88 |             approval_workflow.clone(),
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `approval::ApprovalWorkflow`, found `approval_workflow::ApprovalWorkflow`
   |
   = note: `approval_workflow::ApprovalWorkflow` and `approval::ApprovalWorkflow` have similar names, but are actually distinct types
note: `approval_workflow::ApprovalWorkflow` is defined in module `crate::hooks::approval_workflow` of the current crate
  --> src/hooks/approval_workflow.rs:15:1
   |
15 | pub struct ApprovalWorkflow {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: `approval::ApprovalWorkflow` is defined in module `crate::hooks::approval` of the current crate
  --> src/hooks/approval.rs:61:1
   |
61 | pub struct ApprovalWorkflow {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: associated function defined here
  --> src/hooks/execution.rs:90:12
   |
90 |     pub fn new(
   |            ^^^
...
93 |         approval_workflow: Arc<ApprovalWorkflow>,
   |         ----------------------------------------

warning: unused variable: `template`
   --> src/hooks/execution.rs:398:9
    |
398 |         template: Option<&str>,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_template`

warning: unused variable: `shutdown_rx`
   --> src/hooks/dispatcher.rs:159:31
    |
159 |         let (shutdown_tx, mut shutdown_rx) = mpsc::channel::<()>(1);
    |                               ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_shutdown_rx`

warning: variable does not need to be mutable
   --> src/hooks/dispatcher.rs:159:27
    |
159 |         let (shutdown_tx, mut shutdown_rx) = mpsc::channel::<()>(1);
    |                           ----^^^^^^^^^^^
    |                           |
    |                           help: remove this `mut`

error[E0308]: mismatched types
   --> src/hooks/consensus_integration.rs:424:22
    |
424 |             hook_id: format!("pre_{}_stage", stage_name),
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `HookId`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0624]: method `log_event` is private
   --> src/hooks/consensus_integration.rs:431:27
    |
431 |         self.audit_logger.log_event(event).await?;
    |                           ^^^^^^^^^ private method
    |
   ::: src/hooks/audit.rs:140:5
    |
140 |     async fn log_event(&self, event: AuditEvent) -> Result<()> {
    |     ---------------------------------------------------------- private method defined here

error[E0308]: mismatched types
   --> src/hooks/consensus_integration.rs:494:22
    |
494 |             hook_id: format!("post_{}_stage", stage_name),
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `HookId`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0624]: method `log_event` is private
   --> src/hooks/consensus_integration.rs:501:27
    |
501 |         self.audit_logger.log_event(event).await?;
    |                           ^^^^^^^^^ private method
    |
   ::: src/hooks/audit.rs:140:5
    |
140 |     async fn log_event(&self, event: AuditEvent) -> Result<()> {
    |     ---------------------------------------------------------- private method defined here

error[E0599]: no variant or associated item named `Medium` found for enum `ApprovalPriority` in the current scope
   --> src/hooks/consensus_integration.rs:868:41
    |
868 |             priority: ApprovalPriority::Medium,
    |                                         ^^^^^^ variant or associated item not found in `ApprovalPriority`
    |
   ::: src/hooks/approval_workflow.rs:156:1
    |
156 | pub enum ApprovalPriority {
    | ------------------------- variant or associated item `Medium` not found for this enum

error[E0308]: mismatched types
   --> src/hooks/approval_workflow.rs:395:26
    |
395 |                 hook_id: request_id.clone(),
    |                          ^^^^^^^^^^^^^^^^^^ expected `HookId`, found `String`
    |
help: try wrapping the expression in `hooks::registry::HookId`
    |
395 |                 hook_id: hooks::registry::HookId(request_id.clone()),
    |                          ++++++++++++++++++++++++                  +

error[E0624]: method `log_event` is private
   --> src/hooks/approval_workflow.rs:402:26
    |
402 |             audit_logger.log_event(event).await?;
    |                          ^^^^^^^^^ private method
    |
   ::: src/hooks/audit.rs:140:5
    |
140 |     async fn log_event(&self, event: AuditEvent) -> Result<()> {
    |     ---------------------------------------------------------- private method defined here

error[E0624]: method `log_event` is private
   --> src/hooks/approval_workflow.rs:457:26
    |
457 |             audit_logger.log_event(AuditEvent {
    |                          ^^^^^^^^^ private method
    |
   ::: src/hooks/audit.rs:140:5
    |
140 |     async fn log_event(&self, event: AuditEvent) -> Result<()> {
    |     ---------------------------------------------------------- private method defined here

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `event_type`
   --> src/hooks/approval_workflow.rs:458:17
    |
458 |                 event_type: AuditEventType::ApprovalDecisionMade,
    |                 ^^^^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0599]: no variant or associated item named `ApprovalDecisionMade` found for enum `hooks::audit::AuditEventType` in the current scope
   --> src/hooks/approval_workflow.rs:458:45
    |
458 |                 event_type: AuditEventType::ApprovalDecisionMade,
    |                                             ^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `AuditEventType`
    |
   ::: src/hooks/audit.rs:16:1
    |
16  | pub enum AuditEventType {
    | ----------------------- variant or associated item `ApprovalDecisionMade` not found for this enum

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `hook_id`
   --> src/hooks/approval_workflow.rs:460:17
    |
460 |                 hook_id: request_id.to_string(),
    |                 ^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `details`
   --> src/hooks/approval_workflow.rs:462:17
    |
462 |                 details: format!("Approval decision: {:?}", decision),
    |                 ^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `result`
   --> src/hooks/approval_workflow.rs:463:17
    |
463 |                 result: format!("{:?}", decision).to_lowercase(),
    |                 ^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `duration`
   --> src/hooks/approval_workflow.rs:464:17
    |
464 |                 duration: None,
    |                 ^^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0624]: method `log_event` is private
   --> src/hooks/approval_workflow.rs:529:26
    |
529 |             audit_logger.log_event(AuditEvent {
    |                          ^^^^^^^^^ private method
    |
   ::: src/hooks/audit.rs:140:5
    |
140 |     async fn log_event(&self, event: AuditEvent) -> Result<()> {
    |     ---------------------------------------------------------- private method defined here

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `event_type`
   --> src/hooks/approval_workflow.rs:530:17
    |
530 |                 event_type: AuditEventType::ApprovalCancelled,
    |                 ^^^^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0599]: no variant or associated item named `ApprovalCancelled` found for enum `hooks::audit::AuditEventType` in the current scope
   --> src/hooks/approval_workflow.rs:530:45
    |
530 |                 event_type: AuditEventType::ApprovalCancelled,
    |                                             ^^^^^^^^^^^^^^^^^ variant or associated item not found in `AuditEventType`
    |
   ::: src/hooks/audit.rs:16:1
    |
16  | pub enum AuditEventType {
    | ----------------------- variant or associated item `ApprovalCancelled` not found for this enum

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `hook_id`
   --> src/hooks/approval_workflow.rs:532:17
    |
532 |                 hook_id: request_id.to_string(),
    |                 ^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `details`
   --> src/hooks/approval_workflow.rs:534:17
    |
534 |                 details: format!("Approval request cancelled: {}", reason),
    |                 ^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `result`
   --> src/hooks/approval_workflow.rs:535:17
    |
535 |                 result: "cancelled".to_string(),
    |                 ^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `duration`
   --> src/hooks/approval_workflow.rs:536:17
    |
536 |                 duration: None,
    |                 ^^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0277]: the trait bound `approval_workflow::ApprovalStatus: Hash` is not satisfied
   --> src/hooks/approval_workflow.rs:582:30
    |
582 |             *stats_by_status.entry(completed_approval.final_status.clone()).or_insert(0) += 1;
    |                              ^^^^^ the trait `Hash` is not implemented for `approval_workflow::ApprovalStatus`
    |
note: required by a bound in `HashMap::<K, V, S>::entry`
   --> /rustc/6b00bc3880198600130e1cf62b8f8a93494488cc/library/std/src/collections/hash/map.rs:883:5
help: consider annotating `approval_workflow::ApprovalStatus` with `#[derive(Hash)]`
    |
145 + #[derive(Hash)]
146 | pub enum ApprovalStatus {
    |

error[E0624]: method `log_event` is private
   --> src/hooks/approval_workflow.rs:827:26
    |
827 |             audit_logger.log_event(AuditEvent {
    |                          ^^^^^^^^^ private method
    |
   ::: src/hooks/audit.rs:140:5
    |
140 |     async fn log_event(&self, event: AuditEvent) -> Result<()> {
    |     ---------------------------------------------------------- private method defined here

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `event_type`
   --> src/hooks/approval_workflow.rs:828:17
    |
828 |                 event_type: AuditEventType::ApprovalAutoApproved,
    |                 ^^^^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0599]: no variant or associated item named `ApprovalAutoApproved` found for enum `hooks::audit::AuditEventType` in the current scope
   --> src/hooks/approval_workflow.rs:828:45
    |
828 |                 event_type: AuditEventType::ApprovalAutoApproved,
    |                                             ^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `AuditEventType`
    |
   ::: src/hooks/audit.rs:16:1
    |
16  | pub enum AuditEventType {
    | ----------------------- variant or associated item `ApprovalAutoApproved` not found for this enum

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `hook_id`
   --> src/hooks/approval_workflow.rs:830:17
    |
830 |                 hook_id: request_id.clone(),
    |                 ^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `details`
   --> src/hooks/approval_workflow.rs:832:17
    |
832 |                 details: "Request auto-approved".to_string(),
    |                 ^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `result`
   --> src/hooks/approval_workflow.rs:833:17
    |
833 |                 result: "auto_approved".to_string(),
    |                 ^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `duration`
   --> src/hooks/approval_workflow.rs:834:17
    |
834 |                 duration: Some(duration as f64),
    |                 ^^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0624]: method `log_event` is private
   --> src/hooks/approval_workflow.rs:902:26
    |
902 |             audit_logger.log_event(AuditEvent {
    |                          ^^^^^^^^^ private method
    |
   ::: src/hooks/audit.rs:140:5
    |
140 |     async fn log_event(&self, event: AuditEvent) -> Result<()> {
    |     ---------------------------------------------------------- private method defined here

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `event_type`
   --> src/hooks/approval_workflow.rs:903:17
    |
903 |                 event_type: AuditEventType::ApprovalCompleted,
    |                 ^^^^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0599]: no variant or associated item named `ApprovalCompleted` found for enum `hooks::audit::AuditEventType` in the current scope
   --> src/hooks/approval_workflow.rs:903:45
    |
903 |                 event_type: AuditEventType::ApprovalCompleted,
    |                                             ^^^^^^^^^^^^^^^^^ variant or associated item not found in `AuditEventType`
    |
   ::: src/hooks/audit.rs:16:1
    |
16  | pub enum AuditEventType {
    | ----------------------- variant or associated item `ApprovalCompleted` not found for this enum

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `hook_id`
   --> src/hooks/approval_workflow.rs:905:17
    |
905 |                 hook_id: request.id.clone(),
    |                 ^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `details`
   --> src/hooks/approval_workflow.rs:907:17
    |
907 |                 details: format!("Approval completed with status: {:?}", final_status),
    |                 ^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `result`
   --> src/hooks/approval_workflow.rs:908:17
    |
908 |                 result: format!("{:?}", final_status).to_lowercase(),
    |                 ^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `duration`
   --> src/hooks/approval_workflow.rs:909:17
    |
909 |                 duration: Some(duration as f64),
    |                 ^^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0624]: method `log_event` is private
   --> src/hooks/quality_gates.rs:722:26
    |
722 |             audit_logger.log_event(AuditEvent {
    |                          ^^^^^^^^^ private method
    |
   ::: src/hooks/audit.rs:140:5
    |
140 |     async fn log_event(&self, event: AuditEvent) -> Result<()> {
    |     ---------------------------------------------------------- private method defined here

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `event_type`
   --> src/hooks/quality_gates.rs:723:17
    |
723 |                 event_type: AuditEventType::QualityGateAdded,
    |                 ^^^^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0599]: no variant or associated item named `QualityGateAdded` found for enum `hooks::audit::AuditEventType` in the current scope
   --> src/hooks/quality_gates.rs:723:45
    |
723 |                 event_type: AuditEventType::QualityGateAdded,
    |                                             ^^^^^^^^^^^^^^^^ variant or associated item not found in `AuditEventType`
    |
   ::: src/hooks/audit.rs:16:1
    |
16  | pub enum AuditEventType {
    | ----------------------- variant or associated item `QualityGateAdded` not found for this enum

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `hook_id`
   --> src/hooks/quality_gates.rs:725:17
    |
725 |                 hook_id: gate.id.clone(),
    |                 ^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `details`
   --> src/hooks/quality_gates.rs:727:17
    |
727 |                 details: format!("Quality gate added: {}", gate.name),
    |                 ^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `result`
   --> src/hooks/quality_gates.rs:728:17
    |
728 |                 result: "success".to_string(),
    |                 ^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `duration`
   --> src/hooks/quality_gates.rs:729:17
    |
729 |                 duration: None,
    |                 ^^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0624]: method `log_event` is private
   --> src/hooks/quality_gates.rs:747:30
    |
747 |                 audit_logger.log_event(AuditEvent {
    |                              ^^^^^^^^^ private method
    |
   ::: src/hooks/audit.rs:140:5
    |
140 |     async fn log_event(&self, event: AuditEvent) -> Result<()> {
    |     ---------------------------------------------------------- private method defined here

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `event_type`
   --> src/hooks/quality_gates.rs:748:21
    |
748 |                     event_type: AuditEventType::QualityGateRemoved,
    |                     ^^^^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0599]: no variant or associated item named `QualityGateRemoved` found for enum `hooks::audit::AuditEventType` in the current scope
   --> src/hooks/quality_gates.rs:748:49
    |
748 |                     event_type: AuditEventType::QualityGateRemoved,
    |                                                 ^^^^^^^^^^^^^^^^^^ variant or associated item not found in `AuditEventType`
    |
   ::: src/hooks/audit.rs:16:1
    |
16  | pub enum AuditEventType {
    | ----------------------- variant or associated item `QualityGateRemoved` not found for this enum

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `hook_id`
   --> src/hooks/quality_gates.rs:750:21
    |
750 |                     hook_id: gate_id.to_string(),
    |                     ^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `details`
   --> src/hooks/quality_gates.rs:752:21
    |
752 |                     details: format!("Quality gate removed: {}", gate_id),
    |                     ^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `result`
   --> src/hooks/quality_gates.rs:753:21
    |
753 |                     result: "success".to_string(),
    |                     ^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `duration`
   --> src/hooks/quality_gates.rs:754:21
    |
754 |                     duration: None,
    |                     ^^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

warning: unused variable: `approval_workflow`
   --> src/hooks/quality_gates.rs:821:37
    |
821 |                         if let Some(approval_workflow) = &self.approval_workflow {
    |                                     ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_approval_workflow`

error[E0382]: borrow of moved value: `gate_result.violations`
   --> src/hooks/quality_gates.rs:827:33
    |
810 |                 violations.extend(gate_result.violations);
    |                                   ---------------------- value moved here
...
827 |                                 &gate_result.violations,
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^ value borrowed here after move
    |
    = note: move occurs because `gate_result.violations` has type `Vec<QualityViolation>`, which does not implement the `Copy` trait
    = note: borrow occurs due to deref coercion to `[QualityViolation]`

error[E0502]: cannot borrow `stored_violations` as immutable because it is also borrowed as mutable
   --> src/hooks/quality_gates.rs:874:44
    |
874 |                 stored_violations.drain(0..stored_violations.len() - 1000);
    |                 ----------------- -----    ^^^^^^^^^^^^^^^^^ immutable borrow occurs here
    |                 |                 |
    |                 |                 mutable borrow later used by call
    |                 mutable borrow occurs here

warning: unused variable: `stage`
    --> src/hooks/quality_gates.rs:1011:9
     |
1011 |         stage: Stage,
     |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_stage`

error[E0502]: cannot borrow `metrics` as immutable because it is also borrowed as mutable
    --> src/hooks/quality_gates.rs:1422:56
     |
1422 |             metrics.quality_trend.data_points.drain(0..metrics.quality_trend.data_points.len() - 100);
     |             -------                           -----    ^^^^^^^ immutable borrow occurs here
     |             |                                 |
     |             |                                 mutable borrow later used by call
     |             mutable borrow occurs here

error[E0277]: can't compare `QualityFailureType` with `QualityFailureType`
    --> src/hooks/quality_gates.rs:1514:65
     |
1514 |                 .filter(|strategy| strategy.applicable_failures.contains(&violation.violation_type))
     |                                                                 ^^^^^^^^ no implementation for `QualityFailureType == QualityFailureType`
     |
     = help: the trait `PartialEq` is not implemented for `QualityFailureType`
note: required by a bound in `core::slice::<impl [T]>::contains`
    --> /rustc/6b00bc3880198600130e1cf62b8f8a93494488cc/library/core/src/slice/mod.rs:2614:5
help: consider annotating `QualityFailureType` with `#[derive(PartialEq)]`
     |
465  + #[derive(PartialEq)]
466  | pub enum QualityFailureType {
     |

error[E0605]: non-primitive cast: `QualityFailureType` as `u8`
    --> src/hooks/quality_gates.rs:1572:13
     |
1572 |             violation.violation_type as u8, // Simple display
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can be used to convert enum types to numeric types only if the enum type is unit-only or field-less
     |
     = note: see https://doc.rust-lang.org/reference/items/enumerations.html#casting for more information

error[E0277]: the trait bound `QualityViolationSeverity: Hash` is not satisfied
    --> src/hooks/quality_gates.rs:1611:22
     |
1611 |                 *acc.entry(v.severity.clone()).or_insert(0) += 1;
     |                      ^^^^^ the trait `Hash` is not implemented for `QualityViolationSeverity`
     |
note: required by a bound in `HashMap::<K, V, S>::entry`
    --> /rustc/6b00bc3880198600130e1cf62b8f8a93494488cc/library/std/src/collections/hash/map.rs:883:5
help: consider annotating `QualityViolationSeverity` with `#[derive(Hash)]`
     |
489  + #[derive(Hash)]
490  | pub enum QualityViolationSeverity {
     |

error[E0624]: method `log_event` is private
   --> src/hooks/cost_control.rs:709:26
    |
709 |             audit_logger.log_event(AuditEvent {
    |                          ^^^^^^^^^ private method
    |
   ::: src/hooks/audit.rs:140:5
    |
140 |     async fn log_event(&self, event: AuditEvent) -> Result<()> {
    |     ---------------------------------------------------------- private method defined here

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `event_type`
   --> src/hooks/cost_control.rs:710:17
    |
710 |                 event_type: AuditEventType::BudgetCreated,
    |                 ^^^^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0599]: no variant or associated item named `BudgetCreated` found for enum `hooks::audit::AuditEventType` in the current scope
   --> src/hooks/cost_control.rs:710:45
    |
710 |                 event_type: AuditEventType::BudgetCreated,
    |                                             ^^^^^^^^^^^^^ variant or associated item not found in `AuditEventType`
    |
   ::: src/hooks/audit.rs:16:1
    |
16  | pub enum AuditEventType {
    | ----------------------- variant or associated item `BudgetCreated` not found for this enum

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `hook_id`
   --> src/hooks/cost_control.rs:712:17
    |
712 |                 hook_id: budget_id.clone(),
    |                 ^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `details`
   --> src/hooks/cost_control.rs:714:17
    |
714 |                 details: format!("Budget created: {} (${:.2})", budget.name, budget.amount),
    |                 ^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `result`
   --> src/hooks/cost_control.rs:715:17
    |
715 |                 result: "success".to_string(),
    |                 ^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0560]: struct `hooks::audit::AuditEvent` has no field named `duration`
   --> src/hooks/cost_control.rs:716:17
    |
716 |                 duration: None,
    |                 ^^^^^^^^ `hooks::audit::AuditEvent` does not have this field
    |
    = note: available fields are: `id`, `event`, `session_id`, `context`

error[E0502]: cannot borrow `tracking` as immutable because it is also borrowed as mutable
   --> src/hooks/cost_control.rs:920:43
    |
920 |             tracking.cost_trends.drain(0..tracking.cost_trends.len() - 1000);
    |             --------             -----    ^^^^^^^^ immutable borrow occurs here
    |             |                    |
    |             |                    mutable borrow later used by call
    |             mutable borrow occurs here

error[E0502]: cannot borrow `tracking` as immutable because it is also borrowed as mutable
   --> src/hooks/cost_control.rs:924:75
    |
924 |         self.update_efficiency_metrics(&mut tracking.efficiency_metrics, &tracking.cost_trends).await?;
    |              -------------------------      --------                      ^^^^^^^^ immutable borrow occurs here
    |              |                              |
    |              |                              mutable borrow occurs here
    |              mutable borrow later used by call

error[E0502]: cannot borrow `alerts` as immutable because it is also borrowed as mutable
    --> src/hooks/cost_control.rs:1155:33
     |
1155 |                 alerts.drain(0..alerts.len() - 1000);
     |                 ------ -----    ^^^^^^ immutable borrow occurs here
     |                 |      |
     |                 |      mutable borrow later used by call
     |                 mutable borrow occurs here

error[E0609]: no field `final_response` on type `ConsensusResult`
   --> src/planning/mod.rs:214:28
    |
214 |         let title = result.final_response;
    |                            ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `success`, `result`, `error`, `stages`, `conversation_id` ... and 2 others

warning: unused variable: `mode`
   --> src/planning/mod.rs:241:47
    |
241 |     async fn execute_task(&self, task: &Task, mode: &ModeType) -> HiveResult<TaskExecutionResult> {
    |                                               ^^^^ help: if this is intentional, prefix it with an underscore: `_mode`

error[E0609]: no field `final_response` on type `ConsensusResult`
  --> src/planning/decomposer.rs:91:67
   |
91 |         let analysis: TaskAnalysis = serde_json::from_str(&result.final_response)
   |                                                                   ^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `success`, `result`, `error`, `stages`, `conversation_id` ... and 2 others

error[E0609]: no field `final_response` on type `ConsensusResult`
   --> src/planning/decomposer.rs:150:68
    |
150 |         let raw_tasks: Vec<RawTask> = serde_json::from_str(&result.final_response)
    |                                                                    ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `success`, `result`, `error`, `stages`, `conversation_id` ... and 2 others

warning: unused variable: `mode`
   --> src/planning/mode_switcher.rs:318:38
    |
318 |     async fn preserve_context(&self, mode: &ModeType, context: &PlanningContext) -> HiveResult<PreservedContext> {
    |                                      ^^^^ help: if this is intentional, prefix it with an underscore: `_mode`

warning: unused variable: `context`
   --> src/planning/mode_switcher.rs:318:55
    |
318 |     async fn preserve_context(&self, mode: &ModeType, context: &PlanningContext) -> HiveResult<PreservedContext> {
    |                                                       ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: unused variable: `mode`
   --> src/planning/mode_switcher.rs:329:41
    |
329 |     async fn prepare_target_mode(&self, mode: &ModeType, preserved: &PreservedContext, context: &PlanningContext) -> HiveResult<()> {
    |                                         ^^^^ help: if this is intentional, prefix it with an underscore: `_mode`

warning: unused variable: `preserved`
   --> src/planning/mode_switcher.rs:329:58
    |
329 |     async fn prepare_target_mode(&self, mode: &ModeType, preserved: &PreservedContext, context: &PlanningContext) -> HiveResult<()> {
    |                                                          ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_preserved`

warning: unused variable: `context`
   --> src/planning/mode_switcher.rs:329:88
    |
329 |     async fn prepare_target_mode(&self, mode: &ModeType, preserved: &PreservedContext, context: &PlanningContext) -> HiveResult<()> {
    |                                                                                        ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: unused variable: `preserved`
   --> src/planning/mode_switcher.rs:335:72
    |
335 |     async fn perform_transition(&self, from: &ModeType, to: &ModeType, preserved: &PreservedContext) -> HiveResult<bool> {
    |                                                                        ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_preserved`

warning: unused variable: `mode`
   --> src/planning/mode_switcher.rs:349:41
    |
349 |     async fn validate_transition(&self, mode: &ModeType, preserved: &PreservedContext) -> HiveResult<()> {
    |                                         ^^^^ help: if this is intentional, prefix it with an underscore: `_mode`

warning: unused variable: `preserved`
   --> src/planning/mode_switcher.rs:349:58
    |
349 |     async fn validate_transition(&self, mode: &ModeType, preserved: &PreservedContext) -> HiveResult<()> {
    |                                                          ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_preserved`

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> src/planning/integration.rs:164:30
    |
164 |             analysis_engine: AnalysisEngine::new()?,
    |                              ^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `AnalysisEngine`
    |
    = help: the trait `Try` is not implemented for `AnalysisEngine`

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
   --> src/planning/integration.rs:199:34
    |
199 |         let mut relevant_files = Vec::new();
    |                                  ^^^ doesn't have a size known at compile-time
    |
    = help: within `Path`, the trait `Sized` is not implemented for `[u8]`
note: required because it appears within the type `Path`
   --> /rustc/6b00bc3880198600130e1cf62b8f8a93494488cc/library/std/src/path.rs:2143:12
note: required by an implicit `Sized` bound in `Vec`
   --> /rustc/6b00bc3880198600130e1cf62b8f8a93494488cc/library/alloc/src/vec/mod.rs:409:1

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
   --> src/planning/integration.rs:210:21
    |
210 |         for file in &relevant_files {
    |                     ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: within `Path`, the trait `Sized` is not implemented for `[u8]`
note: required because it appears within the type `Path`
   --> /rustc/6b00bc3880198600130e1cf62b8f8a93494488cc/library/std/src/path.rs:2143:12
    = note: required for `std::slice::Iter<'_, Path>` to implement `Iterator`

error[E0308]: mismatched types
   --> src/planning/integration.rs:219:60
    |
219 |         potential_impacts = self.assess_task_impacts(task, &relevant_files, repository_context)?;
    |                                  -------------------       ^^^^^^^^^^^^^^^ expected `&[PathBuf]`, found `&Vec<Path>`
    |                                  |
    |                                  arguments to this method are incorrect
    |
    = note: expected reference `&[std::path::PathBuf]`
               found reference `&Vec<Path>`
note: method defined here
   --> src/planning/integration.rs:446:8
    |
446 |     fn assess_task_impacts(&self, task: &Task, files: &[PathBuf], context: &RepositoryContext) -> HiveResult<Vec<Impact>> {
    |        ^^^^^^^^^^^^^^^^^^^                     -----------------

error[E0308]: mismatched types
   --> src/planning/integration.rs:222:13
    |
210 |         for file in &relevant_files {
    |                      -------------- here the type of `relevant_files` is inferred to be `Vec<Path>`
...
222 |             relevant_files,
    |             ^^^^^^^^^^^^^^ expected `Vec<PathBuf>`, found `Vec<Path>`
    |
    = note: expected struct `Vec<std::path::PathBuf>`
               found struct `Vec<Path>`

error[E0308]: mismatched types
   --> src/planning/integration.rs:225:60
    |
225 |             existing_patterns: self.find_existing_patterns(&relevant_files)?,
    |                                     ---------------------- ^^^^^^^^^^^^^^^ expected `&[PathBuf]`, found `&Vec<Path>`
    |                                     |
    |                                     arguments to this method are incorrect
    |
    = note: expected reference `&[std::path::PathBuf]`
               found reference `&Vec<Path>`
note: method defined here
   --> src/planning/integration.rs:472:8
    |
472 |     fn find_existing_patterns(&self, files: &[PathBuf]) -> HiveResult<Vec<Pattern>> {
    |        ^^^^^^^^^^^^^^^^^^^^^^        -----------------

error[E0282]: type annotations needed for `Vec<_>`
   --> src/planning/integration.rs:271:13
    |
271 |         let files = vec![];
    |             ^^^^^
...
276 |             let file_path = Path::new(&file.path);
    |                                        ---- type must be known at this point
    |
help: consider giving `files` an explicit type, where the placeholders `_` are specified
    |
271 |         let files: Vec<_> = vec![];
    |                  ++++++++

error[E0282]: type annotations needed for `Vec<_>`
   --> src/planning/integration.rs:332:13
    |
332 |         let files = vec![];
    |             ^^^^^
...
341 |             total_lines += file.metrics.lines;
    |                            ------------ type must be known at this point
    |
help: consider giving `files` an explicit type, where the placeholders `_` are specified
    |
332 |         let files: Vec<_> = vec![];
    |                  ++++++++

warning: unused variable: `path`
   --> src/planning/integration.rs:367:42
    |
367 |     async fn analyze_dependencies(&self, path: &Path) -> HiveResult<DependencyInfo> {
    |                                          ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
   --> src/planning/integration.rs:377:36
    |
377 |     async fn assess_quality(&self, path: &Path) -> HiveResult<QualityIndicators> {
    |                                    ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `r`
   --> src/memory/retrieval.rs:349:31
    |
349 |                 .and_modify(|(r, w)| *w += 0.3) // Add keyword weight
    |                               ^ help: if this is intentional, prefix it with an underscore: `_r`

warning: unused variable: `limit`
   --> src/memory/retrieval.rs:370:9
    |
370 |         limit: usize,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_limit`

warning: unused variable: `query_embedding`
   --> src/memory/retrieval.rs:409:9
    |
409 |         query_embedding: &[f32],
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_query_embedding`

error[E0382]: use of moved value: `metrics`
   --> src/memory/analytics.rs:291:54
    |
286 |     pub async fn update_quality_metrics(&mut self, metrics: QualityMetrics) -> Result<()> {
    |                                                    ------- move occurs because `metrics` has type `memory::analytics::QualityMetrics`, which does not implement the `Copy` trait
287 |         self.data.quality_metrics = metrics;
    |                                     ------- value moved here
...
291 |         self.time_series.daily_quality.insert(today, metrics.overall_quality);
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^ value used here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
287 |         self.data.quality_metrics = metrics.clone();
    |                                            ++++++++

error[E0382]: use of moved value: `metrics`
   --> src/memory/analytics.rs:302:58
    |
297 |     pub async fn update_performance_metrics(&mut self, metrics: PerformanceMetrics) -> Result<()> {
    |                                                        ------- move occurs because `metrics` has type `memory::analytics::PerformanceMetrics`, which does not implement the `Copy` trait
298 |         self.data.performance_metrics = metrics;
    |                                         ------- value moved here
...
302 |         self.time_series.daily_performance.insert(today, metrics);
    |                                                          ^^^^^^^ value used here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
298 |         self.data.performance_metrics = metrics.clone();
    |                                                ++++++++

error[E0616]: field `stats` of struct `knowledge_graph::KnowledgeGraph` is private
   --> src/memory/analytics.rs:766:27
    |
766 |         let stats = graph.stats.clone();
    |                           ^^^^^ private field

warning: unused variable: `db`
   --> src/analytics/trend_analysis.rs:406:13
    |
406 |         let db = get_database().await?;
    |             ^^ help: if this is intentional, prefix it with an underscore: `_db`

warning: unused variable: `period_start`
   --> src/analytics/executive.rs:409:13
    |
409 |         let period_start = now - period.to_duration();
    |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_period_start`

warning: unused variable: `data_source`
   --> src/analytics/dashboard.rs:383:43
    |
383 |     async fn fetch_line_chart_data(&self, data_source: &str) -> Result<WidgetData> {
    |                                           ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_data_source`

warning: unused variable: `data_source`
   --> src/analytics/dashboard.rs:414:42
    |
414 |     async fn fetch_bar_chart_data(&self, data_source: &str) -> Result<WidgetData> {
    |                                          ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_data_source`

warning: unused variable: `data_source`
   --> src/analytics/dashboard.rs:448:38
    |
448 |     async fn fetch_gauge_data(&self, data_source: &str) -> Result<WidgetData> {
    |                                      ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_data_source`

warning: unused variable: `stats`
   --> src/analytics/dashboard.rs:451:13
    |
451 |         let stats = db.get_statistics().await?;
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_stats`

warning: unused variable: `data_source`
   --> src/analytics/dashboard.rs:498:38
    |
498 |     async fn fetch_table_data(&self, data_source: &str) -> Result<WidgetData> {
    |                                      ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_data_source`

warning: unused variable: `data_source`
   --> src/analytics/dashboard.rs:538:39
    |
538 |     async fn fetch_alerts_data(&self, data_source: &str) -> Result<WidgetData> {
    |                                       ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_data_source`

warning: unused variable: `config`
   --> src/analytics/dashboard.rs:784:37
    |
784 |     async fn start_streaming(&self, config: Arc<RwLock<AdvancedAnalyticsConfig>>) -> Result<()> {
    |                                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `streams`
   --> src/analytics/dashboard.rs:785:13
    |
785 |         let streams = Arc::clone(&self.streams);
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_streams`

warning: unused variable: `period`
   --> src/analytics/templates.rs:845:74
    |
845 |     async fn generate_section_content(&self, template: &TemplateSection, period: &ReportPeriod) -> Result<SectionContent> {
    |                                                                          ^^^^^^ help: if this is intentional, prefix it with an underscore: `_period`

warning: unused variable: `max_length`
   --> src/analytics/templates.rs:847:43
    |
847 |             SectionContentType::Summary { max_length } => {
    |                                           ^^^^^^^^^^ help: try ignoring the field: `max_length: _`

warning: unused variable: `shutdown_receiver`
   --> src/analytics/alerts.rs:207:31
    |
207 |         let (shutdown_sender, shutdown_receiver) = mpsc::channel(1);
    |                               ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_shutdown_receiver`

error[E0502]: cannot borrow `store` as immutable because it is also borrowed as mutable
   --> src/analytics/alerts.rs:303:28
    |
292 |         let series = store.metrics.entry(name.to_string()).or_insert_with(|| {
    |                      ----- mutable borrow occurs here
...
303 |         let cutoff = now - store.max_age;
    |                            ^^^^^ immutable borrow occurs here
304 |         series.values.retain(|(timestamp, _)| *timestamp > cutoff);
    |         ------------- mutable borrow later used here

error[E0599]: `alerts::AlertSeverity` doesn't implement `std::fmt::Display`
   --> src/analytics/alerts.rs:522:27
    |
20  | pub enum AlertSeverity {
    | ---------------------- method `to_string` not found for this enum because it doesn't satisfy `alerts::AlertSeverity: ToString` or `alerts::AlertSeverity: std::fmt::Display`
...
522 |             rule.severity.to_string().to_uppercase(),
    |                           ^^^^^^^^^ `alerts::AlertSeverity` cannot be formatted with the default formatter
    |
    = note: the following trait bounds were not satisfied:
            `alerts::AlertSeverity: std::fmt::Display`
            which is required by `alerts::AlertSeverity: ToString`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
note: the trait `std::fmt::Display` must be implemented
   --> /rustc/6b00bc3880198600130e1cf62b8f8a93494488cc/library/core/src/fmt/mod.rs:984:1
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `to_string`, perhaps you need to implement it:
            candidate #1: `ToString`

error[E0599]: `alerts::AlertSeverity` doesn't implement `std::fmt::Display`
   --> src/analytics/alerts.rs:560:65
    |
20  | pub enum AlertSeverity {
    | ---------------------- method `to_string` not found for this enum because it doesn't satisfy `alerts::AlertSeverity: ToString` or `alerts::AlertSeverity: std::fmt::Display`
...
560 |                     _ => format!("[{}] {} - {}", alert.severity.to_string().to_uppercase(), alert.title, alert.message),
    |                                                                 ^^^^^^^^^ `alerts::AlertSeverity` cannot be formatted with the default formatter
    |
    = note: the following trait bounds were not satisfied:
            `alerts::AlertSeverity: std::fmt::Display`
            which is required by `alerts::AlertSeverity: ToString`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
note: the trait `std::fmt::Display` must be implemented
   --> /rustc/6b00bc3880198600130e1cf62b8f8a93494488cc/library/core/src/fmt/mod.rs:984:1
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `to_string`, perhaps you need to implement it:
            candidate #1: `ToString`

error[E0599]: `alerts::AlertSeverity` doesn't implement `std::fmt::Display`
   --> src/analytics/alerts.rs:585:36
    |
20  | pub enum AlertSeverity {
    | ---------------------- method `to_string` not found for this enum because it doesn't satisfy `alerts::AlertSeverity: ToString` or `alerts::AlertSeverity: std::fmt::Display`
...
585 |                     alert.severity.to_string().to_uppercase(),
    |                                    ^^^^^^^^^ `alerts::AlertSeverity` cannot be formatted with the default formatter
    |
    = note: the following trait bounds were not satisfied:
            `alerts::AlertSeverity: std::fmt::Display`
            which is required by `alerts::AlertSeverity: ToString`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
note: the trait `std::fmt::Display` must be implemented
   --> /rustc/6b00bc3880198600130e1cf62b8f8a93494488cc/library/core/src/fmt/mod.rs:984:1
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `to_string`, perhaps you need to implement it:
            candidate #1: `ToString`

error[E0599]: the method `entry` exists for struct `HashMap<AlertSeverity, usize>`, but its trait bounds were not satisfied
   --> src/analytics/alerts.rs:726:39
    |
20  | pub enum AlertSeverity {
    | ---------------------- doesn't satisfy `alerts::AlertSeverity: Hash`
...
726 |             *stats.alerts_by_severity.entry(alert.severity).or_insert(0) += 1;
    |                                       ^^^^^ method cannot be called on `HashMap<AlertSeverity, usize>` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `alerts::AlertSeverity: Hash`
help: consider annotating `alerts::AlertSeverity` with `#[derive(Hash)]`
    |
20  + #[derive(Hash)]
21  | pub enum AlertSeverity {
    |

error[E0599]: the method `entry` exists for struct `HashMap<AlertType, usize>`, but its trait bounds were not satisfied
   --> src/analytics/alerts.rs:727:35
    |
29  | pub enum AlertType {
    | ------------------ doesn't satisfy `alerts::AlertType: Hash`
...
727 |             *stats.alerts_by_type.entry(alert.alert_type).or_insert(0) += 1;
    |                                   ^^^^^ method cannot be called on `HashMap<AlertType, usize>` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `alerts::AlertType: Hash`
help: consider annotating `alerts::AlertType` with `#[derive(Hash)]`
    |
29  + #[derive(Hash)]
30  | pub enum AlertType {
    |

warning: unused variable: `template_id`
   --> src/analytics/builder.rs:813:34
    |
813 |     async fn get_template(&self, template_id: &str) -> Result<Dashboard> {
    |                                  ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_template_id`

warning: unused variable: `category`
   --> src/analytics/builder.rs:818:36
    |
818 |     async fn list_templates(&self, category: Option<&str>) -> Result<Vec<MarketplaceTemplate>> {
    |                                    ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_category`

warning: unused variable: `token`
   --> src/analytics/api.rs:600:21
    |
600 |                 let token = auth.trim_start_matches("Bearer ");
    |                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_token`

warning: unused variable: `auth`
   --> src/analytics/api.rs:620:5
    |
620 |     auth: AuthContext,
    |     ^^^^ help: if this is intentional, prefix it with an underscore: `_auth`

warning: unused variable: `auth`
   --> src/analytics/api.rs:642:5
    |
642 |     auth: AuthContext,
    |     ^^^^ help: if this is intentional, prefix it with an underscore: `_auth`

warning: unused variable: `query`
   --> src/analytics/api.rs:643:5
    |
643 |     query: TrendsQuery,
    |     ^^^^^ help: if this is intentional, prefix it with an underscore: `_query`

warning: unused variable: `engine`
   --> src/analytics/api.rs:644:5
    |
644 |     engine: Arc<crate::analytics::AdvancedAnalyticsEngine>,
    |     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_engine`

warning: unused variable: `auth`
   --> src/analytics/api.rs:661:5
    |
661 |     auth: AuthContext,
    |     ^^^^ help: if this is intentional, prefix it with an underscore: `_auth`

warning: unused variable: `query`
   --> src/analytics/api.rs:662:5
    |
662 |     query: ForecastQuery,
    |     ^^^^^ help: if this is intentional, prefix it with an underscore: `_query`

warning: unused variable: `engine`
   --> src/analytics/api.rs:663:5
    |
663 |     engine: Arc<crate::analytics::AdvancedAnalyticsEngine>,
    |     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_engine`

warning: unused variable: `auth`
   --> src/analytics/api.rs:680:5
    |
680 |     auth: AuthContext,
    |     ^^^^ help: if this is intentional, prefix it with an underscore: `_auth`

warning: unused variable: `request`
   --> src/analytics/api.rs:681:5
    |
681 |     request: QueryRequest,
    |     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_request`

warning: unused variable: `engine`
   --> src/analytics/api.rs:682:5
    |
682 |     engine: Arc<crate::analytics::AdvancedAnalyticsEngine>,
    |     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_engine`

warning: unused variable: `auth`
   --> src/analytics/api.rs:698:26
    |
698 | async fn list_dashboards(auth: AuthContext) -> Result<impl Reply, Rejection> {
    |                          ^^^^ help: if this is intentional, prefix it with an underscore: `_auth`

warning: unused variable: `auth`
   --> src/analytics/api.rs:713:36
    |
713 | async fn get_dashboard(id: String, auth: AuthContext) -> Result<impl Reply, Rejection> {
    |                                    ^^^^ help: if this is intentional, prefix it with an underscore: `_auth`

warning: unused variable: `auth`
   --> src/analytics/api.rs:729:5
    |
729 |     auth: AuthContext,
    |     ^^^^ help: if this is intentional, prefix it with an underscore: `_auth`

warning: unused variable: `request`
   --> src/analytics/api.rs:730:5
    |
730 |     request: DashboardRequest,
    |     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_request`

warning: unused variable: `auth`
   --> src/analytics/api.rs:748:5
    |
748 |     auth: AuthContext,
    |     ^^^^ help: if this is intentional, prefix it with an underscore: `_auth`

warning: unused variable: `request`
   --> src/analytics/api.rs:749:5
    |
749 |     request: DashboardRequest,
    |     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_request`

warning: unused variable: `auth`
   --> src/analytics/api.rs:765:39
    |
765 | async fn delete_dashboard(id: String, auth: AuthContext) -> Result<impl Reply, Rejection> {
    |                                       ^^^^ help: if this is intentional, prefix it with an underscore: `_auth`

warning: unused variable: `auth`
   --> src/analytics/api.rs:780:22
    |
780 | async fn list_alerts(auth: AuthContext, query: AlertsQuery) -> Result<impl Reply, Rejection> {
    |                      ^^^^ help: if this is intentional, prefix it with an underscore: `_auth`

warning: unused variable: `query`
   --> src/analytics/api.rs:780:41
    |
780 | async fn list_alerts(auth: AuthContext, query: AlertsQuery) -> Result<impl Reply, Rejection> {
    |                                         ^^^^^ help: if this is intentional, prefix it with an underscore: `_query`

warning: unused variable: `auth`
   --> src/analytics/api.rs:795:32
    |
795 | async fn get_alert(id: String, auth: AuthContext) -> Result<impl Reply, Rejection> {
    |                                ^^^^ help: if this is intentional, prefix it with an underscore: `_auth`

warning: unused variable: `auth`
   --> src/analytics/api.rs:810:40
    |
810 | async fn acknowledge_alert(id: String, auth: AuthContext) -> Result<impl Reply, Rejection> {
    |                                        ^^^^ help: if this is intentional, prefix it with an underscore: `_auth`

warning: unused variable: `auth`
   --> src/analytics/api.rs:825:36
    |
825 | async fn resolve_alert(id: String, auth: AuthContext) -> Result<impl Reply, Rejection> {
    |                                    ^^^^ help: if this is intentional, prefix it with an underscore: `_auth`

warning: unused variable: `auth`
   --> src/analytics/api.rs:840:27
    |
840 | async fn list_alert_rules(auth: AuthContext) -> Result<impl Reply, Rejection> {
    |                           ^^^^ help: if this is intentional, prefix it with an underscore: `_auth`

warning: unused variable: `auth`
   --> src/analytics/api.rs:856:5
    |
856 |     auth: AuthContext,
    |     ^^^^ help: if this is intentional, prefix it with an underscore: `_auth`

warning: unused variable: `request`
   --> src/analytics/api.rs:857:5
    |
857 |     request: serde_json::Value,
    |     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_request`

warning: unused variable: `ws`
   --> src/analytics/api.rs:873:32
    |
873 | async fn handle_metrics_stream(ws: warp::ws::WebSocket, auth: AuthContext) {
    |                                ^^ help: if this is intentional, prefix it with an underscore: `_ws`

warning: unused variable: `auth`
   --> src/analytics/api.rs:873:57
    |
873 | async fn handle_metrics_stream(ws: warp::ws::WebSocket, auth: AuthContext) {
    |                                                         ^^^^ help: if this is intentional, prefix it with an underscore: `_auth`

warning: unused variable: `ws`
   --> src/analytics/api.rs:877:31
    |
877 | async fn handle_alerts_stream(ws: warp::ws::WebSocket, auth: AuthContext) {
    |                               ^^ help: if this is intentional, prefix it with an underscore: `_ws`

warning: unused variable: `auth`
   --> src/analytics/api.rs:877:56
    |
877 | async fn handle_alerts_stream(ws: warp::ws::WebSocket, auth: AuthContext) {
    |                                                        ^^^^ help: if this is intentional, prefix it with an underscore: `_auth`

error[E0271]: type mismatch resolving `<Recover<CorsFilter<...>, ...> as FilterBase>::Error == Rejection`
   --> src/analytics/api.rs:183:98
    |
183 |       async fn build_routes(&self) -> impl Filter<Extract = impl Reply, Error = Rejection> + Clone {
    |  __________________________________________________________________________________________________^
184 | |         let cors = if self.config.read().await.enable_cors {
185 | |             warp::cors()
186 | |                 .allow_any_origin()
...   |
218 | |             .recover(handle_rejection)
219 | |     }
    | |_____^ expected `Rejection`, found `Infallible`
    |
    = note: the full name for the type has been written to '/Users/veronelazio/Developer/Private/hive/target/debug/deps/hive_ai-9acdfffbe0c6023f.long-type-12471630327850364266.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0271]: type mismatch resolving `<Recover<CorsFilter<...>, ...> as FilterBase>::Error == Rejection`
   --> src/analytics/api.rs:183:37
    |
183 |     async fn build_routes(&self) -> impl Filter<Extract = impl Reply, Error = Rejection> + Clone {
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Rejection`, found `Infallible`
    |
    = note: the full name for the type has been written to '/Users/veronelazio/Developer/Private/hive/target/debug/deps/hive_ai-9acdfffbe0c6023f.long-type-12471630327850364266.txt'
    = note: consider using `--verbose` to print the full type name to the console

warning: unused variable: `file_size`
   --> src/analytics/export.rs:318:25
    |
318 |         let (row_count, file_size) = match config.format {
    |                         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_file_size`

error[E0716]: temporary value dropped while borrowed
   --> src/analytics/export.rs:579:56
    |
579 |                 let header = headers.get(i).unwrap_or(&format!("field{}", i));
    |                                                        ^^^^^^^^^^^^^^^^^^^^^ - temporary value is freed at the end of this statement
    |                                                        |
    |                                                        creates a temporary value which is freed while still in use
580 |                 let formatted = Self::format_value(value, &config.formatting);
581 |                 file.write_all(format!("    <{}>{}</{}>\n", header, formatted, header).as_bytes()).await?;
    |                                                             ------ borrow later used here
    |
    = note: consider using a `let` binding to create a longer lived value
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `encryption`
   --> src/analytics/export.rs:639:45
    |
639 |     async fn encrypt_file(file_path: &Path, encryption: &EncryptionConfig) -> Result<PathBuf> {
    |                                             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_encryption`

warning: unused variable: `file_path`
   --> src/analytics/export.rs:653:29
    |
653 |     async fn deliver_export(file_path: &Path, delivery: &DeliveryConfig) -> Result<()> {
    |                             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_file_path`

warning: unused variable: `subject`
   --> src/analytics/export.rs:659:49
    |
659 |             DeliveryMethod::Email { recipients, subject, body } => {
    |                                                 ^^^^^^^ help: try ignoring the field: `subject: _`

warning: unused variable: `body`
   --> src/analytics/export.rs:659:58
    |
659 |             DeliveryMethod::Email { recipients, subject, body } => {
    |                                                          ^^^^ help: try ignoring the field: `body: _`

warning: unused variable: `key_prefix`
   --> src/analytics/export.rs:664:42
    |
664 |             DeliveryMethod::S3 { bucket, key_prefix, region } => {
    |                                          ^^^^^^^^^^ help: try ignoring the field: `key_prefix: _`

warning: unused variable: `region`
   --> src/analytics/export.rs:664:54
    |
664 |             DeliveryMethod::S3 { bucket, key_prefix, region } => {
    |                                                      ^^^^^^ help: try ignoring the field: `region: _`

warning: unused variable: `username`
   --> src/analytics/export.rs:669:48
    |
669 |             DeliveryMethod::SFTP { host, port, username, path } => {
    |                                                ^^^^^^^^ help: try ignoring the field: `username: _`

warning: unused variable: `path`
   --> src/analytics/export.rs:669:58
    |
669 |             DeliveryMethod::SFTP { host, port, username, path } => {
    |                                                          ^^^^ help: try ignoring the field: `path: _`

warning: unused variable: `headers`
   --> src/analytics/export.rs:674:44
    |
674 |             DeliveryMethod::Webhook { url, headers } => {
    |                                            ^^^^^^^ help: try ignoring the field: `headers: _`

error[E0382]: use of moved value: `job_id`
   --> src/analytics/export.rs:283:12
    |
259 |         let job_id = job.id.clone();
    |             ------ move occurs because `job_id` has type `std::string::String`, which does not implement the `Copy` trait
...
271 |         tokio::spawn(async move {
    |                      ---------- value moved here
272 |             if let Err(e) = Self::execute_export(job_id.clone(), config, data_source, jobs.clone(), export_path).await {
    |                                                  ------ variable moved due to use in coroutine
...
283 |         Ok(job_id)
    |            ^^^^^^ value used here after move

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/mod.rs:102:35
    |
102 |             return Err(HiveError::Migration(
    |                                   ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/mod.rs:121:35
    |
121 |             return Err(HiveError::Migration(
    |                                   ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/analyzer.rs:194:31
    |
194 |         return Err(HiveError::Migration(
    |                               ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/analyzer.rs:274:31
    |
274 |         return Err(HiveError::Migration("package.json not found".to_string()));
    |                               ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/analyzer.rs:283:24
    |
283 |         Err(HiveError::Migration("Version not found in package.json".to_string()))
    |                        ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/analyzer.rs:383:20
    |
383 |     Err(HiveError::Migration("No database found".to_string()))
    |                    ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: variable does not need to be mutable
   --> src/migration/analyzer.rs:423:9
    |
423 |     let mut profiles = Vec::new();
    |         ----^^^^^^^^
    |         |
    |         help: remove this `mut`

error[E0689]: can't call method `max` on ambiguous numeric type `{float}`
   --> src/migration/analyzer.rs:447:35
    |
447 |     config_compat = config_compat.max(0.0);
    |                                   ^^^
    |
help: you must specify a type for this binding, like `f32`
    |
437 |     let mut config_compat: f32 = 1.0;
    |                          +++++

error[E0609]: no field `openrouter_api_key` on type `HiveConfig`
   --> src/migration/config.rs:349:21
    |
349 |         rust_config.openrouter_api_key = Some(api_key.clone());
    |                     ^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `consensus`, `performance`, `interface`, `security`, `logging` ... and 2 others

error[E0609]: no field `license_key` on type `HiveConfig`
   --> src/migration/config.rs:353:21
    |
353 |         rust_config.license_key = Some(license_key.clone());
    |                     ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `consensus`, `performance`, `interface`, `security`, `logging` ... and 2 others

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/config.rs:378:33
    |
378 |         .map_err(|e| HiveError::Migration(format!("Failed to serialize config: {}", e)))?;
    |                                 ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0107]: method takes 1 generic argument but 2 generic arguments were supplied
   --> src/migration/database.rs:307:27
    |
307 |             nullable: row.get::<i32, _>("notnull") == 0,
    |                           ^^^      --- help: remove the unnecessary generic argument
    |                           |
    |                           expected 1 generic argument
    |
note: method defined here, with 1 generic parameter: `T`
   --> src/migration/database.rs:59:8
    |
59  |     fn get<T>(&self, _column: &str) -> T where T: Default {
    |        ^^^ -

warning: unused variable: `schema`
   --> src/migration/database.rs:454:54
    |
454 | async fn plan_data_migration(db_info: &DatabaseInfo, schema: &TypeScriptSchema) -> Result<DataMigrationPlan, HiveError> {
    |                                                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_schema`

warning: unused variable: `target_db`
   --> src/migration/database.rs:540:35
    |
540 | async fn initialize_target_schema(target_db: &Database) -> Result<(), HiveError> {
    |                                   ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_target_db`

warning: unused variable: `target`
   --> src/migration/database.rs:548:53
    |
548 | async fn migrate_conversations(source: &SqlitePool, target: &Database) -> Result<(), HiveError> {
    |                                                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_target`

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/rollback.rs:387:35
    |
387 |             return Err(HiveError::Migration("Rollback plan not found".to_string()));
    |                                   ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/rollback.rs:417:39
    |
417 |                 return Err(HiveError::Migration(format!("Invalid rollback phase: {:?}", phase)));
    |                                       ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `result`
   --> src/migration/rollback.rs:496:56
    |
496 |     async fn restore_files(&self, plan: &RollbackPlan, result: &mut RollbackResult) -> Result<(), HiveError> {
    |                                                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_result`

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/rollback.rs:541:47
    |
541 |                         return Err(HiveError::Migration("Database file not found after rollback".to_string()));
    |                                               ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: variable does not need to be mutable
   --> src/migration/rollback.rs:571:9
    |
571 |     let mut manager = RollbackManager::new(config.clone());
    |         ----^^^^^^^
    |         |
    |         help: remove this `mut`

error[E0369]: binary operation `==` cannot be applied to type `MigrationType`
   --> src/migration/guide.rs:252:37
    |
252 |     } else if config.migration_type == MigrationType::Staged {
    |               --------------------- ^^ --------------------- MigrationType
    |               |
    |               MigrationType
    |
note: an implementation of `PartialEq` might be missing for `MigrationType`
   --> src/migration/mod.rs:66:1
    |
66  | pub enum MigrationType {
    | ^^^^^^^^^^^^^^^^^^^^^^ must implement `PartialEq`
help: consider annotating `MigrationType` with `#[derive(PartialEq)]`
   --> src/migration/mod.rs:66:1
    |
66  + #[derive(PartialEq)]
67  | pub enum MigrationType {
    |

warning: unused variable: `analysis`
   --> src/migration/guide.rs:297:5
    |
297 |     analysis: &TypeScriptAnalysis,
    |     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_analysis`

error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions
   --> src/migration/database_impl.rs:673:93
    |
673 |     fn calculate_migration_progress(&self, phases: &[(& str, fn(&mut Self, &BatchConfig) -> _)], current_phase: &str) -> f64 {
    |                                                                                             ^
    |                                                                                             |
    |                                                                                             not allowed in type signatures
    |                                                                                             help: use type parameters instead: `T`

error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions
   --> src/migration/database_impl.rs:673:93
    |
673 |     fn calculate_migration_progress(&self, phases: &[(& str, fn(&mut Self, &BatchConfig) -> _)], current_phase: &str) -> f64 {
    |                                                                                             ^ not allowed in type signatures
    |
help: use type parameters instead
    |
673 -     fn calculate_migration_progress(&self, phases: &[(& str, fn(&mut Self, &BatchConfig) -> _)], current_phase: &str) -> f64 {
673 +     fn calculate_migration_progress<T>(&self, phases: &[(& str, fn(&mut Self, &BatchConfig) -> T)], current_phase: &str) -> f64 {
    |

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/database_impl.rs:129:45
    |
129 |                     .map_err(|e| HiveError::Migration(format!("Failed to open source database: {}", e)))
    |                                             ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/database_impl.rs:143:45
    |
143 |                     .map_err(|e| HiveError::Migration(format!("Failed to open target database: {}", e)))
    |                                             ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/database_impl.rs:175:45
    |
175 |                     .map_err(|e| HiveError::Migration(format!("Failed to initialize target schema: {}", e)))
    |                                             ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> src/migration/database_impl.rs:193:31
    |
193 |             ("stage_outputs", Self::migrate_stage_outputs_batch),
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected fn item, found a different fn item
    |
    = note: expected fn item `fn(&mut ..., ...) -> ... {...::migrate_conversations_batch}`
               found fn item `fn(&mut ..., ...) -> ... {...::migrate_stage_outputs_batch}`
    = note: the full name for the type has been written to '/Users/veronelazio/Developer/Private/hive/target/debug/deps/hive_ai-9acdfffbe0c6023f.long-type-13448823230640536356.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0308]: mismatched types
   --> src/migration/database_impl.rs:194:32
    |
194 |             ("knowledge_base", Self::migrate_knowledge_base_batch),
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected fn item, found a different fn item
    |
    = note: expected fn item `fn(&mut ..., ...) -> ... {...::migrate_conversations_batch}`
               found fn item `fn(&mut ..., ...) -> ... {...::migrate_knowledge_base_batch}`
    = note: the full name for the type has been written to '/Users/veronelazio/Developer/Private/hive/target/debug/deps/hive_ai-9acdfffbe0c6023f.long-type-13448823230640536356.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0308]: mismatched types
   --> src/migration/database_impl.rs:195:37
    |
195 |             ("conversation_topics", Self::migrate_topics_batch),
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected fn item, found a different fn item
    |
    = note: expected fn item `fn(&mut ..., ...) -> ... {...::migrate_conversations_batch}`
               found fn item `fn(&mut ProductionDatabase, &...) -> ... {...::migrate_topics_batch}`
    = note: the full name for the type has been written to '/Users/veronelazio/Developer/Private/hive/target/debug/deps/hive_ai-9acdfffbe0c6023f.long-type-13448823230640536356.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0308]: mismatched types
   --> src/migration/database_impl.rs:196:39
    |
196 |             ("conversation_keywords", Self::migrate_keywords_batch),
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected fn item, found a different fn item
    |
    = note: expected fn item `fn(&mut ..., ...) -> ... {...::migrate_conversations_batch}`
               found fn item `fn(&mut ProductionDatabase, &...) -> ... {...::migrate_keywords_batch}`
    = note: the full name for the type has been written to '/Users/veronelazio/Developer/Private/hive/target/debug/deps/hive_ai-9acdfffbe0c6023f.long-type-13448823230640536356.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0308]: mismatched types
   --> src/migration/database_impl.rs:197:38
    |
197 |             ("conversation_context", Self::migrate_context_batch),
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected fn item, found a different fn item
    |
    = note: expected fn item `fn(&mut ..., ...) -> ... {...::migrate_conversations_batch}`
               found fn item `fn(&mut ProductionDatabase, &...) -> ... {...::migrate_context_batch}`
    = note: the full name for the type has been written to '/Users/veronelazio/Developer/Private/hive/target/debug/deps/hive_ai-9acdfffbe0c6023f.long-type-13448823230640536356.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0308]: mismatched types
   --> src/migration/database_impl.rs:198:34
    |
198 |             ("stage_confidence", Self::migrate_confidence_batch),
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected fn item, found a different fn item
    |
    = note: expected fn item `fn(&mut ..., ...) -> ... {...::migrate_conversations_batch}`
               found fn item `fn(&mut ..., ...) -> ... {...::migrate_confidence_batch}`
    = note: the full name for the type has been written to '/Users/veronelazio/Developer/Private/hive/target/debug/deps/hive_ai-9acdfffbe0c6023f.long-type-13448823230640536356.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0308]: mismatched types
   --> src/migration/database_impl.rs:199:35
    |
199 |             ("consensus_metrics", Self::migrate_metrics_batch),
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected fn item, found a different fn item
    |
    = note: expected fn item `fn(&mut ..., ...) -> ... {...::migrate_conversations_batch}`
               found fn item `fn(&mut ProductionDatabase, &...) -> ... {...::migrate_metrics_batch}`
    = note: the full name for the type has been written to '/Users/veronelazio/Developer/Private/hive/target/debug/deps/hive_ai-9acdfffbe0c6023f.long-type-13448823230640536356.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0308]: mismatched types
   --> src/migration/database_impl.rs:200:32
    |
200 |             ("curator_truths", Self::migrate_curator_truths_batch),
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected fn item, found a different fn item
    |
    = note: expected fn item `fn(&mut ..., ...) -> ... {...::migrate_conversations_batch}`
               found fn item `fn(&mut ..., ...) -> ... {...::migrate_curator_truths_batch}`
    = note: the full name for the type has been written to '/Users/veronelazio/Developer/Private/hive/target/debug/deps/hive_ai-9acdfffbe0c6023f.long-type-13448823230640536356.txt'
    = note: consider using `--verbose` to print the full type name to the console

warning: unused variable: `start_time`
   --> src/migration/database_impl.rs:242:13
    |
242 |         let start_time = std::time::Instant::now();
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_time`

error[E0277]: `?` couldn't convert the error to `HiveError`
   --> src/migration/database_impl.rs:308:17
    |
284 | /         task::spawn_blocking(move || {
285 | |             let conn = source_conn.lock().unwrap();
286 | |             let mut stmt = conn.prepare(
287 | |                 "SELECT id, question, final_answer, source_of_truth, conversation_context, 
...   |
307 | |             Ok(conversations)
308 | |         }).await?
    | |                -^ the trait `From<JoinError>` is not implemented for `HiveError`
    | |________________|
    |                  this can't be annotated with `?` because it has type `Result<_, JoinError>`
    |
note: `HiveError` needs to implement `From<JoinError>`
   --> src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `HiveError` implements `From<anyhow::Error>`
              `HiveError` implements `From<serde_json::Error>`
              `HiveError` implements `From<std::io::Error>`
              `HiveError` implements `From<toml::de::Error>`

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/database_impl.rs:309:54
    |
309 |             .map_err(|e: rusqlite::Error| HiveError::Migration(format!("Failed to read conversations: {}", e)))
    |                                                      ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `HiveError`
   --> src/migration/database_impl.rs:345:17
    |
317 | /         task::spawn_blocking(move || {
318 | |             let mut conn = target_conn.lock().unwrap();
319 | |             let tx = conn.transaction()?;
...   |
344 | |             Ok(())
345 | |         }).await?
    | |                -^ the trait `From<JoinError>` is not implemented for `HiveError`
    | |________________|
    |                  this can't be annotated with `?` because it has type `Result<_, JoinError>`
    |
note: `HiveError` needs to implement `From<JoinError>`
   --> src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `HiveError` implements `From<anyhow::Error>`
              `HiveError` implements `From<serde_json::Error>`
              `HiveError` implements `From<std::io::Error>`
              `HiveError` implements `From<toml::de::Error>`

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/database_impl.rs:346:54
    |
346 |             .map_err(|e: rusqlite::Error| HiveError::Migration(format!("Failed to write conversations: {}", e)))
    |                                                      ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `HiveError`
   --> src/migration/database_impl.rs:408:17
    |
378 | /         task::spawn_blocking(move || {
379 | |             let conn = source_conn.lock().unwrap();
380 | |             let mut stmt = conn.prepare(
381 | |                 "SELECT id, conversation_id, stage_name, stage_number, provider, model, 
...   |
407 | |             Ok(stage_outputs)
408 | |         }).await?
    | |                -^ the trait `From<JoinError>` is not implemented for `HiveError`
    | |________________|
    |                  this can't be annotated with `?` because it has type `Result<_, JoinError>`
    |
note: `HiveError` needs to implement `From<JoinError>`
   --> src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `HiveError` implements `From<anyhow::Error>`
              `HiveError` implements `From<serde_json::Error>`
              `HiveError` implements `From<std::io::Error>`
              `HiveError` implements `From<toml::de::Error>`

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/database_impl.rs:409:54
    |
409 |             .map_err(|e: rusqlite::Error| HiveError::Migration(format!("Failed to read stage outputs: {}", e)))
    |                                                      ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `HiveError`
   --> src/migration/database_impl.rs:451:17
    |
417 | /         task::spawn_blocking(move || {
418 | |             let mut conn = target_conn.lock().unwrap();
419 | |             let tx = conn.transaction()?;
...   |
450 | |             Ok(())
451 | |         }).await?
    | |                -^ the trait `From<JoinError>` is not implemented for `HiveError`
    | |________________|
    |                  this can't be annotated with `?` because it has type `Result<_, JoinError>`
    |
note: `HiveError` needs to implement `From<JoinError>`
   --> src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `HiveError` implements `From<anyhow::Error>`
              `HiveError` implements `From<serde_json::Error>`
              `HiveError` implements `From<std::io::Error>`
              `HiveError` implements `From<toml::de::Error>`

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/database_impl.rs:452:54
    |
452 |             .map_err(|e: rusqlite::Error| HiveError::Migration(format!("Failed to write stage outputs: {}", e)))
    |                                                      ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `HiveError`
   --> src/migration/database_impl.rs:509:17
    |
484 | /         task::spawn_blocking(move || {
485 | |             let conn = source_conn.lock().unwrap();
486 | |             let mut stmt = conn.prepare(
487 | |                 "SELECT id, conversation_id, curator_content, topics, keywords, 
...   |
508 | |             Ok(knowledge_entries)
509 | |         }).await?
    | |                -^ the trait `From<JoinError>` is not implemented for `HiveError`
    | |________________|
    |                  this can't be annotated with `?` because it has type `Result<_, JoinError>`
    |
note: `HiveError` needs to implement `From<JoinError>`
   --> src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `HiveError` implements `From<anyhow::Error>`
              `HiveError` implements `From<serde_json::Error>`
              `HiveError` implements `From<std::io::Error>`
              `HiveError` implements `From<toml::de::Error>`

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/database_impl.rs:510:54
    |
510 |             .map_err(|e: rusqlite::Error| HiveError::Migration(format!("Failed to read knowledge base: {}", e)))
    |                                                      ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `HiveError`
   --> src/migration/database_impl.rs:547:17
    |
518 | /         task::spawn_blocking(move || {
519 | |             let mut conn = target_conn.lock().unwrap();
520 | |             let tx = conn.transaction()?;
...   |
546 | |             Ok(())
547 | |         }).await?
    | |                -^ the trait `From<JoinError>` is not implemented for `HiveError`
    | |________________|
    |                  this can't be annotated with `?` because it has type `Result<_, JoinError>`
    |
note: `HiveError` needs to implement `From<JoinError>`
   --> src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `HiveError` implements `From<anyhow::Error>`
              `HiveError` implements `From<serde_json::Error>`
              `HiveError` implements `From<std::io::Error>`
              `HiveError` implements `From<toml::de::Error>`

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/database_impl.rs:548:54
    |
548 |             .map_err(|e: rusqlite::Error| HiveError::Migration(format!("Failed to write knowledge base: {}", e)))
    |                                                      ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `HiveError`
   --> src/migration/database_impl.rs:564:17
    |
556 | /         task::spawn_blocking(move || {
557 | |             let conn = source_conn.lock().unwrap();
558 | |             let count: i64 = conn.query_row(
559 | |                 &format!("SELECT COUNT(*) FROM {}", table_name),
...   |
563 | |             Ok(count as u64)
564 | |         }).await?
    | |                -^ the trait `From<JoinError>` is not implemented for `HiveError`
    | |________________|
    |                  this can't be annotated with `?` because it has type `Result<_, JoinError>`
    |
note: `HiveError` needs to implement `From<JoinError>`
   --> src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `HiveError` implements `From<anyhow::Error>`
              `HiveError` implements `From<serde_json::Error>`
              `HiveError` implements `From<std::io::Error>`
              `HiveError` implements `From<toml::de::Error>`

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/database_impl.rs:565:54
    |
565 |             .map_err(|e: rusqlite::Error| HiveError::Migration(format!("Failed to get table count: {}", e)))
    |                                                      ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/database_impl.rs:580:39
    |
580 |                 return Err(HiveError::Migration(format!(
    |                                       ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `HiveError`
   --> src/migration/database_impl.rs:609:17
    |
601 | /         task::spawn_blocking(move || {
602 | |             let conn = target_conn.lock().unwrap();
603 | |             let count: i64 = conn.query_row(
604 | |                 &format!("SELECT COUNT(*) FROM {}", table_name),
...   |
608 | |             Ok(count as u64)
609 | |         }).await?
    | |                -^ the trait `From<JoinError>` is not implemented for `HiveError`
    | |________________|
    |                  this can't be annotated with `?` because it has type `Result<_, JoinError>`
    |
note: `HiveError` needs to implement `From<JoinError>`
   --> src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `HiveError` implements `From<anyhow::Error>`
              `HiveError` implements `From<serde_json::Error>`
              `HiveError` implements `From<std::io::Error>`
              `HiveError` implements `From<toml::de::Error>`

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/database_impl.rs:610:54
    |
610 |             .map_err(|e: rusqlite::Error| HiveError::Migration(format!("Failed to get target table count: {}", e)))
    |                                                      ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `InvalidData` found for enum `rusqlite::Error` in the current scope
   --> src/migration/database_impl.rs:650:49
    |
650 |                     return Err(rusqlite::Error::InvalidData("Data integrity validation failed".into()));
    |                                                 ^^^^^^^^^^^ variant or associated item not found in `Error`
    |
help: there is a variant with a similar name
    |
650 -                     return Err(rusqlite::Error::InvalidData("Data integrity validation failed".into()));
650 +                     return Err(rusqlite::Error::InvalidPath("Data integrity validation failed".into()));
    |

error[E0277]: `?` couldn't convert the error to `HiveError`
   --> src/migration/database_impl.rs:655:17
    |
621 | /         task::spawn_blocking(move || {
622 | |             let source = source_conn.lock().unwrap();
623 | |             let target = target_conn.lock().unwrap();
...   |
654 | |             Ok(())
655 | |         }).await?
    | |                -^ the trait `From<JoinError>` is not implemented for `HiveError`
    | |________________|
    |                  this can't be annotated with `?` because it has type `Result<_, JoinError>`
    |
note: `HiveError` needs to implement `From<JoinError>`
   --> src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `HiveError` implements `From<anyhow::Error>`
              `HiveError` implements `From<serde_json::Error>`
              `HiveError` implements `From<std::io::Error>`
              `HiveError` implements `From<toml::de::Error>`

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/database_impl.rs:656:54
    |
656 |             .map_err(|e: rusqlite::Error| HiveError::Migration(format!("Data sampling validation failed: {}", e)))
    |                                                      ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0282]: type annotations needed
   --> src/migration/live_test.rs:169:13
    |
169 |             Ok(())
    |             ^^ cannot infer type of the type parameter `E` declared on the enum `Result`
    |
help: consider specifying the generic arguments
    |
169 |             Ok::<(), E>(())
    |               +++++++++

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/live_test.rs:206:35
    |
206 |             return Err(HiveError::Migration(
    |                                   ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/live_test.rs:215:35
    |
215 |             return Err(HiveError::Migration(
    |                                   ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/live_test.rs:234:35
    |
234 |             return Err(HiveError::Migration(
    |                                   ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `target_db`
   --> src/migration/live_test.rs:291:13
    |
291 |         let target_db = self.create_temp_target_database().await?;
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_target_db`

error[E0277]: `?` couldn't convert the error to `HiveError`
   --> src/migration/live_test.rs:353:25
    |
353 |             handle.await??;
    |             ------------^ the trait `From<JoinError>` is not implemented for `HiveError`
    |             |
    |             this can't be annotated with `?` because it has type `Result<_, JoinError>`
    |
note: `HiveError` needs to implement `From<JoinError>`
   --> src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `HiveError` implements `From<anyhow::Error>`
              `HiveError` implements `From<serde_json::Error>`
              `HiveError` implements `From<std::io::Error>`
              `HiveError` implements `From<toml::de::Error>`

error[E0369]: binary operation `==` cannot be applied to type `TestStatus`
   --> src/migration/live_test.rs:614:22
    |
614 |     Ok(result.status == TestStatus::Completed)
    |        ------------- ^^ --------------------- TestStatus
    |        |
    |        TestStatus
    |
note: an implementation of `PartialEq` might be missing for `TestStatus`
   --> src/migration/live_test.rs:69:1
    |
69  | pub enum TestStatus {
    | ^^^^^^^^^^^^^^^^^^^ must implement `PartialEq`
help: consider annotating `TestStatus` with `#[derive(PartialEq)]`
    |
69  + #[derive(PartialEq)]
70  | pub enum TestStatus {
    |

error[E0594]: cannot assign to data in an `Arc`
   --> src/migration/performance.rs:258:9
    |
258 |         monitor.start_time = Some(std::time::SystemTime::now());
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign
    |
    = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Arc<migration::performance::PerformanceMonitor>`

error[E0277]: `?` couldn't convert the error to `HiveError`
   --> src/migration/performance.rs:430:29
    |
430 |                 handle.await??;
    |                 ------------^ the trait `From<JoinError>` is not implemented for `HiveError`
    |                 |
    |                 this can't be annotated with `?` because it has type `Result<_, JoinError>`
    |
note: `HiveError` needs to implement `From<JoinError>`
   --> src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `HiveError` implements `From<anyhow::Error>`
              `HiveError` implements `From<serde_json::Error>`
              `HiveError` implements `From<std::io::Error>`
              `HiveError` implements `From<toml::de::Error>`

warning: unused variable: `typescript_db_path`
   --> src/migration/performance.rs:680:5
    |
680 |     typescript_db_path: &std::path::Path,
    |     ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_typescript_db_path`

warning: unused variable: `rust_db_path`
   --> src/migration/performance.rs:681:5
    |
681 |     rust_db_path: &std::path::Path,
    |     ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_rust_db_path`

error[E0308]: mismatched types
   --> src/migration/ui.rs:437:37
    |
437 |             ("Checking disk space", self.check_disk_space()),
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^ expected future, found a different future
    |
    = help: consider `await`ing on both `Future`s
    = note: distinct uses of `impl Trait` result in different opaque types

error[E0308]: mismatched types
   --> src/migration/ui.rs:438:40
    |
438 |             ("Verifying dependencies", self.check_dependencies()),
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^ expected future, found a different future
    |
    = help: consider `await`ing on both `Future`s
    = note: distinct uses of `impl Trait` result in different opaque types

error[E0308]: mismatched types
   --> src/migration/ui.rs:439:43
    |
439 |             ("Testing write permissions", self.check_permissions()),
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^ expected future, found a different future
    |
    = help: consider `await`ing on both `Future`s
    = note: distinct uses of `impl Trait` result in different opaque types

error[E0308]: mismatched types
   --> src/migration/ui.rs:440:43
    |
440 |             ("Estimating migration time", self.estimate_migration_time()),
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected future, found a different future
    |
    = help: consider `await`ing on both `Future`s
    = note: distinct uses of `impl Trait` result in different opaque types

error[E0277]: `?` couldn't convert the error to `HiveError`
   --> src/migration/ui.rs:468:24
    |
468 |             .interact()?;
    |              ----------^ the trait `From<dialoguer::Error>` is not implemented for `HiveError`
    |              |
    |              this can't be annotated with `?` because it has type `Result<_, dialoguer::Error>`
    |
note: `HiveError` needs to implement `From<dialoguer::Error>`
   --> src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `HiveError` implements `From<anyhow::Error>`
              `HiveError` implements `From<serde_json::Error>`
              `HiveError` implements `From<std::io::Error>`
              `HiveError` implements `From<toml::de::Error>`

error[E0277]: `?` couldn't convert the error to `HiveError`
   --> src/migration/ui.rs:496:52
    |
496 |         let migration_result = migration_task.await?;
    |                                --------------------^ the trait `From<JoinError>` is not implemented for `HiveError`
    |                                |
    |                                this can't be annotated with `?` because it has type `Result<_, JoinError>`
    |
note: `HiveError` needs to implement `From<JoinError>`
   --> src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `HiveError` implements `From<anyhow::Error>`
              `HiveError` implements `From<serde_json::Error>`
              `HiveError` implements `From<std::io::Error>`
              `HiveError` implements `From<toml::de::Error>`

error[E0277]: `?` couldn't convert the error to `HiveError`
   --> src/migration/ui.rs:510:32
    |
510 |                     .interact()?;
    |                      ----------^ the trait `From<dialoguer::Error>` is not implemented for `HiveError`
    |                      |
    |                      this can't be annotated with `?` because it has type `Result<_, dialoguer::Error>`
    |
note: `HiveError` needs to implement `From<dialoguer::Error>`
   --> src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `HiveError` implements `From<anyhow::Error>`
              `HiveError` implements `From<serde_json::Error>`
              `HiveError` implements `From<std::io::Error>`
              `HiveError` implements `From<toml::de::Error>`

error[E0308]: mismatched types
   --> src/migration/ui.rs:532:41
    |
532 |             ("Checking data integrity", self.validate_data_integrity()),
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected future, found a different future
    |
    = help: consider `await`ing on both `Future`s
    = note: distinct uses of `impl Trait` result in different opaque types

error[E0308]: mismatched types
   --> src/migration/ui.rs:533:43
    |
533 |             ("Testing query performance", self.validate_performance()),
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected future, found a different future
    |
    = help: consider `await`ing on both `Future`s
    = note: distinct uses of `impl Trait` result in different opaque types

error[E0308]: mismatched types
   --> src/migration/ui.rs:534:49
    |
534 |             ("Validating schema compatibility", self.validate_schema()),
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^ expected future, found a different future
    |
    = help: consider `await`ing on both `Future`s
    = note: distinct uses of `impl Trait` result in different opaque types

error[E0308]: mismatched types
   --> src/migration/ui.rs:535:42
    |
535 |             ("Running functional tests", self.validate_functionality()),
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected future, found a different future
    |
    = help: consider `await`ing on both `Future`s
    = note: distinct uses of `impl Trait` result in different opaque types

error[E0609]: no field `name` on type `EnterpriseUser`
   --> src/security/mod.rs:215:46
    |
215 |             format!("User created: {}", user.name),
    |                                              ^^^^ unknown field
    |
    = note: available fields are: `id`, `username`, `email`, `full_name`, `roles` ... and 16 others

error[E0308]: mismatched types
   --> src/security/mod.rs:295:26
    |
295 |             total_users: rbac_stats.total_users,
    |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `usize`

error[E0308]: mismatched types
   --> src/security/mod.rs:296:26
    |
296 |             total_teams: team_stats.total_teams,
    |                          ^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `usize`

warning: unused variable: `user_id`
   --> src/security/auth.rs:464:40
    |
464 |     pub async fn reset_password(&self, user_id: &str, new_password: &str) -> Result<()> {
    |                                        ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `config`
   --> src/security/auth.rs:534:39
    |
534 |     pub async fn update_config(&self, config: SecurityConfig) -> Result<()> {
    |                                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

error[E0599]: no method named `clone` found for struct `tokio::sync::RwLock` in the current scope
   --> src/security/audit.rs:258:40
    |
258 |         let buffer = self.event_buffer.clone();
    |                                        ^^^^^ method not found in `RwLock<Vec<AuditEvent>>`

warning: unused variable: `days`
   --> src/security/audit.rs:530:49
    |
530 |     pub async fn update_retention_policy(&self, days: u32) -> Result<()> {
    |                                                 ^^^^ help: if this is intentional, prefix it with an underscore: `_days`

error[E0369]: binary operation `==` cannot be applied to type `compliance::ViolationStatus`
   --> src/security/compliance.rs:721:57
    |
721 |             open: violations.iter().filter(|v| v.status == ViolationStatus::Open).count() as u32,
    |                                                -------- ^^ --------------------- compliance::ViolationStatus
    |                                                |
    |                                                compliance::ViolationStatus
    |
note: an implementation of `PartialEq` might be missing for `compliance::ViolationStatus`
   --> src/security/compliance.rs:122:1
    |
122 | pub enum ViolationStatus {
    | ^^^^^^^^^^^^^^^^^^^^^^^^ must implement `PartialEq`
help: consider annotating `compliance::ViolationStatus` with `#[derive(PartialEq)]`
    |
122 + #[derive(PartialEq)]
123 | pub enum ViolationStatus {
    |

error[E0369]: binary operation `==` cannot be applied to type `security::rbac::ApprovalStatus`
   --> src/security/rbac.rs:852:43
    |
852 |             .filter(|a| a.approval_status == ApprovalStatus::Pending)
    |                         ----------------- ^^ ----------------------- security::rbac::ApprovalStatus
    |                         |
    |                         security::rbac::ApprovalStatus
    |
note: an implementation of `PartialEq` might be missing for `security::rbac::ApprovalStatus`
   --> src/security/rbac.rs:177:1
    |
177 | pub enum ApprovalStatus {
    | ^^^^^^^^^^^^^^^^^^^^^^^ must implement `PartialEq`
help: consider annotating `security::rbac::ApprovalStatus` with `#[derive(PartialEq)]`
    |
177 + #[derive(PartialEq)]
178 | pub enum ApprovalStatus {
    |

error[E0369]: binary operation `!=` cannot be applied to type `InvitationStatus`
   --> src/security/teams.rs:500:30
    |
500 |         if invitation.status != InvitationStatus::Pending {
    |            ----------------- ^^ ------------------------- InvitationStatus
    |            |
    |            InvitationStatus
    |
note: an implementation of `PartialEq` might be missing for `InvitationStatus`
   --> src/security/teams.rs:197:1
    |
197 | pub enum InvitationStatus {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^ must implement `PartialEq`
help: consider annotating `InvitationStatus` with `#[derive(PartialEq)]`
    |
197 + #[derive(PartialEq)]
198 | pub enum InvitationStatus {
    |

error[E0369]: binary operation `==` cannot be applied to type `InvitationStatus`
   --> src/security/teams.rs:636:38
    |
636 |             .filter(|inv| inv.status == InvitationStatus::Pending && inv.expires_at > Utc::now())
    |                           ---------- ^^ ------------------------- InvitationStatus
    |                           |
    |                           InvitationStatus
    |
note: an implementation of `PartialEq` might be missing for `InvitationStatus`
   --> src/security/teams.rs:197:1
    |
197 | pub enum InvitationStatus {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^ must implement `PartialEq`
help: consider annotating `InvitationStatus` with `#[derive(PartialEq)]`
    |
197 + #[derive(PartialEq)]
198 | pub enum InvitationStatus {
    |

error[E0369]: binary operation `==` cannot be applied to type `InvitationStatus`
   --> src/security/teams.rs:744:69
    |
744 |                 if invitation.expires_at < now && invitation.status == InvitationStatus::Pending {
    |                                                   ----------------- ^^ ------------------------- InvitationStatus
    |                                                   |
    |                                                   InvitationStatus
    |
note: an implementation of `PartialEq` might be missing for `InvitationStatus`
   --> src/security/teams.rs:197:1
    |
197 | pub enum InvitationStatus {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^ must implement `PartialEq`
help: consider annotating `InvitationStatus` with `#[derive(PartialEq)]`
    |
197 + #[derive(PartialEq)]
198 | pub enum InvitationStatus {
    |

warning: unused variable: `config`
  --> src/startup/fast_boot.rs:73:13
   |
73 |         let config = self.load_config_cached().await?;
   |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

error[E0599]: no function or associated item named `load` found for struct `HiveConfig` in the current scope
   --> src/startup/fast_boot.rs:132:59
    |
132 |             let config = crate::core::config::HiveConfig::load().await?;
    |                                                           ^^^^ function or associated item not found in `HiveConfig`
    |
   ::: src/core/config.rs:21:1
    |
21  | pub struct HiveConfig {
    | --------------------- function or associated item `load` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `load`, perhaps you need to implement one of them:
            candidate #1: `icu_provider::data_provider::DataProvider`
            candidate #2: `signal_hook::iterator::exfiltrator::sealed::Exfiltrator`

error[E0277]: `?` couldn't convert the error to `rusqlite::Error`
  --> src/database/optimize.rs:77:57
   |
77 |                 Self::apply_optimizations(conn, &config)?;
   |                 ----------------------------------------^ the trait `From<anyhow::Error>` is not implemented for `rusqlite::Error`
   |                 |
   |                 this can't be annotated with `?` because it has type `Result<_, anyhow::Error>`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `From<T>`:
             `rusqlite::Error` implements `From<FromSqlError>`
             `rusqlite::Error` implements `From<csv::error::Error>`
             `rusqlite::Error` implements `From<std::ffi::NulError>`
             `rusqlite::Error` implements `From<std::str::Utf8Error>`

error[E0308]: mismatched types
   --> src/database/optimize.rs:193:47
    |
193 |             self.execute_statement(&mut conn, cached_statement, params).await?
    |                  -----------------            ^^^^^^^^^^^^^^^^ expected `&str`, found `&StatementInfo`
    |                  |
    |                  arguments to this method are incorrect
    |
    = note: expected reference `&str`
               found reference `&StatementInfo`
note: method defined here
   --> src/database/optimize.rs:233:14
    |
233 |     async fn execute_statement<T>(
    |              ^^^^^^^^^^^^^^^^^
...
236 |         query: &str,
    |         -----------

warning: unused variable: `row`
   --> src/database/optimize.rs:248:48
    |
248 |             let rows = stmt.query_map(params, |row| {
    |                                                ^^^ help: if this is intentional, prefix it with an underscore: `_row`

error[E0277]: the trait bound `&&[&dyn ToSql]: Params` is not satisfied
   --> src/database/optimize.rs:279:26
    |
279 |             stmt.execute(params)?;
    |                  ------- ^^^^^^ the trait `Params` is not implemented for `&&[&dyn ToSql]`
    |                  |
    |                  required by a bound introduced by this call
    |
note: required by a bound in `Statement::<'_>::execute`
   --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rusqlite-0.29.0/src/statement.rs:112:23
    |
112 |     pub fn execute<P: Params>(&mut self, params: P) -> Result<usize> {
    |                       ^^^^^^ required by this bound in `Statement::<'_>::execute`
help: consider dereferencing here
    |
279 |             stmt.execute(*params)?;
    |                          +

warning: unused variable: `row`
   --> src/database/optimize.rs:305:44
    |
305 |         let rows = stmt.query_map(params, |row| {
    |                                            ^^^ help: if this is intentional, prefix it with an underscore: `_row`

warning: variable does not need to be mutable
   --> src/database/optimize.rs:327:13
    |
327 |         let mut conn = self.pool.get()?;
    |             ----^^^^
    |             |
    |             help: remove this `mut`

error[E0308]: mismatched types
   --> src/database/optimize.rs:401:38
    |
401 |         metrics.active_connections = self.pool.state().connections;
    |         --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `u32`
    |         |
    |         expected due to the type of this binding

error[E0599]: `Local` doesn't implement `std::fmt::Display`
   --> src/core/temporal.rs:62:38
    |
62  |             timezone: now.timezone().to_string(),
    |                                      ^^^^^^^^^ `Local` cannot be formatted with the default formatter
    |
   ::: /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chrono-0.4.41/src/offset/local/mod.rs:122:1
    |
122 | pub struct Local;
    | ---------------- doesn't satisfy `Local: ToString` or `Local: std::fmt::Display`
    |
    = note: the following trait bounds were not satisfied:
            `Local: std::fmt::Display`
            which is required by `Local: ToString`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead

error[E0599]: no method named `hour` found for struct `NaiveTime` in the current scope
   --> src/core/temporal.rs:102:45
    |
102 |         let hour = self.current_time.time().hour();
    |                                             ^^^^
    |
   ::: /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chrono-0.4.41/src/traits.rs:285:8
    |
285 |     fn hour(&self) -> u32;
    |        ---- the method is available for `NaiveTime` here
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `Timelike` which provides `hour` is implemented but not in scope; perhaps you want to import it
    |
5   + use chrono::Timelike;
    |
help: there is a method `hour12` with a similar name
    |
102 |         let hour = self.current_time.time().hour12();
    |                                                 ++

error[E0599]: no method named `weekday` found for struct `DateTime` in the current scope
   --> src/core/temporal.rs:112:41
    |
112 |         let weekday = self.current_time.weekday().num_days_from_sunday();
    |                                         ^^^^^^^ method not found in `DateTime<Local>`
    |
   ::: /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chrono-0.4.41/src/traits.rs:82:8
    |
82  |     fn weekday(&self) -> Weekday;
    |        ------- the method is available for `DateTime<Local>` here
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `Datelike` which provides `weekday` is implemented but not in scope; perhaps you want to import it
    |
5   + use chrono::Datelike;
    |

error[E0599]: no method named `hour` found for struct `NaiveTime` in the current scope
   --> src/core/temporal.rs:203:53
    |
203 |         let current_hour = self.current_time.time().hour();
    |                                                     ^^^^
    |
   ::: /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chrono-0.4.41/src/traits.rs:285:8
    |
285 |     fn hour(&self) -> u32;
    |        ---- the method is available for `NaiveTime` here
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `Timelike` which provides `hour` is implemented but not in scope; perhaps you want to import it
    |
5   + use chrono::Timelike;
    |
help: there is a method `hour12` with a similar name
    |
203 |         let current_hour = self.current_time.time().hour12();
    |                                                         ++

error[E0599]: no method named `with_minute` found for struct `NaiveTime` in the current scope
   --> src/core/temporal.rs:215:49
    |
215 |             .with_time(self.current_time.time().with_minute(0).unwrap().with_second(0).unwrap().with_nanosecond(0).unwrap())
    |                                                 ^^^^^^^^^^^
    |
   ::: /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chrono-0.4.41/src/traits.rs:318:8
    |
318 |     fn with_minute(&self, min: u32) -> Option<Self>;
    |        ----------- the method is available for `NaiveTime` here
    |
    = help: items from traits can only be used if the trait is in scope
help: there is a method `minute` with a similar name, but with different arguments
   --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chrono-0.4.41/src/traits.rs:300:5
    |
300 |     fn minute(&self) -> u32;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^
help: trait `Timelike` which provides `with_minute` is implemented but not in scope; perhaps you want to import it
    |
5   + use chrono::Timelike;
    |

error[E0277]: `(dyn for<'a> Fn(&'a CostMetrics) -> bool + std::marker::Send + std::marker::Sync + 'static)` doesn't implement `std::fmt::Debug`
   --> src/core/analytics.rs:139:5
    |
136 | #[derive(Debug)]
    |          ----- in this derive macro expansion
...
139 |     condition: Box<dyn Fn(&CostMetrics) -> bool + Send + Sync>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn for<'a> Fn(&'a CostMetrics) -> bool + std::marker::Send + std::marker::Sync + 'static)` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`
    |
    = help: the trait `std::fmt::Debug` is not implemented for `(dyn for<'a> Fn(&'a CostMetrics) -> bool + std::marker::Send + std::marker::Sync + 'static)`

error[E0308]: mismatched types
   --> src/core/migrator.rs:312:26
    |
312 |               preferences: raw_config.get("preferences")
    |  __________________________^
313 | |                 .and_then(|v| v.as_object())
314 | |                 .map(|obj| obj.clone())
315 | |                 .unwrap_or_default(),
    | |____________________________________^ expected `HashMap<String, Value>`, found `Map<String, Value>`
    |
    = note: expected struct `HashMap<std::string::String, serde_json::Value>`
               found struct `serde_json::Map<std::string::String, serde_json::Value>`

error[E0599]: no method named `as_str` found for enum `core::Language` in the current scope
   --> src/consensus/stages/generator.rs:199:42
    |
199 |                         snippet.language.as_str(),
    |                                          ^^^^^^ method not found in `Language`
    |
   ::: src/core/mod.rs:113:1
    |
113 | pub enum Language {
    | ----------------- method `as_str` not found for this enum
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `as_str`, perhaps you need to implement one of them:
            candidate #1: `DiffableStr`
            candidate #2: `http::header::map::as_header_name::Sealed`
            candidate #3: `reqwest::header::map::as_header_name::Sealed`
            candidate #4: `reqwest::into_url::IntoUrlSealed`
            candidate #5: `rustix::path::arg::Arg`

error[E0599]: no method named `as_str` found for enum `ast::SymbolKind` in the current scope
   --> src/consensus/stages/generator.rs:208:86
    |
208 |                     prompt.push_str(&format!("- {} ({})\n", symbol.name, symbol.kind.as_str()));
    |                                                                                      ^^^^^^ method not found in `SymbolKind`
    |
   ::: src/core/ast.rs:100:1
    |
100 | pub enum SymbolKind {
    | ------------------- method `as_str` not found for this enum
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `as_str`, perhaps you need to implement one of them:
            candidate #1: `DiffableStr`
            candidate #2: `http::header::map::as_header_name::Sealed`
            candidate #3: `reqwest::header::map::as_header_name::Sealed`
            candidate #4: `reqwest::into_url::IntoUrlSealed`
            candidate #5: `rustix::path::arg::Arg`

error[E0609]: no field `file` on type `&FileSummary`
   --> src/consensus/stages/generator.rs:216:68
    |
216 |                     prompt.push_str(&format!("- {}: {}\n", summary.file.display(), summary.summary));
    |                                                                    ^^^^ unknown field
    |
    = note: available fields are: `path`, `description`, `exports`, `dependencies`

error[E0609]: no field `summary` on type `&FileSummary`
   --> src/consensus/stages/generator.rs:216:92
    |
216 |                     prompt.push_str(&format!("- {}: {}\n", summary.file.display(), summary.summary));
    |                                                                                            ^^^^^^^ unknown field
    |
    = note: available fields are: `path`, `description`, `exports`, `dependencies`

error[E0599]: no method named `gzip` found for struct `ClientBuilder` in the current scope
   --> src/consensus/optimize.rs:428:14
    |
426 |           let client = reqwest::Client::builder()
    |  ______________________-
427 | |             .tcp_keepalive(Duration::from_secs(60))
428 | |             .gzip(true)
    | |_____________-^^^^
    |
help: there is a method `vzip` with a similar name, but with different arguments
   --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ppv-lite86-0.2.21/src/types.rs:218:5
    |
218 |     fn vzip(self) -> V;
    |     ^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `std::string::String: FromArgMatches` is not satisfied
   --> src/cli/args.rs:371:18
    |
371 |         command: String, // crate::commands::mode::ModeCommands, // Temporarily disabled
    |                  ^^^^^^ the trait `FromArgMatches` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `FromArgMatches`:
              AnalyticsCommand
              AuditCommands
              Box<T>
              Cli
              ComplianceCommands
              LspCommands
              MemoryCommand
              MigrateArgs
            and 20 others

error[E0277]: the trait bound `std::string::String: Subcommand` is not satisfied
   --> src/cli/args.rs:371:18
    |
371 |         command: String, // crate::commands::mode::ModeCommands, // Temporarily disabled
    |                  ^^^^^^ the trait `Subcommand` is not implemented for `std::string::String`
    |
    = help: the following other types implement trait `Subcommand`:
              AnalyticsCommand
              AuditCommands
              Box<T>
              ComplianceCommands
              LspCommands
              MemoryCommand
              MigrateCommand
              PermissionCommands
            and 17 others

error[E0277]: the trait bound `commands::security::SecurityCommands: Subcommand` is not satisfied
   --> src/cli/args.rs:696:18
    |
696 |         command: crate::commands::SecurityCommands,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Subcommand` is not implemented for `commands::security::SecurityCommands`
    |
    = help: the following other types implement trait `Subcommand`:
              AnalyticsCommand
              AuditCommands
              Box<T>
              ComplianceCommands
              LspCommands
              MemoryCommand
              MigrateCommand
              PermissionCommands
            and 17 others

error[E0308]: `match` arms have incompatible types
   --> src/cli/accessibility.rs:170:22
    |
163 |             match color_name {
    |             ---------------- `match` arms have incompatible types
...
169 |                 "gray" => "secondary or disabled indication",
    |                           ---------------------------------- this and all prior arms are found to be of type `&str`
170 |                 _ => format!("{} color", color_name),
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
    --> src/analysis/parser.rs:407:21
     |
406  |                 let symbol_query = tree_sitter::Query::new(
     |                                    ----------------------- arguments to this function are incorrect
407  |                     lang,
     |                     ^^^^ expected `tree_sitter::Language`, found a different `tree_sitter::Language`
     |
note: two different versions of crate `tree_sitter` are being used; two types coming from two different versions of the same crate are different types even if they look the same
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tree-sitter-0.20.10/binding_rust/lib.rs:43:1
     |
43   | pub struct Language(*const ffi::TSLanguage);
     | ^^^^^^^^^^^^^^^^^^^ this is the expected type `tree_sitter::Language`
     |
    ::: /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tree-sitter-0.22.6/binding_rust/lib.rs:54:1
     |
54   | pub struct Language(*const ffi::TSLanguage);
     | ^^^^^^^^^^^^^^^^^^^ this is the found type `tree_sitter::Language`
     |
    ::: src/analysis/parser.rs:10:5
     |
10   | use tree_sitter::{Parser, Tree, Node, Language as TSLanguage, InputEdit, Point};
     |     ----------- one version of crate `tree_sitter` used here, as a direct dependency of the current crate
...
404  |                 let lang = tree_sitter_swift::language();
     |                            ----------------- one version of crate `tree_sitter` used here, as a dependency of crate `tree_sitter_swift`
     = help: you can use `cargo tree` to explore your dependency tree
note: associated function defined here
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tree-sitter-0.20.10/binding_rust/lib.rs:1348:12
     |
1348 |     pub fn new(language: Language, source: &str) -> Result<Self, QueryError> {
     |            ^^^

error[E0308]: mismatched types
    --> src/analysis/parser.rs:418:21
     |
417  |                 let import_query = tree_sitter::Query::new(
     |                                    ----------------------- arguments to this function are incorrect
418  |                     lang,
     |                     ^^^^ expected `tree_sitter::Language`, found a different `tree_sitter::Language`
     |
note: two different versions of crate `tree_sitter` are being used; two types coming from two different versions of the same crate are different types even if they look the same
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tree-sitter-0.20.10/binding_rust/lib.rs:43:1
     |
43   | pub struct Language(*const ffi::TSLanguage);
     | ^^^^^^^^^^^^^^^^^^^ this is the expected type `tree_sitter::Language`
     |
    ::: /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tree-sitter-0.22.6/binding_rust/lib.rs:54:1
     |
54   | pub struct Language(*const ffi::TSLanguage);
     | ^^^^^^^^^^^^^^^^^^^ this is the found type `tree_sitter::Language`
     |
    ::: src/analysis/parser.rs:10:5
     |
10   | use tree_sitter::{Parser, Tree, Node, Language as TSLanguage, InputEdit, Point};
     |     ----------- one version of crate `tree_sitter` used here, as a direct dependency of the current crate
...
404  |                 let lang = tree_sitter_swift::language();
     |                            ----------------- one version of crate `tree_sitter` used here, as a dependency of crate `tree_sitter_swift`
     = help: you can use `cargo tree` to explore your dependency tree
note: associated function defined here
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tree-sitter-0.20.10/binding_rust/lib.rs:1348:12
     |
1348 |     pub fn new(language: Language, source: &str) -> Result<Self, QueryError> {
     |            ^^^

error[E0308]: mismatched types
    --> src/analysis/parser.rs:425:21
     |
424  |                 let highlight_query = tree_sitter::Query::new(
     |                                       ----------------------- arguments to this function are incorrect
425  |                     lang,
     |                     ^^^^ expected `tree_sitter::Language`, found a different `tree_sitter::Language`
     |
note: two different versions of crate `tree_sitter` are being used; two types coming from two different versions of the same crate are different types even if they look the same
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tree-sitter-0.20.10/binding_rust/lib.rs:43:1
     |
43   | pub struct Language(*const ffi::TSLanguage);
     | ^^^^^^^^^^^^^^^^^^^ this is the expected type `tree_sitter::Language`
     |
    ::: /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tree-sitter-0.22.6/binding_rust/lib.rs:54:1
     |
54   | pub struct Language(*const ffi::TSLanguage);
     | ^^^^^^^^^^^^^^^^^^^ this is the found type `tree_sitter::Language`
     |
    ::: src/analysis/parser.rs:10:5
     |
10   | use tree_sitter::{Parser, Tree, Node, Language as TSLanguage, InputEdit, Point};
     |     ----------- one version of crate `tree_sitter` used here, as a direct dependency of the current crate
...
404  |                 let lang = tree_sitter_swift::language();
     |                            ----------------- one version of crate `tree_sitter` used here, as a dependency of crate `tree_sitter_swift`
     = help: you can use `cargo tree` to explore your dependency tree
note: associated function defined here
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tree-sitter-0.20.10/binding_rust/lib.rs:1348:12
     |
1348 |     pub fn new(language: Language, source: &str) -> Result<Self, QueryError> {
     |            ^^^

error[E0308]: `match` arms have incompatible types
   --> src/analysis/parser.rs:437:17
    |
437 |                 (lang, symbol_query, import_query, highlight_query)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `tree_sitter::Language`, found a different `tree_sitter::Language`
    |
note: two different versions of crate `tree_sitter` are being used; two types coming from two different versions of the same crate are different types even if they look the same
   --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tree-sitter-0.20.10/binding_rust/lib.rs:43:1
    |
43  | pub struct Language(*const ffi::TSLanguage);
    | ^^^^^^^^^^^^^^^^^^^ this is the expected type `tree_sitter::Language`
    |
   ::: /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tree-sitter-0.22.6/binding_rust/lib.rs:54:1
    |
54  | pub struct Language(*const ffi::TSLanguage);
    | ^^^^^^^^^^^^^^^^^^^ this is the found type `tree_sitter::Language`
    |
   ::: src/analysis/parser.rs:10:5
    |
10  | use tree_sitter::{Parser, Tree, Node, Language as TSLanguage, InputEdit, Point};
    |     ----------- one version of crate `tree_sitter` used here, as a direct dependency of the current crate
...
404 |                 let lang = tree_sitter_swift::language();
    |                            ----------------- one version of crate `tree_sitter` used here, as a dependency of crate `tree_sitter_swift`
    = help: you can use `cargo tree` to explore your dependency tree

error[E0308]: mismatched types
   --> src/analysis/symbol_index.rs:449:29
    |
449 |                 attributes: Vec::new(),
    |                             ^^^^^^^^^^ expected `HashMap<String, String>`, found `Vec<_>`
    |
    = note: expected struct `HashMap<std::string::String, std::string::String>`
               found struct `Vec<_>`

error[E0689]: can't call method `saturating_sub` on ambiguous numeric type `{integer}`
    --> src/analysis/repository_intelligence.rs:1652:47
     |
1652 |             current_nesting = current_nesting.saturating_sub(closing_braces);
     |                                               ^^^^^^^^^^^^^^
     |
help: you must specify a type for this binding, like `i32`
     |
1638 |         let mut current_nesting: i32 = 0;
     |                                +++++

error[E0599]: no method named `as_str` found for enum `core::Language` in the current scope
   --> src/commands/consensus.rs:365:34
    |
365 |                 snippet.language.as_str(),
    |                                  ^^^^^^ method not found in `Language`
    |
   ::: src/core/mod.rs:113:1
    |
113 | pub enum Language {
    | ----------------- method `as_str` not found for this enum
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `as_str`, perhaps you need to implement one of them:
            candidate #1: `DiffableStr`
            candidate #2: `http::header::map::as_header_name::Sealed`
            candidate #3: `reqwest::header::map::as_header_name::Sealed`
            candidate #4: `reqwest::into_url::IntoUrlSealed`
            candidate #5: `rustix::path::arg::Arg`

error[E0277]: the trait bound `ratatui::prelude::Text<'_>: From<&std::string::String>` is not satisfied
   --> src/tui/consensus_view.rs:137:28
    |
137 |             Paragraph::new(&stage.name).style(name_style),
    |             -------------- ^^^^^^^^^^^ the trait `From<&std::string::String>` is not implemented for `ratatui::prelude::Text<'_>`
    |             |
    |             required by a bound introduced by this call
    |
    = note: required for `&std::string::String` to implement `Into<ratatui::prelude::Text<'_>>`
note: required by a bound in `Paragraph::<'a>::new`
   --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ratatui-0.27.0/src/widgets/paragraph.rs:115:12
    |
113 |     pub fn new<T>(text: T) -> Self
    |            --- required by a bound in this associated function
114 |     where
115 |         T: Into<Text<'a>>,
    |            ^^^^^^^^^^^^^^ required by this bound in `Paragraph::<'a>::new`
help: consider dereferencing here
    |
137 |             Paragraph::new(&*stage.name).style(name_style),
    |                             +

error[E0277]: the trait bound `ratatui::prelude::Color: Serialize` is not satisfied
    --> src/tui/themes/mod.rs:50:24
     |
50   | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `ratatui::prelude::Color`
...
53   |     pub primary: Color,
     |     --- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1077 others
note: required by a bound in `_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:53:18
     |
53   |     pub primary: Color,
     |                  ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:54:20
     |
54   |     pub secondary: Color,
     |                    ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:55:21
     |
55   |     pub background: Color,
     |                     ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:56:21
     |
56   |     pub foreground: Color,
     |                     ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:57:17
     |
57   |     pub accent: Color,
     |                 ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:60:16
     |
60   |     pub error: Color,
     |                ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:61:18
     |
61   |     pub warning: Color,
     |                  ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:62:18
     |
62   |     pub success: Color,
     |                  ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:63:15
     |
63   |     pub info: Color,
     |               ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:64:16
     |
64   |     pub muted: Color,
     |                ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:67:24
     |
67   |     pub border_active: Color,
     |                        ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:68:26
     |
68   |     pub border_inactive: Color,
     |                          ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:69:23
     |
69   |     pub selection_bg: Color,
     |                       ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:70:23
     |
70   |     pub selection_fg: Color,
     |                       ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:73:18
     |
73   |     pub keyword: Color,
     |                  ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:74:17
     |
74   |     pub string: Color,
     |                 ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:75:18
     |
75   |     pub comment: Color,
     |                  ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:76:19
     |
76   |     pub function: Color,
     |                   ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:77:19
     |
77   |     pub variable: Color,
     |                   ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:78:17
     |
78   |     pub number: Color,
     |                 ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:79:19
     |
79   |     pub operator: Color,
     |                   ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:82:20
     |
82   |     pub directory: Color,
     |                    ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:83:15
     |
83   |     pub file: Color,
     |               ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:84:18
     |
84   |     pub symlink: Color,
     |                  ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:85:21
     |
85   |     pub executable: Color,
     |                     ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:88:18
     |
88   |     pub command: Color,
     |                  ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:89:17
     |
89   |     pub output: Color,
     |                 ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:90:25
     |
90   |     pub system_message: Color,
     |                         ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:91:22
     |
91   |     pub line_number: Color,
     |                      ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:94:18
     |
94   |     pub heading: Color,
     |                  ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:95:21
     |
95   |     pub code_block: Color,
     |                     ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:53:18
     |
53   |     pub primary: Color,
     |                  ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:54:20
     |
54   |     pub secondary: Color,
     |                    ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:55:21
     |
55   |     pub background: Color,
     |                     ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:56:21
     |
56   |     pub foreground: Color,
     |                     ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:57:17
     |
57   |     pub accent: Color,
     |                 ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:60:16
     |
60   |     pub error: Color,
     |                ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:61:18
     |
61   |     pub warning: Color,
     |                  ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:62:18
     |
62   |     pub success: Color,
     |                  ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:63:15
     |
63   |     pub info: Color,
     |               ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:64:16
     |
64   |     pub muted: Color,
     |                ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:67:24
     |
67   |     pub border_active: Color,
     |                        ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:68:26
     |
68   |     pub border_inactive: Color,
     |                          ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:69:23
     |
69   |     pub selection_bg: Color,
     |                       ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:70:23
     |
70   |     pub selection_fg: Color,
     |                       ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:73:18
     |
73   |     pub keyword: Color,
     |                  ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:74:17
     |
74   |     pub string: Color,
     |                 ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:75:18
     |
75   |     pub comment: Color,
     |                  ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:76:19
     |
76   |     pub function: Color,
     |                   ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:77:19
     |
77   |     pub variable: Color,
     |                   ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:78:17
     |
78   |     pub number: Color,
     |                 ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:79:19
     |
79   |     pub operator: Color,
     |                   ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:82:20
     |
82   |     pub directory: Color,
     |                    ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:83:15
     |
83   |     pub file: Color,
     |               ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:84:18
     |
84   |     pub symlink: Color,
     |                  ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:85:21
     |
85   |     pub executable: Color,
     |                     ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:88:18
     |
88   |     pub command: Color,
     |                  ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:89:17
     |
89   |     pub output: Color,
     |                 ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:90:25
     |
90   |     pub system_message: Color,
     |                         ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:91:22
     |
91   |     pub line_number: Color,
     |                      ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:94:18
     |
94   |     pub heading: Color,
     |                  ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:95:21
     |
95   |     pub code_block: Color,
     |                     ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Color: Deserialize<'_>` is not satisfied
  --> src/tui/themes/mod.rs:50:35
   |
50 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Color`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Color` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `Deserialize<'de>`:
             &'a Path
             &'a [u8]
             &'a str
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
           and 1094 others
note: required by a bound in `_::_serde::__private::de::missing_field`
  --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ratatui::prelude::Style: Serialize` is not satisfied
    --> src/tui/themes/mod.rs:99:24
     |
99   | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `ratatui::prelude::Style`
100  | pub struct StyleDefinitions {
101  |     pub title_bar: Style,
     |     --- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1077 others
note: required by a bound in `_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:101:20
     |
101  |     pub title_bar: Style,
     |                    ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:102:21
     |
102  |     pub status_bar: Style,
     |                     ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:103:16
     |
103  |     pub panel: Style,
     |                ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:104:24
     |
104  |     pub active_border: Style,
     |                        ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:105:26
     |
105  |     pub inactive_border: Style,
     |                          ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:106:20
     |
106  |     pub selection: Style,
     |                    ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:107:14
     |
107  |     pub tab: Style,
     |              ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:108:21
     |
108  |     pub active_tab: Style,
     |                     ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:109:17
     |
109  |     pub editor: Style,
     |                 ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:110:19
     |
110  |     pub terminal: Style,
     |                   ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:111:26
     |
111  |     pub terminal_output: Style,
     |                          ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:112:16
     |
112  |     pub popup: Style,
     |                ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:113:23
     |
113  |     pub input_active: Style,
     |                       ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:114:25
     |
114  |     pub input_inactive: Style,
     |                         ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:115:15
     |
115  |     pub text: Style,
     |               ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:101:20
     |
101  |     pub title_bar: Style,
     |                    ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:102:21
     |
102  |     pub status_bar: Style,
     |                     ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:103:16
     |
103  |     pub panel: Style,
     |                ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:104:24
     |
104  |     pub active_border: Style,
     |                        ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:105:26
     |
105  |     pub inactive_border: Style,
     |                          ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:106:20
     |
106  |     pub selection: Style,
     |                    ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:107:14
     |
107  |     pub tab: Style,
     |              ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:108:21
     |
108  |     pub active_tab: Style,
     |                     ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:109:17
     |
109  |     pub editor: Style,
     |                 ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:110:19
     |
110  |     pub terminal: Style,
     |                   ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:111:26
     |
111  |     pub terminal_output: Style,
     |                          ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:112:16
     |
112  |     pub popup: Style,
     |                ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:113:23
     |
113  |     pub input_active: Style,
     |                       ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:114:25
     |
114  |     pub input_inactive: Style,
     |                         ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
    --> src/tui/themes/mod.rs:115:15
     |
115  |     pub text: Style,
     |               ^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1094 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ratatui::prelude::Style: Deserialize<'_>` is not satisfied
  --> src/tui/themes/mod.rs:99:35
   |
99 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `ratatui::prelude::Style`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ratatui::prelude::Style` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `Deserialize<'de>`:
             &'a Path
             &'a [u8]
             &'a str
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
           and 1094 others
note: required by a bound in `_::_serde::__private::de::missing_field`
  --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't compare `std::string::String` with `&str`
   --> src/hooks/conditions.rs:359:29
    |
359 |             Ok(current_time >= start && current_time <= end)
    |                             ^^ no implementation for `std::string::String < &str` and `std::string::String > &str`
    |
    = help: the trait `PartialOrd<&str>` is not implemented for `std::string::String`
help: consider dereferencing both sides of the expression
    |
359 |             Ok(*current_time >= *start && current_time <= end)
    |                +                +

error[E0277]: can't compare `std::string::String` with `&str`
   --> src/hooks/conditions.rs:359:54
    |
359 |             Ok(current_time >= start && current_time <= end)
    |                                                      ^^ no implementation for `std::string::String < &str` and `std::string::String > &str`
    |
    = help: the trait `PartialOrd<&str>` is not implemented for `std::string::String`
help: consider dereferencing both sides of the expression
    |
359 |             Ok(current_time >= start && *current_time <= *end)
    |                                         +                +

error[E0277]: the trait bound `HashSet<hooks::rbac::Permission>: Hash` is not satisfied
  --> src/hooks/rbac.rs:15:5
   |
11 | #[derive(Debug, Clone, PartialEq, Eq, Hash, Serialize, Deserialize)]
   |                                       ---- in this derive macro expansion
...
15 |     pub permissions: HashSet<Permission>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Hash` is not implemented for `HashSet<hooks::rbac::Permission>`

error[E0277]: the trait bound `approval_workflow::ApprovalStatus: Hash` is not satisfied
    --> src/hooks/approval_workflow.rs:997:26
     |
997  |     pub stats_by_status: HashMap<ApprovalStatus, usize>,
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Hash` is not implemented for `approval_workflow::ApprovalStatus`
     |
     = help: the trait `Deserialize<'_>` is implemented for `HashMap<K, V, S>`
     = note: required for `HashMap<approval_workflow::ApprovalStatus, usize>` to implement `Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`
help: consider annotating `approval_workflow::ApprovalStatus` with `#[derive(Hash)]`
     |
145  + #[derive(Hash)]
146  | pub enum ApprovalStatus {
     |

error[E0277]: the trait bound `approval_workflow::ApprovalStatus: Hash` is not satisfied
    --> src/hooks/approval_workflow.rs:997:26
     |
997  |     pub stats_by_status: HashMap<ApprovalStatus, usize>,
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Hash` is not implemented for `approval_workflow::ApprovalStatus`
     |
     = help: the trait `Deserialize<'_>` is implemented for `HashMap<K, V, S>`
     = note: required for `HashMap<approval_workflow::ApprovalStatus, usize>` to implement `Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`
help: consider annotating `approval_workflow::ApprovalStatus` with `#[derive(Hash)]`
     |
145  + #[derive(Hash)]
146  | pub enum ApprovalStatus {
     |

error[E0277]: the trait bound `approval_workflow::ApprovalStatus: Hash` is not satisfied
   --> src/hooks/approval_workflow.rs:992:35
    |
992 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `Hash` is not implemented for `approval_workflow::ApprovalStatus`
    |
    = help: the trait `Deserialize<'_>` is implemented for `HashMap<K, V, S>`
    = note: required for `HashMap<approval_workflow::ApprovalStatus, usize>` to implement `Deserialize<'_>`
note: required by a bound in `_::_serde::__private::de::missing_field`
   --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider annotating `approval_workflow::ApprovalStatus` with `#[derive(Hash)]`
    |
145 + #[derive(Hash)]
146 | pub enum ApprovalStatus {
    |

error[E0277]: the trait bound `QualityTrend: Serialize` is not satisfied
    --> src/hooks/quality_gates.rs:1692:24
     |
1692 | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `QualityTrend`
...
1697 |     pub quality_trend: QualityTrend,
     |     --- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `QualityTrend` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1077 others
note: required by a bound in `_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `QualityViolationSeverity: Hash` is not satisfied
    --> src/hooks/quality_gates.rs:1696:33
     |
1696 |     pub violations_by_severity: HashMap<QualityViolationSeverity, usize>,
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Hash` is not implemented for `QualityViolationSeverity`
     |
     = help: the trait `Deserialize<'_>` is implemented for `HashMap<K, V, S>`
     = note: required for `HashMap<QualityViolationSeverity, usize>` to implement `Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`
help: consider annotating `QualityViolationSeverity` with `#[derive(Hash)]`
     |
489  + #[derive(Hash)]
490  | pub enum QualityViolationSeverity {
     |

error[E0277]: the trait bound `QualityTrend: Deserialize<'_>` is not satisfied
    --> src/hooks/quality_gates.rs:1697:24
     |
1697 |     pub quality_trend: QualityTrend,
     |                        ^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `QualityTrend`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `QualityTrend` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1133 others
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `QualityViolationSeverity: Hash` is not satisfied
    --> src/hooks/quality_gates.rs:1696:33
     |
1696 |     pub violations_by_severity: HashMap<QualityViolationSeverity, usize>,
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Hash` is not implemented for `QualityViolationSeverity`
     |
     = help: the trait `Deserialize<'_>` is implemented for `HashMap<K, V, S>`
     = note: required for `HashMap<QualityViolationSeverity, usize>` to implement `Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`
help: consider annotating `QualityViolationSeverity` with `#[derive(Hash)]`
     |
489  + #[derive(Hash)]
490  | pub enum QualityViolationSeverity {
     |

error[E0277]: the trait bound `QualityTrend: Deserialize<'_>` is not satisfied
    --> src/hooks/quality_gates.rs:1697:24
     |
1697 |     pub quality_trend: QualityTrend,
     |                        ^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `QualityTrend`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `QualityTrend` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1133 others
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `QualityViolationSeverity: Hash` is not satisfied
    --> src/hooks/quality_gates.rs:1692:35
     |
1692 | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                                   ^^^^^^^^^^^ the trait `Hash` is not implemented for `QualityViolationSeverity`
     |
     = help: the trait `Deserialize<'_>` is implemented for `HashMap<K, V, S>`
     = note: required for `HashMap<QualityViolationSeverity, usize>` to implement `Deserialize<'_>`
note: required by a bound in `_::_serde::__private::de::missing_field`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
     |
23   | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
     |        ------------- required by a bound in this function
24   | where
25   |     V: Deserialize<'de>,
     |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
     = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider annotating `QualityViolationSeverity` with `#[derive(Hash)]`
     |
489  + #[derive(Hash)]
490  | pub enum QualityViolationSeverity {
     |

error[E0277]: the trait bound `QualityTrend: Deserialize<'_>` is not satisfied
    --> src/hooks/quality_gates.rs:1692:35
     |
1692 | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `QualityTrend`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `QualityTrend` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1133 others
note: required by a bound in `_::_serde::__private::de::missing_field`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
     |
23   | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
     |        ------------- required by a bound in this function
24   | where
25   |     V: Deserialize<'de>,
     |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
     = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> src/planning/risk_analyzer.rs:615:44
    |
615 |         base_cost * template.cost_factor * (risk.probability as f64)
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f32`, found `f64`

error[E0308]: mismatched types
   --> src/planning/risk_analyzer.rs:615:9
    |
613 |     fn calculate_mitigation_cost(&self, risk: &Risk, template: &MitigationTemplate) -> f64 {
    |                                                                                        --- expected `f64` because of return type
614 |         let base_cost = 1000.0; // Base cost per mitigation
615 |         base_cost * template.cost_factor * (risk.probability as f64)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `f32`
    |
help: you can convert an `f32` to an `f64`
    |
615 |         (base_cost * template.cost_factor * (risk.probability as f64)).into()
    |         +                                                            ++++++++

error[E0277]: cannot multiply `f32` by `f64`
   --> src/planning/risk_analyzer.rs:615:42
    |
615 |         base_cost * template.cost_factor * (risk.probability as f64)
    |                                          ^ no implementation for `f32 * f64`
    |
    = help: the trait `Mul<f64>` is not implemented for `f32`
    = help: the following other types implement trait `Mul<Rhs>`:
              `&f32` implements `Mul<&nu_ansi_term::rgb::Rgb>`
              `&f32` implements `Mul<f32>`
              `&f32` implements `Mul<nu_ansi_term::rgb::Rgb>`
              `&f32` implements `Mul`
              `f32` implements `Mul<&f32>`
              `f32` implements `Mul<&nu_ansi_term::rgb::Rgb>`
              `f32` implements `Mul<cassowary::Expression>`
              `f32` implements `Mul<cassowary::Term>`
            and 5 others

warning: use of deprecated method `chrono::DateTime::<Tz>::date`: Use `date_naive()` instead
   --> src/planning/timeline.rs:427:60
    |
427 |               self.working_hours.holidays.iter().any(|h| h.date() == current.date()) {
    |                                                            ^^^^

warning: use of deprecated method `chrono::DateTime::<Tz>::date`: Use `date_naive()` instead
   --> src/planning/timeline.rs:427:78
    |
427 |               self.working_hours.holidays.iter().any(|h| h.date() == current.date()) {
    |                                                                              ^^^^

warning: use of deprecated method `chrono::DateTime::<Tz>::date`: Use `date_naive()` instead
   --> src/planning/timeline.rs:430:31
    |
430 |             current = current.date().and_hms(9, 0, 0); // 9 AM
    |                               ^^^^

warning: use of deprecated method `chrono::Date::<Tz>::and_hms`: Use and_hms_opt() instead
   --> src/planning/timeline.rs:430:38
    |
430 |             current = current.date().and_hms(9, 0, 0); // 9 AM
    |                                      ^^^^^^^

error[E0599]: no method named `hour` found for struct `NaiveTime` in the current scope
   --> src/planning/timeline.rs:434:35
    |
434 |         let hour = current.time().hour();
    |                                   ^^^^
    |
   ::: /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chrono-0.4.41/src/traits.rs:285:8
    |
285 |     fn hour(&self) -> u32;
    |        ---- the method is available for `NaiveTime` here
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `Timelike` which provides `hour` is implemented but not in scope; perhaps you want to import it
    |
5   + use chrono::Timelike;
    |
help: there is a method `hour12` with a similar name
    |
434 |         let hour = current.time().hour12();
    |                                       ++

warning: use of deprecated method `chrono::DateTime::<Tz>::date`: Use `date_naive()` instead
   --> src/planning/timeline.rs:436:31
    |
436 |             current = current.date().and_hms(9, 0, 0);
    |                               ^^^^

warning: use of deprecated method `chrono::Date::<Tz>::and_hms`: Use and_hms_opt() instead
   --> src/planning/timeline.rs:436:38
    |
436 |             current = current.date().and_hms(9, 0, 0);
    |                                      ^^^^^^^

error[E0599]: no method named `hour` found for struct `NaiveTime` in the current scope
   --> src/planning/timeline.rs:452:52
    |
452 |             let hours_today = (17 - current.time().hour()).min(8) as f32;
    |                                                    ^^^^
    |
   ::: /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chrono-0.4.41/src/traits.rs:285:8
    |
285 |     fn hour(&self) -> u32;
    |        ---- the method is available for `NaiveTime` here
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `Timelike` which provides `hour` is implemented but not in scope; perhaps you want to import it
    |
5   + use chrono::Timelike;
    |
help: there is a method `hour12` with a similar name
    |
452 |             let hours_today = (17 - current.time().hour12()).min(8) as f32;
    |                                                        ++

error[E0282]: type annotations needed for `HashMap<_, _>`
   --> src/planning/mode_switcher.rs:231:13
    |
231 |         let mut parent = std::collections::HashMap::new();
    |             ^^^^^^^^^^
...
244 |                     node = prev.clone();
    |                                 ----- type must be known at this point
    |
help: consider giving `parent` an explicit type, where the type for type parameter `V` is specified
    |
231 |         let mut parent: HashMap<K, V> = std::collections::HashMap::new();
    |                       +++++++++++++++

error[E0599]: no variant or associated item named `Standard` found for enum `PromptStyle` in the current scope
   --> src/planning/mode_switcher.rs:470:48
    |
60  | pub enum PromptStyle {
    | -------------------- variant or associated item `Standard` not found for this enum
...
470 |                     prompt_style: PromptStyle::Standard,
    |                                                ^^^^^^^^ variant or associated item not found in `PromptStyle`

error[E0599]: no variant or associated item named `Standard` found for enum `PromptStyle` in the current scope
   --> src/planning/mode_switcher.rs:483:40
    |
60  | pub enum PromptStyle {
    | -------------------- variant or associated item `Standard` not found for this enum
...
483 |             prompt_style: PromptStyle::Standard,
    |                                        ^^^^^^^^ variant or associated item not found in `PromptStyle`

error[E0609]: no field `metrics` on type `&FileInfo`
   --> src/planning/integration.rs:409:21
    |
409 |             if file.metrics.complexity > 20 {
    |                     ^^^^^^^ unknown field
    |
    = note: available fields are: `content`, `last_modified`, `language`

error[E0609]: no field `path` on type `&FileInfo`
   --> src/planning/integration.rs:411:52
    |
411 |                     file_path: PathBuf::from(&file.path),
    |                                                    ^^^^ unknown field
    |
    = note: available fields are: `content`, `last_modified`, `language`

error[E0609]: no field `metrics` on type `&FileInfo`
   --> src/planning/integration.rs:413:38
    |
413 |                     complexity: file.metrics.complexity as f32,
    |                                      ^^^^^^^ unknown field
    |
    = note: available fields are: `content`, `last_modified`, `language`

error[E0609]: no field `metrics` on type `&FileInfo`
   --> src/planning/integration.rs:419:21
    |
419 |             if file.metrics.lines > 500 {
    |                     ^^^^^^^ unknown field
    |
    = note: available fields are: `content`, `last_modified`, `language`

error[E0609]: no field `path` on type `&FileInfo`
   --> src/planning/integration.rs:421:52
    |
421 |                     file_path: PathBuf::from(&file.path),
    |                                                    ^^^^ unknown field
    |
    = note: available fields are: `content`, `last_modified`, `language`

error[E0308]: mismatched types
   --> src/analytics/trend_analysis.rs:457:29
    |
431 |     fn detect_trend_direction(&self, data: &VecDeque<DataPoint>) -> Result<TrendDirection> {
    |                                                                     ---------------------- expected `std::result::Result<trend_analysis::TrendDirection, anyhow::Error>` because of return type
...
457 |             s if s > 0.1 => TrendDirection::StronglyIncreasing,
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<TrendDirection, Error>`, found `TrendDirection`
    |
    = note: expected enum `std::result::Result<trend_analysis::TrendDirection, anyhow::Error>`
               found enum `trend_analysis::TrendDirection`
help: try wrapping the expression in `Ok`
    |
457 |             s if s > 0.1 => Ok(TrendDirection::StronglyIncreasing),
    |                             +++                                  +

error[E0599]: the method `insert` exists for struct `HashMap<ModelType, Box<dyn PredictionModel>>`, but its trait bounds were not satisfied
   --> src/analytics/trend_analysis.rs:768:16
    |
50  | pub enum ModelType {
    | ------------------ doesn't satisfy `trend_analysis::ModelType: Hash`
...
768 |         models.insert(ModelType::MovingAverage, Box::new(MovingAverageModel::new()));
    |                ^^^^^^
    |
    = note: the following trait bounds were not satisfied:
            `trend_analysis::ModelType: Hash`
help: consider annotating `trend_analysis::ModelType` with `#[derive(Hash)]`
    |
50  + #[derive(Hash)]
51  | pub enum ModelType {
    |

error[E0599]: the method `insert` exists for struct `HashMap<ModelType, Box<dyn PredictionModel>>`, but its trait bounds were not satisfied
   --> src/analytics/trend_analysis.rs:769:16
    |
50  | pub enum ModelType {
    | ------------------ doesn't satisfy `trend_analysis::ModelType: Hash`
...
769 |         models.insert(ModelType::ExponentialSmoothing, Box::new(ExponentialSmoothingModel::new()));
    |                ^^^^^^
    |
    = note: the following trait bounds were not satisfied:
            `trend_analysis::ModelType: Hash`
help: consider annotating `trend_analysis::ModelType` with `#[derive(Hash)]`
    |
50  + #[derive(Hash)]
51  | pub enum ModelType {
    |

error[E0599]: the method `insert` exists for struct `HashMap<ModelType, Box<dyn PredictionModel>>`, but its trait bounds were not satisfied
   --> src/analytics/trend_analysis.rs:770:16
    |
50  | pub enum ModelType {
    | ------------------ doesn't satisfy `trend_analysis::ModelType: Hash`
...
770 |         models.insert(ModelType::LinearRegression, Box::new(LinearRegressionModel::new()));
    |                ^^^^^^
    |
    = note: the following trait bounds were not satisfied:
            `trend_analysis::ModelType: Hash`
help: consider annotating `trend_analysis::ModelType` with `#[derive(Hash)]`
    |
50  + #[derive(Hash)]
51  | pub enum ModelType {
    |

error[E0599]: the method `get` exists for struct `HashMap<ModelType, Box<dyn PredictionModel>>`, but its trait bounds were not satisfied
   --> src/analytics/trend_analysis.rs:782:33
    |
50  | pub enum ModelType {
    | ------------------ doesn't satisfy `trend_analysis::ModelType: Hash`
...
782 |         let model = self.models.get(&model_type)
    |                                 ^^^ method cannot be called on `HashMap<ModelType, Box<dyn PredictionModel>>` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `trend_analysis::ModelType: Hash`
help: consider annotating `trend_analysis::ModelType` with `#[derive(Hash)]`
    |
50  + #[derive(Hash)]
51  | pub enum ModelType {
    |

error[E0599]: no method named `hour` found for struct `NaiveTime` in the current scope
   --> src/analytics/cost_intelligence.rs:566:45
    |
566 |                 let hour = timestamp.time().hour();
    |                                             ^^^^
    |
   ::: /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chrono-0.4.41/src/traits.rs:285:8
    |
285 |     fn hour(&self) -> u32;
    |        ---- the method is available for `NaiveTime` here
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `Timelike` which provides `hour` is implemented but not in scope; perhaps you want to import it
    |
11  + use chrono::Timelike;
    |
help: there is a method `hour12` with a similar name
    |
566 |                 let hour = timestamp.time().hour12();
    |                                                 ++

error[E0277]: the trait bound `DailySpend: Serialize` is not satisfied
    --> src/analytics/cost_intelligence.rs:764:24
     |
764  | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `DailySpend`
765  | pub struct SpendingForecast {
766  |     pub predicted_spend: Vec<DailySpend>,
     |     --- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `DailySpend` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1077 others
     = note: required for `Vec<DailySpend>` to implement `Serialize`
note: required by a bound in `_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `DailySpend: Deserialize<'_>` is not satisfied
    --> src/analytics/cost_intelligence.rs:766:26
     |
766  |     pub predicted_spend: Vec<DailySpend>,
     |                          ^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `DailySpend`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `DailySpend` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1113 others
     = note: required for `Vec<DailySpend>` to implement `Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `DailySpend: Deserialize<'_>` is not satisfied
    --> src/analytics/cost_intelligence.rs:766:26
     |
766  |     pub predicted_spend: Vec<DailySpend>,
     |                          ^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `DailySpend`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `DailySpend` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               &'a Path
               &'a [u8]
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
             and 1113 others
     = note: required for `Vec<DailySpend>` to implement `Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `DailySpend: Deserialize<'_>` is not satisfied
   --> src/analytics/cost_intelligence.rs:764:35
    |
764 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `DailySpend`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `DailySpend` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Deserialize<'de>`:
              &'a Path
              &'a [u8]
              &'a str
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
            and 1113 others
    = note: required for `Vec<DailySpend>` to implement `Deserialize<'_>`
note: required by a bound in `_::_serde::__private::de::missing_field`
   --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `dashboard::WidgetType: Hash` is not satisfied
   --> src/analytics/dashboard.rs:744:26
    |
744 |         widget_templates.insert(WidgetType::LineChart, WidgetTemplate {
    |                          ^^^^^^ the trait `Hash` is not implemented for `dashboard::WidgetType`
    |
note: required by a bound in `HashMap::<K, V, S>::insert`
   --> /rustc/6b00bc3880198600130e1cf62b8f8a93494488cc/library/std/src/collections/hash/map.rs:1203:5
help: consider annotating `dashboard::WidgetType` with `#[derive(Hash)]`
    |
77  + #[derive(Hash)]
78  | pub enum WidgetType {
    |

error[E0599]: the method `insert` exists for struct `HashMap<WidgetType, WidgetTemplate>`, but its trait bounds were not satisfied
   --> src/analytics/dashboard.rs:757:26
    |
77  | pub enum WidgetType {
    | ------------------- doesn't satisfy `dashboard::WidgetType: Hash`
...
757 |         widget_templates.insert(WidgetType::GaugeChart, WidgetTemplate {
    |         -----------------^^^^^^
    |
    = note: the following trait bounds were not satisfied:
            `dashboard::WidgetType: Hash`
help: consider annotating `dashboard::WidgetType` with `#[derive(Hash)]`
    |
77  + #[derive(Hash)]
78  | pub enum WidgetType {
    |

error[E0308]: mismatched types
    --> src/analytics/dashboard.rs:883:62
     |
883  |                     let sparkline = create_sparkline(points, width - 4);
     |                                     ----------------         ^^^^^^^^^ expected `usize`, found `u16`
     |                                     |
     |                                     arguments to this function are incorrect
     |
note: function defined here
    --> src/analytics/dashboard.rs:1049:4
     |
1049 | fn create_sparkline(points: &[DataPoint], width: usize) -> String {
     |    ^^^^^^^^^^^^^^^^                       ------------
help: you can convert a `u16` to a `usize`
     |
883  |                     let sparkline = create_sparkline(points, (width - 4).into());
     |                                                              +         ++++++++

error[E0599]: no method named `weekday` found for struct `DateTime` in the current scope
   --> src/analytics/ml_models.rs:840:37
    |
840 |         let day_of_week = timestamp.weekday().num_days_from_monday() as usize;
    |                                     ^^^^^^^ method not found in `DateTime<Utc>`
    |
   ::: /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/chrono-0.4.41/src/traits.rs:82:8
    |
82  |     fn weekday(&self) -> Weekday;
    |        ------- the method is available for `DateTime<Utc>` here
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `Datelike` which provides `weekday` is implemented but not in scope; perhaps you want to import it
    |
10  + use chrono::Datelike;
    |

error[E0609]: no field `tags` on type `&&templates::ReportTemplate`
   --> src/analytics/templates.rs:733:26
    |
733 |                     || t.tags.iter().any(|tag| tag.to_lowercase().contains(&query_lower))
    |                          ^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
733 |                     || t.metadata.tags.iter().any(|tag| tag.to_lowercase().contains(&query_lower))
    |                          +++++++++

error[E0308]: mismatched types
   --> src/analytics/alerts.rs:369:74
    |
369 | ...                   metrics: Self::collect_alert_metrics(&rule, &metric_store.read().await).await,
    |                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `MetricStore`, found `RwLockReadGuard<'_, MetricStore>`
    |
    = note: expected struct `MetricStore`
               found struct `tokio::sync::RwLockReadGuard<'_, MetricStore>`

error[E0277]: the trait bound `alerts::AlertSeverity: Hash` is not satisfied
    --> src/analytics/alerts.rs:743:29
     |
743  |     pub alerts_by_severity: HashMap<AlertSeverity, usize>,
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Hash` is not implemented for `alerts::AlertSeverity`
     |
     = help: the trait `Deserialize<'_>` is implemented for `HashMap<K, V, S>`
     = note: required for `HashMap<alerts::AlertSeverity, usize>` to implement `Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`
help: consider annotating `alerts::AlertSeverity` with `#[derive(Hash)]`
     |
20   + #[derive(Hash)]
21   | pub enum AlertSeverity {
     |

error[E0277]: the trait bound `alerts::AlertType: Hash` is not satisfied
    --> src/analytics/alerts.rs:744:25
     |
744  |     pub alerts_by_type: HashMap<AlertType, usize>,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Hash` is not implemented for `alerts::AlertType`
     |
     = help: the trait `Deserialize<'_>` is implemented for `HashMap<K, V, S>`
     = note: required for `HashMap<alerts::AlertType, usize>` to implement `Deserialize<'_>`
note: required by a bound in `next_element`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`
help: consider annotating `alerts::AlertType` with `#[derive(Hash)]`
     |
29   + #[derive(Hash)]
30   | pub enum AlertType {
     |

error[E0277]: the trait bound `alerts::AlertSeverity: Hash` is not satisfied
    --> src/analytics/alerts.rs:743:29
     |
743  |     pub alerts_by_severity: HashMap<AlertSeverity, usize>,
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Hash` is not implemented for `alerts::AlertSeverity`
     |
     = help: the trait `Deserialize<'_>` is implemented for `HashMap<K, V, S>`
     = note: required for `HashMap<alerts::AlertSeverity, usize>` to implement `Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`
help: consider annotating `alerts::AlertSeverity` with `#[derive(Hash)]`
     |
20   + #[derive(Hash)]
21   | pub enum AlertSeverity {
     |

error[E0277]: the trait bound `alerts::AlertType: Hash` is not satisfied
    --> src/analytics/alerts.rs:744:25
     |
744  |     pub alerts_by_type: HashMap<AlertType, usize>,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Hash` is not implemented for `alerts::AlertType`
     |
     = help: the trait `Deserialize<'_>` is implemented for `HashMap<K, V, S>`
     = note: required for `HashMap<alerts::AlertType, usize>` to implement `Deserialize<'_>`
note: required by a bound in `next_value`
    --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`
help: consider annotating `alerts::AlertType` with `#[derive(Hash)]`
     |
29   + #[derive(Hash)]
30   | pub enum AlertType {
     |

error[E0277]: the trait bound `alerts::AlertSeverity: Hash` is not satisfied
   --> src/analytics/alerts.rs:737:35
    |
737 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `Hash` is not implemented for `alerts::AlertSeverity`
    |
    = help: the trait `Deserialize<'_>` is implemented for `HashMap<K, V, S>`
    = note: required for `HashMap<alerts::AlertSeverity, usize>` to implement `Deserialize<'_>`
note: required by a bound in `_::_serde::__private::de::missing_field`
   --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider annotating `alerts::AlertSeverity` with `#[derive(Hash)]`
    |
20  + #[derive(Hash)]
21  | pub enum AlertSeverity {
    |

error[E0277]: the trait bound `alerts::AlertType: Hash` is not satisfied
   --> src/analytics/alerts.rs:737:35
    |
737 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `Hash` is not implemented for `alerts::AlertType`
    |
    = help: the trait `Deserialize<'_>` is implemented for `HashMap<K, V, S>`
    = note: required for `HashMap<alerts::AlertType, usize>` to implement `Deserialize<'_>`
note: required by a bound in `_::_serde::__private::de::missing_field`
   --> /Users/veronelazio/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider annotating `alerts::AlertType` with `#[derive(Hash)]`
    |
29  + #[derive(Hash)]
30  | pub enum AlertType {
    |

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/config.rs:169:35
    |
169 |         .ok_or_else(|| HiveError::Migration("Cannot determine home directory".to_string()))?;
    |                                   ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/database.rs:251:35
    |
251 |         .ok_or_else(|| HiveError::Migration("Cannot determine home directory".to_string()))?;
    |                                   ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/database.rs:659:20
    |
659 |     Err(HiveError::Migration(format!("Invalid timestamp format: {}", timestamp)))
    |                    ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/validator.rs:727:35
    |
727 |         .ok_or_else(|| HiveError::Migration("Cannot determine home directory".to_string()))?;
    |                                   ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/validator.rs:735:35
    |
735 |         .ok_or_else(|| HiveError::Migration("Cannot determine home directory".to_string()))?;
    |                                   ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/rollback.rs:274:43
    |
274 |                 .ok_or_else(|| HiveError::Migration("Cannot determine home directory".to_string()))?;
    |                                           ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/rollback.rs:583:35
    |
583 |         .ok_or_else(|| HiveError::Migration("Cannot determine home directory".to_string()))?;
    |                                   ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/rollback.rs:590:35
    |
590 |         .ok_or_else(|| HiveError::Migration("Cannot determine home directory".to_string()))?;
    |                                   ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0369]: binary operation `==` cannot be applied to type `TestStatus`
   --> src/migration/live_test.rs:529:37
    |
529 |         if self.test_results.status == TestStatus::Completed {
    |            ------------------------ ^^ --------------------- TestStatus
    |            |
    |            TestStatus
    |
note: an implementation of `PartialEq` might be missing for `TestStatus`
   --> src/migration/live_test.rs:69:1
    |
69  | pub enum TestStatus {
    | ^^^^^^^^^^^^^^^^^^^ must implement `PartialEq`
help: consider annotating `TestStatus` with `#[derive(PartialEq)]`
    |
69  + #[derive(PartialEq)]
70  | pub enum TestStatus {
    |

error[E0277]: the trait bound `AtomicU64: Clone` is not satisfied
  --> src/migration/performance.rs:56:5
   |
53 | #[derive(Debug, Clone, Default, Serialize, Deserialize)]
   |                 ----- in this derive macro expansion
...
56 |     pub operations_completed: AtomicU64,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `AtomicU64`

error[E0277]: the trait bound `AtomicU64: Clone` is not satisfied
  --> src/migration/performance.rs:57:5
   |
53 | #[derive(Debug, Clone, Default, Serialize, Deserialize)]
   |                 ----- in this derive macro expansion
...
57 |     pub bytes_processed: AtomicU64,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `AtomicU64`

error[E0277]: the trait bound `AtomicU64: Clone` is not satisfied
  --> src/migration/performance.rs:58:5
   |
53 | #[derive(Debug, Clone, Default, Serialize, Deserialize)]
   |                 ----- in this derive macro expansion
...
58 |     pub current_memory_usage_mb: AtomicU64,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `AtomicU64`

error[E0277]: the trait bound `AtomicU64: Clone` is not satisfied
  --> src/migration/performance.rs:59:5
   |
53 | #[derive(Debug, Clone, Default, Serialize, Deserialize)]
   |                 ----- in this derive macro expansion
...
59 |     pub peak_memory_usage_mb: AtomicU64,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `AtomicU64`

error[E0277]: the trait bound `AtomicU64: Clone` is not satisfied
  --> src/migration/performance.rs:60:5
   |
53 | #[derive(Debug, Clone, Default, Serialize, Deserialize)]
   |                 ----- in this derive macro expansion
...
60 |     pub cpu_usage_percent: AtomicU64,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `AtomicU64`

error[E0277]: the trait bound `AtomicU64: Clone` is not satisfied
  --> src/migration/performance.rs:61:5
   |
53 | #[derive(Debug, Clone, Default, Serialize, Deserialize)]
   |                 ----- in this derive macro expansion
...
61 |     pub disk_read_mb_per_sec: AtomicU64,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `AtomicU64`

error[E0277]: the trait bound `AtomicU64: Clone` is not satisfied
  --> src/migration/performance.rs:62:5
   |
53 | #[derive(Debug, Clone, Default, Serialize, Deserialize)]
   |                 ----- in this derive macro expansion
...
62 |     pub disk_write_mb_per_sec: AtomicU64,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `AtomicU64`

error[E0277]: the trait bound `AtomicU64: Clone` is not satisfied
  --> src/migration/performance.rs:63:5
   |
53 | #[derive(Debug, Clone, Default, Serialize, Deserialize)]
   |                 ----- in this derive macro expansion
...
63 |     pub operations_per_second: AtomicU64,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `AtomicU64`

error[E0277]: the trait bound `AtomicU64: Clone` is not satisfied
  --> src/migration/performance.rs:64:5
   |
53 | #[derive(Debug, Clone, Default, Serialize, Deserialize)]
   |                 ----- in this derive macro expansion
...
64 |     pub error_count: AtomicU64,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `AtomicU64`

error[E0277]: the trait bound `AtomicBool: Clone` is not satisfied
  --> src/migration/performance.rs:65:5
   |
53 | #[derive(Debug, Clone, Default, Serialize, Deserialize)]
   |                 ----- in this derive macro expansion
...
65 |     pub is_monitoring: AtomicBool,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `AtomicBool`

error[E0277]: `?` couldn't convert the error to `std::io::Error`
   --> src/migration/ui.rs:242:24
    |
242 |             .interact()?;
    |              ----------^ the trait `From<dialoguer::Error>` is not implemented for `std::io::Error`
    |              |
    |              this can't be annotated with `?` because it has type `Result<_, dialoguer::Error>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `std::io::Error` implements `From<AsyncFdTryNewError<T>>`
              `std::io::Error` implements `From<CompressError>`
              `std::io::Error` implements `From<DecompressError>`
              `std::io::Error` implements `From<Elapsed>`
              `std::io::Error` implements `From<IntoInnerError<W>>`
              `std::io::Error` implements `From<JoinError>`
              `std::io::Error` implements `From<PathPersistError>`
              `std::io::Error` implements `From<PersistError<F>>`
            and 15 others

error[E0277]: `?` couldn't convert the error to `std::io::Error`
   --> src/migration/ui.rs:274:28
    |
274 |                 .interact()?;
    |                  ----------^ the trait `From<dialoguer::Error>` is not implemented for `std::io::Error`
    |                  |
    |                  this can't be annotated with `?` because it has type `Result<_, dialoguer::Error>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `std::io::Error` implements `From<AsyncFdTryNewError<T>>`
              `std::io::Error` implements `From<CompressError>`
              `std::io::Error` implements `From<DecompressError>`
              `std::io::Error` implements `From<Elapsed>`
              `std::io::Error` implements `From<IntoInnerError<W>>`
              `std::io::Error` implements `From<JoinError>`
              `std::io::Error` implements `From<PathPersistError>`
              `std::io::Error` implements `From<PersistError<F>>`
            and 15 others

error[E0277]: `?` couldn't convert the error to `std::io::Error`
   --> src/migration/ui.rs:282:37
    |
282 |                     .interact_text()?;
    |                      ---------------^ the trait `From<dialoguer::Error>` is not implemented for `std::io::Error`
    |                      |
    |                      this can't be annotated with `?` because it has type `Result<_, dialoguer::Error>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `std::io::Error` implements `From<AsyncFdTryNewError<T>>`
              `std::io::Error` implements `From<CompressError>`
              `std::io::Error` implements `From<DecompressError>`
              `std::io::Error` implements `From<Elapsed>`
              `std::io::Error` implements `From<IntoInnerError<W>>`
              `std::io::Error` implements `From<JoinError>`
              `std::io::Error` implements `From<PathPersistError>`
              `std::io::Error` implements `From<PersistError<F>>`
            and 15 others

error[E0277]: `?` couldn't convert the error to `std::io::Error`
   --> src/migration/ui.rs:289:33
    |
289 |                 .interact_text()?;
    |                  ---------------^ the trait `From<dialoguer::Error>` is not implemented for `std::io::Error`
    |                  |
    |                  this can't be annotated with `?` because it has type `Result<_, dialoguer::Error>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `std::io::Error` implements `From<AsyncFdTryNewError<T>>`
              `std::io::Error` implements `From<CompressError>`
              `std::io::Error` implements `From<DecompressError>`
              `std::io::Error` implements `From<Elapsed>`
              `std::io::Error` implements `From<IntoInnerError<W>>`
              `std::io::Error` implements `From<JoinError>`
              `std::io::Error` implements `From<PathPersistError>`
              `std::io::Error` implements `From<PersistError<F>>`
            and 15 others

error[E0277]: `?` couldn't convert the error to `std::io::Error`
   --> src/migration/ui.rs:323:24
    |
323 |             .interact()?;
    |              ----------^ the trait `From<dialoguer::Error>` is not implemented for `std::io::Error`
    |              |
    |              this can't be annotated with `?` because it has type `Result<_, dialoguer::Error>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `std::io::Error` implements `From<AsyncFdTryNewError<T>>`
              `std::io::Error` implements `From<CompressError>`
              `std::io::Error` implements `From<DecompressError>`
              `std::io::Error` implements `From<Elapsed>`
              `std::io::Error` implements `From<IntoInnerError<W>>`
              `std::io::Error` implements `From<JoinError>`
              `std::io::Error` implements `From<PathPersistError>`
              `std::io::Error` implements `From<PersistError<F>>`
            and 15 others

error[E0277]: `?` couldn't convert the error to `std::io::Error`
   --> src/migration/ui.rs:353:24
    |
353 |             .interact()?;
    |              ----------^ the trait `From<dialoguer::Error>` is not implemented for `std::io::Error`
    |              |
    |              this can't be annotated with `?` because it has type `Result<_, dialoguer::Error>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `std::io::Error` implements `From<AsyncFdTryNewError<T>>`
              `std::io::Error` implements `From<CompressError>`
              `std::io::Error` implements `From<DecompressError>`
              `std::io::Error` implements `From<Elapsed>`
              `std::io::Error` implements `From<IntoInnerError<W>>`
              `std::io::Error` implements `From<JoinError>`
              `std::io::Error` implements `From<PathPersistError>`
              `std::io::Error` implements `From<PersistError<F>>`
            and 15 others

error[E0277]: `?` couldn't convert the error to `std::io::Error`
   --> src/migration/ui.rs:384:24
    |
384 |             .interact()?;
    |              ----------^ the trait `From<dialoguer::Error>` is not implemented for `std::io::Error`
    |              |
    |              this can't be annotated with `?` because it has type `Result<_, dialoguer::Error>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `std::io::Error` implements `From<AsyncFdTryNewError<T>>`
              `std::io::Error` implements `From<CompressError>`
              `std::io::Error` implements `From<DecompressError>`
              `std::io::Error` implements `From<Elapsed>`
              `std::io::Error` implements `From<IntoInnerError<W>>`
              `std::io::Error` implements `From<JoinError>`
              `std::io::Error` implements `From<PathPersistError>`
              `std::io::Error` implements `From<PersistError<F>>`
            and 15 others

error[E0277]: `?` couldn't convert the error to `std::io::Error`
   --> src/migration/ui.rs:394:33
    |
394 |                 .interact_text()?;
    |                  ---------------^ the trait `From<dialoguer::Error>` is not implemented for `std::io::Error`
    |                  |
    |                  this can't be annotated with `?` because it has type `Result<_, dialoguer::Error>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `std::io::Error` implements `From<AsyncFdTryNewError<T>>`
              `std::io::Error` implements `From<CompressError>`
              `std::io::Error` implements `From<DecompressError>`
              `std::io::Error` implements `From<Elapsed>`
              `std::io::Error` implements `From<IntoInnerError<W>>`
              `std::io::Error` implements `From<JoinError>`
              `std::io::Error` implements `From<PathPersistError>`
              `std::io::Error` implements `From<PersistError<F>>`
            and 15 others

error[E0277]: `?` couldn't convert the error to `std::io::Error`
   --> src/migration/ui.rs:402:24
    |
402 |             .interact()? 
    |              ----------^ the trait `From<dialoguer::Error>` is not implemented for `std::io::Error`
    |              |
    |              this can't be annotated with `?` because it has type `Result<_, dialoguer::Error>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `std::io::Error` implements `From<AsyncFdTryNewError<T>>`
              `std::io::Error` implements `From<CompressError>`
              `std::io::Error` implements `From<DecompressError>`
              `std::io::Error` implements `From<Elapsed>`
              `std::io::Error` implements `From<IntoInnerError<W>>`
              `std::io::Error` implements `From<JoinError>`
              `std::io::Error` implements `From<PathPersistError>`
              `std::io::Error` implements `From<PersistError<F>>`
            and 15 others

error[E0277]: `?` couldn't convert the error to `std::io::Error`
   --> src/migration/ui.rs:414:33
    |
414 |                 .interact_text()?;
    |                  ---------------^ the trait `From<dialoguer::Error>` is not implemented for `std::io::Error`
    |                  |
    |                  this can't be annotated with `?` because it has type `Result<_, dialoguer::Error>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `std::io::Error` implements `From<AsyncFdTryNewError<T>>`
              `std::io::Error` implements `From<CompressError>`
              `std::io::Error` implements `From<DecompressError>`
              `std::io::Error` implements `From<Elapsed>`
              `std::io::Error` implements `From<IntoInnerError<W>>`
              `std::io::Error` implements `From<JoinError>`
              `std::io::Error` implements `From<PathPersistError>`
              `std::io::Error` implements `From<PersistError<F>>`
            and 15 others

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/ui.rs:569:39
    |
569 |             .ok_or_else(|| HiveError::Migration("Source path not specified".to_string()))?;
    |                                       ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/validation_suite.rs:274:37
    |
274 |             .map_err(|e| HiveError::Migration(format!("Failed to open source database: {}", e)))?;
    |                                     ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Migration` found for enum `HiveError` in the current scope
   --> src/migration/validation_suite.rs:277:37
    |
277 |             .map_err(|e| HiveError::Migration(format!("Failed to open target database: {}", e)))?;
    |                                     ^^^^^^^^^ variant or associated item not found in `HiveError`
    |
   ::: src/core/error.rs:18:1
    |
18  | pub enum HiveError {
    | ------------------ variant or associated item `Migration` not found for this enum
    |
note: if you're trying to build a new `HiveError` consider using one of the following associated functions:
      HiveError::config_not_found
      HiveError::config_invalid
      HiveError::database_connection
      HiveError::http_request
      and 4 others
   --> src/core/error.rs:272:5
    |
272 |     pub fn config_not_found(path: impl Into<PathBuf>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
277 |     pub fn config_invalid(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
282 |     pub fn database_connection(message: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
287 |     pub fn http_request(url: impl Into<String>, status: u16) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0658]: use of unstable library feature `duration_constructors`
   --> src/migration/validation_suite.rs:560:54
    |
560 | ...                   estimated_fix_time: Some(Duration::from_hours(2)),
    |                                                ^^^^^^^^^^^^^^^^^^^^
    |
    = note: see issue #120301 <https://github.com/rust-lang/rust/issues/120301> for more information

error[E0658]: use of unstable library feature `duration_constructors`
   --> src/migration/validation_suite.rs:570:54
    |
570 | ...                   estimated_fix_time: Some(Duration::from_hours(4)),
    |                                                ^^^^^^^^^^^^^^^^^^^^
    |
    = note: see issue #120301 <https://github.com/rust-lang/rust/issues/120301> for more information

error[E0658]: use of unstable library feature `duration_constructors`
   --> src/migration/validation_suite.rs:580:54
    |
580 | ...                   estimated_fix_time: Some(Duration::from_hours(1)),
    |                                                ^^^^^^^^^^^^^^^^^^^^
    |
    = note: see issue #120301 <https://github.com/rust-lang/rust/issues/120301> for more information

error[E0277]: `dyn ToSql` doesn't implement `std::fmt::Debug`
   --> src/database/optimize.rs:372:43
    |
372 |             hasher.update(format!("{:?}", param).as_bytes());
    |                                           ^^^^^ `dyn ToSql` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`
    |
    = help: the trait `std::fmt::Debug` is not implemented for `dyn ToSql`
    = help: the following other types implement trait `std::fmt::Debug`:
              dyn rustls::verify::ClientCertVerifier
              dyn rustls::verify::ServerCertVerifier
              dyn std::any::Any + std::marker::Send + std::marker::Sync
              dyn std::any::Any + std::marker::Send
              dyn std::any::Any
              dyn tracing::Value
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused import: `TimeZone`
 --> src/core/temporal.rs:5:31
  |
5 | use chrono::{DateTime, Local, TimeZone};
  |                               ^^^^^^^^

warning: unused import: `Context`
  --> src/analysis/symbol_index.rs:10:22
   |
10 | use anyhow::{Result, Context, anyhow};
   |                      ^^^^^^^

warning: unused import: `Context`
 --> src/commands/search.rs:6:22
  |
6 | use anyhow::{Result, Context};
  |                      ^^^^^^^

warning: unused import: `backend::Backend`
  --> src/tui/advanced/explorer.rs:12:5
   |
12 |     backend::Backend,
   |     ^^^^^^^^^^^^^^^^

warning: unused import: `backend::Backend`
  --> src/tui/advanced/editor.rs:13:5
   |
13 |     backend::Backend,
   |     ^^^^^^^^^^^^^^^^

warning: unused import: `backend::Backend`
  --> src/tui/advanced/terminal.rs:12:5
   |
12 |     backend::Backend,
   |     ^^^^^^^^^^^^^^^^

warning: unused import: `backend::Backend`
  --> src/tui/advanced/mod.rs:20:5
   |
20 |     backend::Backend,
   |     ^^^^^^^^^^^^^^^^

warning: unused import: `Context`
  --> src/hooks/consensus_integration.rs:16:22
   |
16 | use anyhow::{Result, Context};
   |                      ^^^^^^^

warning: unused import: `Context`
 --> src/hooks/approval_workflow.rs:7:22
  |
7 | use anyhow::{Result, Context};
  |                      ^^^^^^^

warning: unused import: `Context`
 --> src/memory/pattern_learning.rs:9:14
  |
9 | use anyhow::{Context as _, Result};
  |              ^^^^^^^

warning: unused import: `Context`
 --> src/memory/retrieval.rs:9:14
  |
9 | use anyhow::{Context as _, Result};
  |              ^^^^^^^

warning: unused import: `Context`
  --> src/analytics/alerts.rs:10:22
   |
10 | use anyhow::{Result, Context};
   |                      ^^^^^^^

warning: unused import: `Write`
  --> src/migration/ui.rs:10:21
   |
10 | use std::io::{self, Write};
   |                     ^^^^^

warning: unused variable: `answer`
   --> src/core/memory.rs:761:56
    |
761 |     fn process_conversation(&mut self, question: &str, answer: &str) -> Result<()> {
    |                                                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_answer`

error[E0382]: use of moved value: `home`
   --> src/core/uninstaller.rs:498:45
    |
496 |                 } else if let Ok(home) = env::var("HOME") {
    |                                  ---- move occurs because `home` has type `std::string::String`, which does not implement the `Copy` trait
497 |                     dirs.push(PathBuf::from(home).join(".config").join("hive"));
    |                                             ---- value moved here
498 |                     dirs.push(PathBuf::from(home).join(".hive"));
    |                                             ^^^^ value used here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
497 |                     dirs.push(PathBuf::from(home.clone()).join(".config").join("hive"));
    |                                                 ++++++++

warning: unused variable: `question`
  --> src/consensus/stages/refiner.rs:68:48
   |
68 |     pub fn build_enhanced_system_prompt(&self, question: &str, previous_answer: Option<&str>) -> String {
   |                                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_question`

warning: unused variable: `question`
  --> src/consensus/stages/refiner.rs:81:60
   |
81 |     pub fn structure_refiner_context(&self, context: &str, question: &str) -> String {
   |                                                            ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_question`

error[E0716]: temporary value dropped while borrowed
   --> src/consensus/stages/refiner.rs:120:28
    |
120 |             analysis.push(&format!("💻 Contains {} code block(s) - verify syntax and best practices", code_blocks));
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ - temporary value is freed at the end of this statement
    |                            |
    |                            creates a temporary value which is freed while still in use
...
123 |                 analysis.push("📖 Consider adding code comments for clarity");
    |                 -------- borrow later used here
    |
    = note: consider using a `let` binding to create a longer lived value
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `question`
  --> src/consensus/stages/validator.rs:76:50
   |
76 |     pub fn build_validation_system_prompt(&self, question: &str, response: &str) -> String {
   |                                                  ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_question`

warning: unused variable: `question`
  --> src/consensus/stages/validator.rs:89:63
   |
89 |     pub fn structure_validation_context(&self, context: &str, question: &str) -> String {
   |                                                               ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_question`

warning: unused variable: `question`
  --> src/consensus/stages/curator.rs:74:48
   |
74 |     pub fn build_curation_system_prompt(&self, question: &str, response: &str) -> String {
   |                                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_question`

warning: unused variable: `question`
  --> src/consensus/stages/curator.rs:98:61
   |
98 |     pub fn structure_curation_context(&self, context: &str, question: &str) -> String {
   |                                                             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_question`

warning: variable does not need to be mutable
   --> src/consensus/stages/curator.rs:256:13
    |
256 |         let mut enhanced = content.to_string();
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `question`
   --> src/consensus/stages/curator.rs:301:48
    |
301 |     pub fn add_structure(&self, content: &str, question: &str) -> String {
    |                                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_question`

warning: unused variable: `stage`
  --> src/consensus/streaming.rs:50:30
   |
50 |     fn on_stage_start(&self, stage: Stage, model: &str) -> Result<()> {
   |                              ^^^^^ help: if this is intentional, prefix it with an underscore: `_stage`

warning: unused variable: `model`
  --> src/consensus/streaming.rs:50:44
   |
50 |     fn on_stage_start(&self, stage: Stage, model: &str) -> Result<()> {
   |                                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_model`

warning: unused variable: `stage`
  --> src/consensus/streaming.rs:55:30
   |
55 |     fn on_stage_chunk(&self, stage: Stage, chunk: &str, total_content: &str) -> Result<()> {
   |                              ^^^^^ help: if this is intentional, prefix it with an underscore: `_stage`

warning: unused variable: `chunk`
  --> src/consensus/streaming.rs:55:44
   |
55 |     fn on_stage_chunk(&self, stage: Stage, chunk: &str, total_content: &str) -> Result<()> {
   |                                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_chunk`

warning: unused variable: `total_content`
  --> src/consensus/streaming.rs:55:57
   |
55 |     fn on_stage_chunk(&self, stage: Stage, chunk: &str, total_content: &str) -> Result<()> {
   |                                                         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_total_content`

warning: unused variable: `stage`
  --> src/consensus/streaming.rs:60:33
   |
60 |     fn on_stage_progress(&self, stage: Stage, progress: ProgressInfo) -> Result<()> {
   |                                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_stage`

warning: unused variable: `progress`
  --> src/consensus/streaming.rs:60:47
   |
60 |     fn on_stage_progress(&self, stage: Stage, progress: ProgressInfo) -> Result<()> {
   |                                               ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_progress`

warning: unused variable: `stage`
  --> src/consensus/streaming.rs:65:33
   |
65 |     fn on_stage_complete(&self, stage: Stage, result: &StageResult) -> Result<()> {
   |                                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_stage`

warning: unused variable: `result`
  --> src/consensus/streaming.rs:65:47
   |
65 |     fn on_stage_complete(&self, stage: Stage, result: &StageResult) -> Result<()> {
   |                                               ^^^^^^ help: if this is intentional, prefix it with an underscore: `_result`

warning: unused variable: `stage`
  --> src/consensus/streaming.rs:70:24
   |
70 |     fn on_error(&self, stage: Stage, error: &anyhow::Error) -> Result<()> {
   |                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_stage`

warning: unused variable: `error`
  --> src/consensus/streaming.rs:70:38
   |
70 |     fn on_error(&self, stage: Stage, error: &anyhow::Error) -> Result<()> {
   |                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_error`

warning: unused variable: `stage`
  --> src/consensus/streaming.rs:96:30
   |
96 |     fn on_stage_chunk(&self, stage: Stage, chunk: &str, _total_content: &str) -> Result<()> {
   |                              ^^^^^ help: if this is intentional, prefix it with an underscore: `_stage`

warning: unused variable: `request`
   --> src/consensus/optimize.rs:298:9
    |
298 |         request: &ConsensusRequest,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_request`

warning: unused variable: `request`
   --> src/consensus/optimize.rs:313:9
    |
313 |         request: &ConsensusRequest,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_request`

warning: unused variable: `i`
   --> src/transformation/simple_engine.rs:122:14
    |
122 |         for (i, line) in lines.iter().enumerate() {
    |              ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `original_ast`
  --> src/transformation/syntax.rs:27:13
   |
27 |         let original_ast = self.parser.parse(original)?;
   |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_original_ast`

error[E0596]: cannot borrow data in an `Arc` as mutable
  --> src/transformation/syntax.rs:27:28
   |
27 |         let original_ast = self.parser.parse(original)?;
   |                            ^^^^^^^^^^^ cannot borrow as mutable
   |
   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Arc<TreeSitterParser>`

warning: unused variable: `language`
  --> src/transformation/syntax.rs:77:48
   |
77 |     pub fn verify_syntax(&self, content: &str, language: Language) -> Result<()> {
   |                                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_language`

error[E0596]: cannot borrow data in an `Arc` as mutable
  --> src/transformation/syntax.rs:78:15
   |
78 |         match self.parser.parse(content) {
   |               ^^^^^^^^^^^ cannot borrow as mutable
   |
   = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Arc<TreeSitterParser>`

warning: unused variable: `file_path`
   --> src/transformation/conflict.rs:222:14
    |
222 |         for (file_path, mut file_changes) in by_file {
    |              ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_file_path`

error[E0382]: borrow of moved value: `home`
   --> src/cli/completions.rs:113:50
    |
100 |     if let Ok(home) = std::env::var("HOME") {
    |               ---- move occurs because `home` has type `std::string::String`, which does not implement the `Copy` trait
101 |         // Create user zsh completion directory if it doesn't exist
102 |         let zsh_dir = std::path::PathBuf::from(home).join(".zsh").join("completions");
    |                                                ---- value moved here
...
113 |             format!("{}/.oh-my-zsh/completions", home),
    |                                                  ^^^^ value borrowed here after move
    |
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider cloning the value if the performance cost is acceptable
    |
102 |         let zsh_dir = std::path::PathBuf::from(home.clone()).join(".zsh").join("completions");
    |                                                    ++++++++

warning: unused variable: `path`
   --> src/analysis/dependency.rs:410:23
    |
410 |             .filter(|(path, &node)| {
    |                       ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `graph`
   --> src/analysis/dependency.rs:508:31
    |
508 |     fn get_cycle_edges(&self, graph: &DependencyGraph, cycle: &[PathBuf]) -> Vec<(PathBuf, PathBuf)> {
    |                               ^^^^^ help: if this is intentional, prefix it with an underscore: `_graph`

warning: unused variable: `edges`
   --> src/analysis/dependency.rs:521:61
    |
521 |     fn calculate_cycle_severity(&self, cycle_length: usize, edges: &[(PathBuf, PathBuf)]) -> Severity {
    |                                                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_edges`

warning: unused variable: `allowed_dependencies`
    --> src/analysis/repository_intelligence.rs:1609:13
     |
1609 |         let allowed_dependencies = match layer_name {
     |             ^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_allowed_dependencies`

warning: unused variable: `module`
    --> src/analysis/repository_intelligence.rs:1619:13
     |
1619 |         for module in modules {
     |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_module`

warning: unused variable: `dependencies`
    --> src/analysis/repository_intelligence.rs:1604:9
     |
1604 |         dependencies: &DependencyAnalysis
     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dependencies`

warning: variable does not need to be mutable
    --> src/analysis/repository_intelligence.rs:1606:13
     |
1606 |         let mut violations = Vec::new();
     |             ----^^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: unused variable: `dependencies`
    --> src/analysis/repository_intelligence.rs:1925:47
     |
1925 |     fn detect(&self, symbols: &[SymbolEntry], dependencies: &DependencyAnalysis) -> Option<(ArchitecturePattern, f32)> {
     |                                               ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dependencies`

warning: unused variable: `dependencies`
    --> src/analysis/repository_intelligence.rs:1974:47
     |
1974 |     fn detect(&self, symbols: &[SymbolEntry], dependencies: &DependencyAnalysis) -> Option<(ArchitecturePattern, f32)> {
     |                                               ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dependencies`

warning: unused variable: `dependencies`
    --> src/analysis/repository_intelligence.rs:2019:47
     |
2019 |     fn detect(&self, symbols: &[SymbolEntry], dependencies: &DependencyAnalysis) -> Option<(ArchitecturePattern, f32)> {
     |                                               ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dependencies`

warning: unused variable: `dependencies`
    --> src/analysis/repository_intelligence.rs:2055:47
     |
2055 |     fn detect(&self, symbols: &[SymbolEntry], dependencies: &DependencyAnalysis) -> Option<(ArchitecturePattern, f32)> {
     |                                               ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dependencies`

warning: unused variable: `language`
   --> src/analysis/fast_parse.rs:475:58
    |
475 |     fn parse_chunk_simd(chunk_id: usize, content: &[u8], language: &str) -> Result<ChunkParseResult> {
    |                                                          ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_language`

warning: unused variable: `chart_data`
   --> src/commands/analytics.rs:379:23
    |
379 |             if let Ok(chart_data) = serde_json::from_value::<serde_json::Value>(widget.data.clone()) {
    |                       ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_chart_data`

warning: unused variable: `avg_stage_time`
   --> src/commands/consensus.rs:424:9
    |
424 |     let avg_stage_time = total_duration.as_millis() / result.stages.len() as u128;
    |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avg_stage_time`

warning: unused variable: `task_description`
   --> src/providers/openrouter/models.rs:314:9
    |
314 |         task_description: &str,
    |         ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_task_description`

error[E0502]: cannot borrow `self.terminal` as mutable because it is also borrowed as immutable
   --> src/interactive_tui.rs:350:9
    |
350 |           self.terminal.draw(|f| {
    |           ^             ---- --- immutable borrow occurs here
    |           |             |
    |  _________|             immutable borrow later used by call
    | |
351 | |             let main_layout = Layout::default()
352 | |                 .direction(Direction::Vertical)
353 | |                 .constraints(if self.consensus_progress.is_some() {
...   |
371 | |                 self.draw_messages(f, main_layout[0]);
    | |                 ---- first borrow occurs due to use of `*self` in closure
...   |
391 | |         })?;
    | |__________^ mutable borrow occurs here

warning: unused variable: `settings`
  --> src/tui/ui.rs:47:9
   |
47 |         settings: &TuiSettings,
   |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_settings`

warning: unused variable: `theme`
   --> src/tui/widgets/progress_bar.rs:154:26
    |
154 |     pub fn waiting_style(theme: &WidgetTheme) -> Style {
    |                          ^^^^^ help: if this is intentional, prefix it with an underscore: `_theme`

error[E0382]: borrow of partially moved value: `self`
   --> src/tui/widgets/message_list.rs:121:18
    |
108 |             Some(b) => {
    |                  - value partially moved here
...
121 |             .map(|msg| ListItem::new(self.format_message(msg)))
    |                  ^^^^^               ---- borrow occurs due to use in closure
    |                  |
    |                  value borrowed here after partial move
    |
    = note: partial move occurs because value has type `ratatui::widgets::Block<'_>`, which does not implement the `Copy` trait
help: borrow this binding in the pattern to avoid moving the value
    |
108 |             Some(ref b) => {
    |                  +++

warning: unused variable: `filter`
   --> src/tui/widgets/message_list.rs:151:9
    |
151 |         filter: fn(&MessageType) -> bool,
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_filter`

error[E0502]: cannot borrow `self.list_state` as mutable because it is also borrowed as immutable
   --> src/tui/advanced/explorer.rs:212:50
    |
191 |             .map(|entry| self.create_list_item(entry, theme))
    |                  ------- ---- first borrow occurs due to use of `*self` in closure
    |                  |
    |                  immutable borrow occurs here
...
212 |         frame.render_stateful_widget(list, area, &mut self.list_state);
    |               ----------------------             ^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here
    |               |
    |               immutable borrow later used by call

warning: unused variable: `tab`
   --> src/tui/advanced/editor.rs:560:36
    |
560 |     fn update_scroll_offset(&self, tab: &mut EditorTab) {
    |                                    ^^^ help: if this is intentional, prefix it with an underscore: `_tab`

error[E0502]: cannot borrow `self.list_state` as mutable because it is also borrowed as immutable
   --> src/tui/advanced/terminal.rs:393:58
    |
377 |             .map(|entry| self.create_history_item(entry, theme))
    |                  ------- ---- first borrow occurs due to use of `*self` in closure
    |                  |
    |                  immutable borrow occurs here
...
393 |         frame.render_stateful_widget(history_list, area, &mut self.list_state);
    |               ----------------------                     ^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here
    |               |
    |               immutable borrow later used by call

error[E0716]: temporary value dropped while borrowed
   --> src/tui/advanced/keybindings.rs:162:45
    |
162 |             KeyCode::Char(c) => parts.push(&c.to_uppercase().to_string()),
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement
    |                                             |
    |                                             creates a temporary value which is freed while still in use
...
176 |         parts.join("+")
    |         ----- borrow later used here
    |
help: consider using a `let` binding to create a longer lived value
    |
161 ~         let binding = c.to_uppercase().to_string();
162 ~         match self.key {
163 ~             KeyCode::Char(c) => parts.push(&binding),
    |

error[E0716]: temporary value dropped while borrowed
   --> src/tui/advanced/keybindings.rs:163:42
    |
163 |             KeyCode::F(n) => parts.push(&format!("F{}", n)),
    |                                          ^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement
    |                                          |
    |                                          creates a temporary value which is freed while still in use
...
176 |         parts.join("+")
    |         ----- borrow later used here
    |
    = note: consider using a `let` binding to create a longer lived value
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0382]: use of moved value: `priority`
  --> src/tui/accessibility/screen_reader.rs:75:15
   |
63 |     pub fn announce(&mut self, text: &str, priority: AnnouncementPriority) {
   |                                            -------- move occurs because `priority` has type `tui::accessibility::AnnouncementPriority`, which does not implement the `Copy` trait
...
70 |             priority,
   |             -------- value moved here
...
75 |         match priority {
   |               ^^^^^^^^ value used here after move
   |
help: consider cloning the value if the performance cost is acceptable
   |
70 |             priority: priority.clone(),
   |                     ++++++++++++++++++

error[E0004]: non-exhaustive patterns: `AnimationType::Instant`, `AnimationType::Static` and `AnimationType::Jump` not covered
   --> src/tui/accessibility/motion.rs:89:15
    |
89  |         match animation_type {
    |               ^^^^^^^^^^^^^^ patterns `AnimationType::Instant`, `AnimationType::Static` and `AnimationType::Jump` not covered
    |
note: `AnimationType` defined here
   --> src/tui/accessibility/motion.rs:117:10
    |
117 | pub enum AnimationType {
    |          ^^^^^^^^^^^^^
...
131 |     Instant,
    |     ------- not covered
132 |     /// Static display (no movement)
133 |     Static,
    |     ------ not covered
134 |     /// Jump to position (no smooth scrolling)
135 |     Jump,
    |     ---- not covered
    = note: the matched value is of type `AnimationType`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms
    |
95  ~             AnimationType::Bounce => self.animation_speed != AnimationSpeed::None,
96  ~             AnimationType::Instant | AnimationType::Static | AnimationType::Jump => todo!(),
    |

error[E0596]: cannot borrow `self.screen_reader` as mutable, as it is behind a `&` reference
   --> src/tui/accessibility/mod.rs:144:13
    |
144 |             self.screen_reader.announce(text, priority);
    |             ^^^^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable
    |
help: consider changing this to be a mutable reference
    |
142 |     pub fn announce(&mut self, text: &str, priority: AnnouncementPriority) {
    |                      +++

warning: unused variable: `currency`
   --> src/hooks/conditions.rs:409:54
    |
409 |     fn evaluate_cost_threshold(&self, max_cost: f64, currency: &str, context: &ExecutionContext) -> Result<bool> {
    |                                                      ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_currency`

warning: unused variable: `answer_words`
    --> src/hooks/quality_gates.rs:1262:13
     |
1262 |         let answer_words: Vec<&str> = answer.split_whitespace().collect();
     |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_answer_words`

warning: unused variable: `context`
   --> src/planning/decomposer.rs:178:9
    |
178 |         context: &PlanningContext,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: unused variable: `context`
   --> src/planning/risk_analyzer.rs:190:54
    |
190 |     fn analyze_resource_risks(&self, tasks: &[Task], context: &PlanningContext) -> HiveResult<Vec<Risk>> {
    |                                                      ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: unused variable: `tasks`
   --> src/planning/risk_analyzer.rs:547:41
    |
547 |     fn has_circular_dependencies(&self, tasks: &[Task]) -> bool {
    |                                         ^^^^^ help: if this is intentional, prefix it with an underscore: `_tasks`

warning: unused variable: `risk`
   --> src/planning/risk_analyzer.rs:618:41
    |
618 |     fn calculate_mitigation_time(&self, risk: &Risk, template: &MitigationTemplate) -> Duration {
    |                                         ^^^^ help: if this is intentional, prefix it with an underscore: `_risk`

warning: unused variable: `critical_path`
  --> src/planning/timeline.rs:49:13
   |
49 |         let critical_path = self.find_critical_path(tasks, dependencies, &adjusted_durations)?;
   |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_critical_path`

error[E0716]: temporary value dropped while borrowed
   --> src/planning/timeline.rs:157:66
    |
157 |                 let duration = durations.get(task_id).unwrap_or(&Duration::zero());
    |                                                                  ^^^^^^^^^^^^^^^^ - temporary value is freed at the end of this statement
    |                                                                  |
    |                                                                  creates a temporary value which is freed while still in use
158 |                 earliest_finish.insert(task_id.clone(), *duration);
    |                                                         --------- borrow later used here
    |
    = note: consider using a `let` binding to create a longer lived value

error[E0716]: temporary value dropped while borrowed
   --> src/planning/timeline.rs:174:73
    |
174 |                     let dep_duration = durations.get(dep_id).unwrap_or(&Duration::zero());
    |                                                                         ^^^^^^^^^^^^^^^^ - temporary value is freed at the end of this statement
    |                                                                         |
    |                                                                         creates a temporary value which is freed while still in use
175 |                     earliest_finish.insert(dep_id.clone(), new_start + *dep_duration);
    |                                                                        ------------- borrow later used here
    |
    = note: consider using a `let` binding to create a longer lived value

warning: unused variable: `independent_groups`
   --> src/planning/timeline.rs:317:17
    |
317 |         let mut independent_groups: Vec<Vec<String>> = Vec::new();
    |                 ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_independent_groups`

warning: unused variable: `task`
   --> src/planning/timeline.rs:320:23
    |
320 |         for (task_id, task) in &dependencies.nodes {
    |                       ^^^^ help: if this is intentional, prefix it with an underscore: `_task`

warning: unused variable: `other_task`
   --> src/planning/timeline.rs:324:28
    |
324 |             for (other_id, other_task) in &dependencies.nodes {
    |                            ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_other_task`

warning: variable does not need to be mutable
   --> src/planning/timeline.rs:317:13
    |
317 |         let mut independent_groups: Vec<Vec<String>> = Vec::new();
    |             ----^^^^^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `savings`
   --> src/planning/timeline.rs:344:9
    |
344 |         savings: Duration,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_savings`

error[E0499]: cannot borrow `*session` as mutable more than once at a time
   --> src/planning/collaborative.rs:275:49
    |
265 |         let conflict = session.conflicts.iter_mut()
    |                        ----------------- first mutable borrow occurs here
...
275 |         self.conflict_resolver.apply_resolution(session, conflict, &resolution)?;
    |                                                 ^^^^^^^  -------- first borrow later used here
    |                                                 |
    |                                                 second mutable borrow occurs here

warning: unused variable: `session`
   --> src/planning/collaborative.rs:519:9
    |
519 |         session: &mut PlanningSession,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_session`

warning: unused variable: `resolution`
   --> src/planning/collaborative.rs:521:9
    |
521 |         resolution: &ResolutionOption,
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_resolution`

warning: unused variable: `context`
   --> src/planning/integration.rs:438:49
    |
438 |     fn find_module_for_file(&self, file: &Path, context: &RepositoryContext) -> Option<String> {
    |                                                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: unused variable: `files`
   --> src/planning/integration.rs:472:38
    |
472 |     fn find_existing_patterns(&self, files: &[PathBuf]) -> HiveResult<Vec<Pattern>> {
    |                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_files`

warning: unused variable: `context`
   --> src/planning/integration.rs:483:45
    |
483 |     fn suggest_approach(&self, task: &Task, context: &RepositoryContext) -> HiveResult<String> {
    |                                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

error[E0502]: cannot borrow `*self` as immutable because it is also borrowed as mutable
   --> src/memory/pattern_learning.rs:263:40
    |
245 |         let stats = self.pattern_stats.entry(pattern_id.clone()).or_default();
    |                     ------------------ mutable borrow occurs here
...
263 |                         quality_score: self.calculate_quality_score(question, answer),
    |                                        ^^^^ immutable borrow occurs here
...
269 |                 pattern.confidence = self.calculate_confidence(pattern, stats);
    |                                                                         ----- mutable borrow later used here

error[E0502]: cannot borrow `*self` as immutable because it is also borrowed as mutable
   --> src/memory/pattern_learning.rs:269:38
    |
245 |         let stats = self.pattern_stats.entry(pattern_id.clone()).or_default();
    |                     ------------------ mutable borrow occurs here
...
269 |                 pattern.confidence = self.calculate_confidence(pattern, stats);
    |                                      ^^^^ immutable borrow occurs here  ----- mutable borrow later used here

error[E0502]: cannot borrow `*self` as immutable because it is also borrowed as mutable
   --> src/memory/pattern_learning.rs:280:40
    |
245 |         let stats = self.pattern_stats.entry(pattern_id.clone()).or_default();
    |                     ------------------ mutable borrow occurs here
...
280 |                         quality_score: self.calculate_quality_score(question, answer),
    |                                        ^^^^ immutable borrow occurs here
...
284 |                     frequency: stats.occurrences,
    |                                ----------------- mutable borrow later used here

warning: unused variable: `answer`
   --> src/memory/pattern_learning.rs:411:48
    |
411 |     fn extract_template(&self, question: &str, answer: &str, pattern_type: &PatternType) -> Result<String> {
    |                                                ^^^^^^ help: if this is intentional, prefix it with an underscore: `_answer`

warning: unused variable: `model`
   --> src/analytics/trend_analysis.rs:467:9
    |
467 |         model: &TimeSeriesModel,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_model`

warning: unused variable: `predictions`
   --> src/analytics/trend_analysis.rs:468:9
    |
468 |         predictions: &[PredictionPoint],
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_predictions`

warning: unused variable: `predictions`
   --> src/analytics/trend_analysis.rs:517:9
    |
517 |         predictions: &[TrendPrediction],
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_predictions`

warning: unused variable: `period`
   --> src/analytics/trend_analysis.rs:708:51
    |
708 |     fn calculate_amplitude(&self, values: &[f64], period: usize) -> f64 {
    |                                                   ^^^^^^ help: if this is intentional, prefix it with an underscore: `_period`

warning: unused variable: `i`
   --> src/analytics/trend_analysis.rs:729:14
    |
729 |         for (i, point) in data.iter().enumerate() {
    |              ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `data`
   --> src/analytics/trend_analysis.rs:849:24
    |
849 |     fn accuracy(&self, data: &[DataPoint]) -> f64 {
    |                        ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

warning: unused variable: `data`
   --> src/analytics/trend_analysis.rs:920:24
    |
920 |     fn accuracy(&self, data: &[DataPoint]) -> f64 {
    |                        ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

warning: unused variable: `data`
   --> src/analytics/trend_analysis.rs:996:24
    |
996 |     fn accuracy(&self, data: &[DataPoint]) -> f64 {
    |                        ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

warning: unused variable: `data`
   --> src/analytics/executive.rs:567:39
    |
567 |     fn create_usage_trend_data(&self, data: &ExecutiveData) -> Result<serde_json::Value> {
    |                                       ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

warning: unused variable: `data`
   --> src/analytics/executive.rs:596:42
    |
596 |     fn create_cost_breakdown_data(&self, data: &ExecutiveData) -> Result<serde_json::Value> {
    |                                          ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

warning: unused variable: `width`
   --> src/analytics/executive.rs:948:13
    |
948 |         let width = viz.options.width as usize;
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_width`

warning: unused variable: `height`
   --> src/analytics/executive.rs:949:13
    |
949 |         let height = viz.options.height as usize;
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_height`

warning: unused variable: `viz`
   --> src/analytics/executive.rs:964:32
    |
964 |     fn render_bar_chart(&self, viz: &Visualization) -> Result<String> {
    |                                ^^^ help: if this is intentional, prefix it with an underscore: `_viz`

warning: unused variable: `viz`
   --> src/analytics/executive.rs:976:32
    |
976 |     fn render_pie_chart(&self, viz: &Visualization) -> Result<String> {
    |                                ^^^ help: if this is intentional, prefix it with an underscore: `_viz`

warning: unused variable: `viz`
    --> src/analytics/executive.rs:1018:32
     |
1018 |     fn render_sparkline(&self, viz: &Visualization) -> Result<String> {
     |                                ^^^ help: if this is intentional, prefix it with an underscore: `_viz`

warning: unused variable: `height`
   --> src/analytics/dashboard.rs:910:57
    |
910 |     fn render_ascii(&self, widget: &Widget, width: u16, height: u16) -> Result<String> {
    |                                                         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_height`

warning: unused variable: `height`
   --> src/analytics/dashboard.rs:959:57
    |
959 |     fn render_ascii(&self, widget: &Widget, width: u16, height: u16) -> Result<String> {
    |                                                         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_height`

warning: unused variable: `last_value`
   --> src/analytics/ml_models.rs:663:13
    |
663 |         let last_value = values.last().ok_or_else(|| anyhow::anyhow!("No data"))?;
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_last_value`

warning: unused variable: `values`
   --> src/analytics/ml_models.rs:786:34
    |
786 |     fn detect_seasonality(&self, values: &[f64], timestamps: &[DateTime<Utc>]) -> Result<SeasonalComponent> {
    |                                  ^^^^^^ help: if this is intentional, prefix it with an underscore: `_values`

warning: unused variable: `timestamps`
   --> src/analytics/ml_models.rs:786:50
    |
786 |     fn detect_seasonality(&self, values: &[f64], timestamps: &[DateTime<Utc>]) -> Result<SeasonalComponent> {
    |                                                  ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_timestamps`

warning: unused variable: `filters`
   --> src/analytics/templates.rs:824:65
    |
824 |     fn should_include_section(&self, section: &TemplateSection, filters: &HashMap<String, String>) -> bool {
    |                                                                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_filters`

warning: unused variable: `source`
   --> src/migration/database.rs:332:30
    |
332 | fn plan_conversation_changes(source: &TableSchema) -> Result<Vec<SchemaChange>, HiveError> {
    |                              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_source`

warning: unused variable: `source`
   --> src/migration/database.rs:359:25
    |
359 | fn plan_message_changes(source: &TableSchema) -> Result<Vec<SchemaChange>, HiveError> {
    |                         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_source`

warning: unused variable: `source`
   --> src/migration/database.rs:386:25
    |
386 | fn plan_profile_changes(source: &TableSchema) -> Result<Vec<SchemaChange>, HiveError> {
    |                         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_source`

warning: unused variable: `source`
   --> src/migration/database.rs:403:25
    |
403 | fn plan_cluster_changes(source: &TableSchema) -> Result<Vec<SchemaChange>, HiveError> {
    |                         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_source`

warning: unused variable: `source`
   --> src/migration/database.rs:420:23
    |
420 | fn plan_usage_changes(source: &TableSchema) -> Result<Vec<SchemaChange>, HiveError> {
    |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_source`

warning: unused variable: `source`
   --> src/migration/database.rs:437:26
    |
437 | fn plan_settings_changes(source: &TableSchema) -> Result<Vec<SchemaChange>, HiveError> {
    |                          ^^^^^^ help: if this is intentional, prefix it with an underscore: `_source`

warning: unused variable: `user_id`
   --> src/security/auth.rs:284:34
    |
284 |     fn generate_challenge(&self, user_id: &str) -> Result<MfaChallenge> {
    |                                  ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: variable does not need to be mutable
   --> src/shell/setup.rs:295:13
    |
295 |         let mut lines: Vec<&str> = content.lines().collect();
    |             ----^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `preserve_config`
  --> src/shell/uninstall.rs:78:58
   |
78 |     pub fn uninstall_from_shell(&self, shell: ShellType, preserve_config: bool) -> Result<()> {
   |                                                          ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_preserve_config`

warning: unused variable: `completion_backup_dir`
   --> src/shell/uninstall.rs:200:19
    |
200 |         if let Ok(completion_backup_dir) = utils::create_directory_safe(&backup_dir.join("completions")) {
    |                   ^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_completion_backup_dir`

Some errors have detailed explanations: E0004, E0107, E0121, E0271, E0277, E0282, E0308, E0369, E0382...
For more information about an error, try `rustc --explain E0004`.
warning: `hive-ai` (lib) generated 455 warnings
error: could not compile `hive-ai` (lib) due to 437 previous errors; 455 warnings emitted
