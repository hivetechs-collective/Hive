name: Build Release DMG

on:
  push:
    branches:
      - 'release/**'
  workflow_dispatch:

  

permissions:
  contents: write

jobs:
  setup:
    name: 00 Setup (probe)
    runs-on: ubuntu-latest
    steps:
      - run: echo ok
  preflight:
    name: 01 Preflight
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      release_ref: ${{ steps.meta.outputs.release_ref }}
    steps:
      - name: Derive metadata
        id: meta
        run: echo "release_ref=${GITHUB_REF#refs/heads/}" >> "$GITHUB_OUTPUT"

  build:
    name: 02 Build (macOS)
    runs-on: macos-latest
    needs: preflight
    if: ${{ false }}
    defaults:
      run:
        working-directory: electron-poc
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
          cache-dependency-path: electron-poc/package-lock.json
      - name: Install build prerequisites
        shell: bash
        run: |
          set -euo pipefail
          export HOMEBREW_NO_AUTO_UPDATE=1
          export HOMEBREW_NO_INSTALL_CLEANUP=1
          if ! command -v ttyd >/dev/null 2>&1; then brew install ttyd; fi
      - name: Install npm dependencies
        run: npm ci
      - name: Rebuild native modules
        run: npx electron-rebuild --force --only sqlite3,better-sqlite3,node-pty
      - name: Verify build requirements
        run: npm run requirements
      - name: Build production DMG (17 phases)
        env:
          CI: true
        run: npm run build:complete
      - name: Upload unsigned DMG
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-dmg
          path: |
            electron-poc/out/make/*.dmg
            electron-poc/out/build-report.json
          if-no-files-found: error
      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: electron-poc/build-logs/**
          if-no-files-found: ignore

  sign:
    name: 03 Sign, Notarize & Guardrails (macOS)
    runs-on: macos-latest
    needs: build
    if: ${{ false }}
    steps:
      - uses: actions/checkout@v4
      - name: Download unsigned DMG
        uses: actions/download-artifact@v4
        with:
          name: unsigned-dmg
          path: signed-input
      - name: Set up signing keychain
        id: setup-signing
        env:
          APPLE_CERT_P12: ${{ secrets.APPLE_CERT_P12 }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          ASC_API_KEY: ${{ secrets.ASC_API_KEY }}
          ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
        run: |
          set -euo pipefail
          KEYCHAIN_PATH="$RUNNER_TEMP/hive-signing.keychain-db"
          KEYCHAIN_PASSWORD=$(uuidgen)
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security list-keychains -d user -s "$KEYCHAIN_PATH" $(security list-keychains -d user | tr -d '"')
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          echo "$APPLE_CERT_P12" | base64 --decode > "$RUNNER_TEMP/apple-cert.p12"
          security import "$RUNNER_TEMP/apple-cert.p12" -k "$KEYCHAIN_PATH" -P "$APPLE_CERT_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
          rm -f "$RUNNER_TEMP/apple-cert.p12"
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security default-keychain -s "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          echo "HIVE_SIGNING_KEYCHAIN=$KEYCHAIN_PATH" >> "$GITHUB_ENV"
          echo "HIVE_SIGNING_KEYCHAIN_PASSWORD=$KEYCHAIN_PASSWORD" >> "$GITHUB_ENV"
          echo "enabled=true" >> "$GITHUB_OUTPUT"
      - name: Sign and notarize DMG
        if: ${{ steps.setup-signing.outputs.enabled == 'true' }}
        env:
          SIGN_ID: "Developer ID Application: HiveTechs Collective LLC (FWBLB27H52)"
          NOTARY_PROFILE: HiveNotaryProfile
        run: |
          set -euo pipefail
          DMG_PATH="$(ls signed-input/*.dmg | head -n 1)"
          if [[ -z "$DMG_PATH" ]]; then echo "No DMG found to sign" >&2; exit 1; fi
          APP_MOUNT_DIR="$(mktemp -d)"; APP_WORK_DIR="$(mktemp -d)"
          trap 'hdiutil detach "$APP_MOUNT_DIR" >/dev/null 2>&1 || true; rm -rf "$APP_MOUNT_DIR" "$APP_WORK_DIR"' EXIT
          hdiutil attach "$DMG_PATH" -mountpoint "$APP_MOUNT_DIR" -nobrowse
          ditto "$APP_MOUNT_DIR/Hive Consensus.app" "$APP_WORK_DIR/Hive Consensus.app"
          hdiutil detach "$APP_MOUNT_DIR"
          scripts/sign-notarize-macos.sh "$APP_WORK_DIR/Hive Consensus.app" "$DMG_PATH"
      - name: Guardrail: Verify helpers
        run: node electron-poc/scripts/verify-dmg-helpers.js "$(ls signed-input/*.dmg | head -n 1)"
      - name: Guardrail: DMG-mounted memory /health
        run: node electron-poc/scripts/test-dmg-memory-service.js "$(ls signed-input/*.dmg | head -n 1)"
      - name: Upload ready DMG
        uses: actions/upload-artifact@v4
        with:
          name: ready-dmg
          path: |
            signed-input/*.dmg
            signed-input/build-report.json
          if-no-files-found: error

  publish:
    name: 04 Publish to R2 (Ubuntu)
    runs-on: ubuntu-latest
    needs: sign
    if: ${{ false }}
    steps:
      - uses: actions/checkout@v4
      - name: Ensure awscli present
        run: |
          if ! command -v aws >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y awscli
          fi
      - name: Download signed DMG
        uses: actions/download-artifact@v4
        with:
          name: ready-dmg
          path: artifacts
      - name: Prepare release files
        run: |
          set -euo pipefail
          mkdir -p release
          DMG_SRC=$(find artifacts -maxdepth 1 -type f -name '*.dmg' | head -n 1)
          if [[ -z "$DMG_SRC" ]]; then echo "No DMG file found in artifacts" >&2; exit 1; fi
          cp "$DMG_SRC" release/Hive-Consensus.dmg
          if [[ -f artifacts/build-report.json ]]; then cp artifacts/build-report.json release/build-report.json; fi
          (cd release && shasum -a 256 Hive-Consensus.dmg > Hive-Consensus.dmg.sha256)
      - name: Upload to R2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          AWS_REGION: auto
          R2_ENDPOINT: https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com
        run: |
          set -euo pipefail
          upload() {
            local source=$1
            local key=$2
            local content_type=${3:-application/octet-stream}
            aws s3 cp "$source" "s3://releases-hivetechs/$key" --endpoint-url "$R2_ENDPOINT" --region "$AWS_REGION" --content-type "$content_type"
          }
          upload release/Hive-Consensus.dmg stable/Hive-Consensus-latest.dmg
          upload release/Hive-Consensus.dmg.sha256 stable/Hive-Consensus-latest.dmg.sha256 text/plain
