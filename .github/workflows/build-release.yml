name: Build Release Binaries

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - 'electron-poc/MASTER_ARCHITECTURE.md'
      - '.github/dependabot.yml'
  workflow_dispatch:

concurrency:
  group: build-release-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  build-macos:
    name: Build macOS Universal Binary
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Homebrew downloads
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            ~/Library/Caches/TemporaryItems
          key: ${{ runner.os }}-brew-release-v1
          restore-keys: |
            ${{ runner.os }}-brew-

      - name: Install macOS OpenSSL dependencies
        run: |
          set -euo pipefail
          install_x86_brew() {
            if [[ ! -x /usr/local/bin/brew ]]; then
              echo "Installing Rosetta Homebrew for x86_64..."
              sudo softwareupdate --install-rosetta --agree-to-license || true
              NONINTERACTIVE=1 arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            fi
          }

          brew update
          brew install openssl@3 pkg-config
          OPENSSL_PREFIX_ARM="$(brew --prefix openssl@3)"
          echo "OPENSSL_DIR_ARM=$OPENSSL_PREFIX_ARM" >> "$GITHUB_ENV"
          echo "OPENSSL_INCLUDE_DIR_ARM=$OPENSSL_PREFIX_ARM/include" >> "$GITHUB_ENV"
          echo "OPENSSL_LIB_DIR_ARM=$OPENSSL_PREFIX_ARM/lib" >> "$GITHUB_ENV"
          echo "PKG_CONFIG_PATH_ARM=$OPENSSL_PREFIX_ARM/lib/pkgconfig" >> "$GITHUB_ENV"
          echo "LIBRARY_PATH_ARM=$OPENSSL_PREFIX_ARM/lib" >> "$GITHUB_ENV"
          echo "LD_LIBRARY_PATH_ARM=$OPENSSL_PREFIX_ARM/lib" >> "$GITHUB_ENV"

          install_x86_brew
          arch -x86_64 /usr/local/bin/brew update
          arch -x86_64 /usr/local/bin/brew install openssl@3 pkg-config
          OPENSSL_PREFIX_X86="$(arch -x86_64 /usr/local/bin/brew --prefix openssl@3)"
          echo "OPENSSL_DIR_X86=$OPENSSL_PREFIX_X86" >> "$GITHUB_ENV"
          echo "OPENSSL_INCLUDE_DIR_X86=$OPENSSL_PREFIX_X86/include" >> "$GITHUB_ENV"
          echo "OPENSSL_LIB_DIR_X86=$OPENSSL_PREFIX_X86/lib" >> "$GITHUB_ENV"
          echo "PKG_CONFIG_PATH_X86=$OPENSSL_PREFIX_X86/lib/pkgconfig" >> "$GITHUB_ENV"
          echo "LIBRARY_PATH_X86=$OPENSSL_PREFIX_X86/lib" >> "$GITHUB_ENV"
          echo "LD_LIBRARY_PATH_X86=$OPENSSL_PREFIX_X86/lib" >> "$GITHUB_ENV"
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> "$GITHUB_ENV"
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin,aarch64-apple-darwin

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-release-
      
      - name: Build Intel binary
        env:
          OPENSSL_DIR: ${{ env.OPENSSL_DIR_X86 }}
          OPENSSL_INCLUDE_DIR: ${{ env.OPENSSL_INCLUDE_DIR_X86 }}
          OPENSSL_LIB_DIR: ${{ env.OPENSSL_LIB_DIR_X86 }}
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH_X86 }}
          PKG_CONFIG_ALLOW_CROSS: ${{ env.PKG_CONFIG_ALLOW_CROSS }}
          LIBRARY_PATH: ${{ env.LIBRARY_PATH_X86 }}
          LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH_X86 }}
        run: cargo build --bin hive-consensus --release --target x86_64-apple-darwin

      - name: Build Apple Silicon binary
        env:
          OPENSSL_DIR: ${{ env.OPENSSL_DIR_ARM }}
          OPENSSL_INCLUDE_DIR: ${{ env.OPENSSL_INCLUDE_DIR_ARM }}
          OPENSSL_LIB_DIR: ${{ env.OPENSSL_LIB_DIR_ARM }}
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH_ARM }}
          LIBRARY_PATH: ${{ env.LIBRARY_PATH_ARM }}
          LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH_ARM }}
        run: cargo build --bin hive-consensus --release --target aarch64-apple-darwin
      
      - name: Create universal binary
        run: |
          mkdir -p dist
          lipo -create \
            target/x86_64-apple-darwin/release/hive-consensus \
            target/aarch64-apple-darwin/release/hive-consensus \
            -output dist/hive-macos-universal
          chmod +x dist/hive-macos-universal
          
      - name: Create macOS app bundle
        run: |
          ./scripts/package-macos.sh
          mv dist/Hive.app dist/Hive-macOS.app
          
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-binaries
          path: |
            dist/hive-macos-universal
            dist/Hive-macOS.app

  create-release:
    name: Create Release and Upload to R2
    needs: [build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare release files
        run: |
          mkdir -p release
          
          # Copy macOS files
          cp artifacts/macos-binaries/hive-macos-universal release/
          cp -r artifacts/macos-binaries/Hive-macOS.app release/
          
          # Generate checksums
          cd release
          sha256sum * > checksums.sha256
          cd ..
          
      - name: Install Wrangler
        run: npm install -g wrangler
        
      - name: Upload to R2
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          # Upload to stable channel
          wrangler r2 object put hivetechs-releases/stable/hive-macos-universal --file=release/hive-macos-universal
          wrangler r2 object put hivetechs-releases/stable/checksums.sha256 --file=release/checksums.sha256
          
          # If this is a tag, also create a versioned release
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            wrangler r2 object put hivetechs-releases/releases/$VERSION/hive-macos-universal --file=release/hive-macos-universal
            wrangler r2 object put hivetechs-releases/releases/$VERSION/checksums.sha256 --file=release/checksums.sha256
          fi
          
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/hive-macos-universal
            release/checksums.sha256
          body: |
            ## Hive IDE Release
            
            ### Installation
            
            **macOS**: Download `hive-macos-universal` and run from terminal
            
            ### Requirements
            - License key from hivetechs.io
            - OpenRouter API key
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
