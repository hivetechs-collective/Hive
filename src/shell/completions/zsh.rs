// Professional Zsh Completions for Hive AI
// Advanced completions with descriptions and context awareness

/// Generate comprehensive zsh completions for Hive AI
pub fn generate_zsh_completions() -> String {
    r#"#compdef hive
# Zsh completion for Hive AI
# Generated by Hive AI Shell Integration
# Professional-grade completions with rich descriptions

_hive() {
    local context state state_descr line
    typeset -A opt_args

    # Main command specification
    _arguments -C \
        '(- *)'{-h,--help}'[Show help information]' \
        '(- *)'{-V,--version}'[Show version information]' \
        '(-v --verbose)'{-v,--verbose}'[Increase verbosity (can be used multiple times)]' \
        '(-q --quiet)'{-q,--quiet}'[Suppress non-essential output]' \
        '--format[Output format]:format:(text json yaml markdown table)' \
        '--no-color[Disable colored output]' \
        '(-c --config)'{-c,--config}'[Configuration file]:file:_files' \
        '1:command:_hive_commands' \
        '*:: :->args' && return 0

    case $state in
        args)
            case $words[1] in
                analyze|a)
                    _hive_analyze_command
                    ;;
                ask|q)
                    _hive_ask_command
                    ;;
                consensus|con)
                    _hive_consensus_command
                    ;;
                plan|p)
                    _hive_plan_command
                    ;;
                execute|exec)
                    _hive_execute_command
                    ;;
                improve|imp)
                    _hive_improve_command
                    ;;
                search|s)
                    _hive_search_command
                    ;;
                memory|mem)
                    _hive_memory_command
                    ;;
                analytics|ana)
                    _hive_analytics_command
                    ;;
                tool|tools)
                    _hive_tool_command
                    ;;
                serve)
                    _hive_serve_command
                    ;;
                index|idx)
                    _hive_index_command
                    ;;
                config|cfg)
                    _hive_config_command
                    ;;
                trust|tr)
                    _hive_trust_command
                    ;;
                hooks|hook)
                    _hive_hooks_command
                    ;;
                interactive|int)
                    _hive_interactive_command
                    ;;
                tui)
                    _hive_tui_command
                    ;;
                status|stat)
                    _hive_status_command
                    ;;
                completion|comp)
                    _hive_completion_command
                    ;;
                self-update|update)
                    _hive_update_command
                    ;;
                shell|sh)
                    _hive_shell_command
                    ;;
                *)
                    _message 'no more arguments'
                    ;;
            esac
            ;;
    esac
}

# Main commands with descriptions
_hive_commands() {
    local -a commands=(
        'analyze:Analyze and understand any repository with AI-powered insights'
        'ask:Ask the AI consensus engine a question with multi-model analysis'
        'consensus:Run comprehensive 4-stage consensus analysis pipeline'
        'plan:Enter planning mode for complex task decomposition and execution'
        'execute:Execute a previously created plan with monitoring and validation'
        'improve:Apply AI-suggested improvements to files with conflict resolution'
        'search:Search for symbols, patterns, and semantic content in codebase'
        'memory:Manage long-term memory, conversations, and knowledge graphs'
        'analytics:Generate comprehensive analytics reports and business intelligence'
        'tool:Execute tools and tool chains with enterprise automation'
        'serve:Start IDE integration servers (LSP, MCP) for real-time assistance'
        'index:Build semantic indices for fast search and code intelligence'
        'config:Manage configuration settings and environment variables'
        'trust:Manage directory trust and security settings with audit trails'
        'hooks:Manage enterprise hooks, workflows, and automation triggers'
        'interactive:Start interactive mode with conversational interface'
        'tui:Launch full TUI interface with VS Code-like experience'
        'status:Show comprehensive system status and health diagnostics'
        'completion:Generate and manage shell completions for all supported shells'
        'self-update:Self-update Hive AI binary with rollback and version management'
        'shell:Manage shell integration and environment setup'
    )
    _describe 'commands' commands
}

# Analyze command completions
_hive_analyze_command() {
    _arguments \
        '(-d --depth)'{-d,--depth}'[Analysis depth level]:depth:(quick standard comprehensive)' \
        '--focus[Focus on specific analysis areas]:focus:(architecture quality security performance dependencies patterns complexity maintainability)' \
        '(-o --output)'{-o,--output}'[Save analysis to file]:file:_files' \
        '--dependencies[Include dependency analysis and vulnerability scanning]' \
        '--recommendations[Generate actionable recommendations for improvements]' \
        '--no-recommendations[Disable recommendation generation]' \
        '--include-tests[Include test file analysis and coverage insights]' \
        '--exclude-patterns[Exclude files matching patterns]:pattern:' \
        '--format[Output format]:format:(text json yaml markdown table html)' \
        '--detailed[Generate detailed analysis with code examples]' \
        '--metrics[Include quantitative code metrics and statistics]' \
        '1:target:_hive_analyze_targets'
}

# Smart target completion for analyze
_hive_analyze_targets() {
    local -a targets
    # Prefer git repositories and common project directories
    targets=($(find . -maxdepth 2 -type d \( -name ".git" -o -name "src" -o -name "lib" -o -name "app" -o -name "packages" \) -exec dirname {} \; 2>/dev/null | sort -u))

    if [[ ${#targets} -eq 0 ]]; then
        _directories
    else
        _alternative \
            'project-dirs:project directories:compadd -a targets' \
            'directories:all directories:_directories'
    fi
}

# Ask command completions
_hive_ask_command() {
    _arguments \
        '(-p --profile)'{-p,--profile}'[Consensus profile for response quality]:profile:(speed balanced cost elite custom)' \
        '--plan[Enable planning mode for complex queries]' \
        '(-c --context)'{-c,--context}'[Include file or directory context]:context:_files' \
        '--max-tokens[Maximum response tokens]:tokens:(1000 2000 4000 8000 16000)' \
        '--temperature[Response creativity level]:temperature:(0.1 0.3 0.5 0.7 0.9)' \
        '--stream[Enable streaming response]:stream:(true false)' \
        '--no-stream[Disable streaming response]' \
        '--model[Specific model to use]:model:_hive_models' \
        '--save[Save conversation to memory]' \
        '--format[Response format]:format:(text markdown json yaml)' \
        '--follow-up[Enable automatic follow-up questions]' \
        '1:question:_hive_question_suggestions'
}

# Model suggestions
_hive_models() {
    local -a models=(
        'gpt-4:OpenAI GPT-4 (highest quality)'
        'gpt-4-turbo:OpenAI GPT-4 Turbo (fast and capable)'
        'claude-3-opus:Anthropic Claude 3 Opus (excellent reasoning)'
        'claude-3-sonnet:Anthropic Claude 3 Sonnet (balanced performance)'
        'gpt-3.5-turbo:OpenAI GPT-3.5 Turbo (fast and cost-effective)'
        'gemini-pro:Google Gemini Pro (multimodal capabilities)'
    )
    _describe 'models' models
}

# Question suggestions based on context
_hive_question_suggestions() {
    local -a suggestions=()

    # Context-aware suggestions
    if [[ -f "Cargo.toml" ]]; then
        suggestions+=("How can I optimize this Rust project?" "What are the security issues in this codebase?" "Suggest performance improvements for this Rust code")
    fi

    if [[ -f "package.json" ]]; then
        suggestions+=("Analyze the dependencies in this Node.js project" "How can I improve the TypeScript code quality?" "What are potential security vulnerabilities?")
    fi

    if [[ -f "requirements.txt" || -f "pyproject.toml" ]]; then
        suggestions+=("Review this Python codebase for best practices" "Suggest optimizations for this Python project" "How can I improve error handling?")
    fi

    if [[ -d ".git" ]]; then
        suggestions+=("Analyze the git history for patterns" "What are the main development trends?" "Review recent commits for quality")
    fi

    # General suggestions
    suggestions+=(
        "Explain this code"
        "How can I improve this?"
        "What are potential issues?"
        "Suggest optimizations"
        "Review for security"
        "Generate documentation"
        "Create tests for this"
        "Refactor this code"
    )

    if [[ ${#suggestions} -gt 0 ]]; then
        _describe 'question suggestions' suggestions
    fi
}

# Consensus command completions
_hive_consensus_command() {
    _arguments \
        '(-p --profile)'{-p,--profile}'[Consensus profile]:profile:(Consensus_Elite Consensus_Balanced Consensus_Speed Consensus_Cost)' \
        '--question[Question for consensus analysis]:question:' \
        '(-o --output)'{-o,--output}'[Save consensus result]:file:_files' \
        '--stream[Enable real-time streaming of consensus stages]' \
        '--stages[Specific stages to run]:stages:(generator refiner validator curator all)' \
        '--detailed[Include detailed reasoning from each stage]' \
        '--format[Output format]:format:(text json yaml markdown)' \
        '--timeout[Maximum processing time]:timeout:(30s 1m 5m 10m 30m)'
}

# Plan command completions
_hive_plan_command() {
    _arguments \
        '--complexity[Task complexity level]:complexity:(simple moderate complex enterprise)' \
        '--timeline[Expected timeline]:timeline:(immediate short-term medium-term long-term)' \
        '--resources[Available resources]:resources:(minimal standard extensive unlimited)' \
        '--dependencies[Include dependency analysis]' \
        '(-o --output)'{-o,--output}'[Save plan to file]:file:_files' \
        '--interactive[Enable interactive planning mode]' \
        '--template[Use planning template]:template:(feature bugfix refactor migration optimization security performance)' \
        '--stakeholders[Include stakeholder analysis]' \
        '--risks[Include risk assessment]' \
        '--milestones[Generate milestone tracking]' \
        '1:task_description:'
}

# Memory command completions
_hive_memory_command() {
    local context state_descr line
    typeset -A opt_args

    _arguments -C \
        '1:subcommand:_hive_memory_subcommands' \
        '*:: :->memory_args'

    case $state in
        memory_args)
            case $words[1] in
                search|s)
                    _arguments \
                        '--limit[Maximum results]:limit:(5 10 20 50 100)' \
                        '--format[Output format]:format:(text table json yaml)' \
                        '--since[Search since date]:date:' \
                        '--before[Search before date]:date:' \
                        '--context[Include context in results]' \
                        '1:search_term:'
                    ;;
                export|exp)
                    _arguments \
                        '--format[Export format]:format:(json yaml sqlite)' \
                        '--compress[Compress export file]' \
                        '--include-embeddings[Include vector embeddings]' \
                        '1:output_file:_files'
                    ;;
                import|imp)
                    _arguments \
                        '--merge[Merge with existing data]' \
                        '--validate[Validate before import]' \
                        '--backup[Create backup before import]' \
                        '1:input_file:_files'
                    ;;
                *)
                    ;;
            esac
            ;;
    esac
}

_hive_memory_subcommands() {
    local -a subcommands=(
        'search:Search conversation history and knowledge base'
        'stats:Show detailed memory usage statistics and analytics'
        'export:Export conversation history and knowledge to file'
        'import:Import conversation history from external source'
        'clear:Clear memory with optional selective deletion'
        'knowledge:Manage knowledge graph and semantic relationships'
        'conversations:List and manage individual conversations'
        'analytics:Generate memory usage analytics and insights'
        'optimize:Optimize memory storage and indexing'
        'vacuum:Clean up and compact memory database'
    )
    _describe 'memory subcommands' subcommands
}

# Trust command completions
_hive_trust_command() {
    local context state_descr line
    typeset -A opt_args

    _arguments -C \
        '1:subcommand:_hive_trust_subcommands' \
        '*:: :->trust_args'

    case $state in
        trust_args)
            case $words[1] in
                add|remove|check)
                    _arguments '1:directory:_directories'
                    ;;
                import|export)
                    _arguments '1:file:_files'
                    ;;
                *)
                    ;;
            esac
            ;;
    esac
}

_hive_trust_subcommands() {
    local -a subcommands=(
        'list:List all trusted directories with security levels'
        'add:Add a directory to trusted paths with permission levels'
        'remove:Remove a directory from trusted paths'
        'clear:Clear all trusted paths (requires confirmation)'
        'check:Check trust status and security assessment of directory'
        'security:Manage security configuration and policies'
        'import:Import trust settings from file with validation'
        'export:Export trust settings to file for backup'
        'status:Show comprehensive trust system status'
        'audit:Generate security audit report for trust system'
    )
    _describe 'trust subcommands' subcommands
}

# Shell command completions
_hive_shell_command() {
    local context state_descr line
    typeset -A opt_args

    _arguments -C \
        '1:subcommand:_hive_shell_subcommands' \
        '*:: :->shell_args'

    case $state in
        shell_args)
            case $words[1] in
                install|completions|uninstall)
                    _arguments \
                        '--force[Force installation/removal]' \
                        '1:shell:(bash zsh fish powershell elvish all)'
                    ;;
                uninstall)
                    _arguments \
                        '--preserve-config[Preserve configuration files]' \
                        '1:shell:(bash zsh fish powershell elvish all)'
                    ;;
                *)
                    ;;
            esac
            ;;
    esac
}

_hive_shell_subcommands() {
    local -a subcommands=(
        'install:Install shell integration for specified shell'
        'setup:Setup PATH and environment variables automatically'
        'status:Show shell integration status for all shells'
        'completions:Generate and install completion files'
        'uninstall:Remove shell integration with optional config preservation'
    )
    _describe 'shell subcommands' subcommands
}

# Completion command completions
_hive_completion_command() {
    _arguments \
        '(-o --output)'{-o,--output}'[Output file for completion script]:file:_files' \
        '--install[Install completions for current shell]' \
        '--shell[Target shell]:shell:(bash zsh fish powershell elvish)' \
        '1:shell_type:(bash zsh fish powershell elvish install status)'
}

# Config command completions
_hive_config_command() {
    local context state_descr line
    typeset -A opt_args

    _arguments -C \
        '1:subcommand:_hive_config_subcommands' \
        '*:: :->config_args'

    case $state in
        config_args)
            case $words[1] in
                set)
                    _arguments \
                        '1:key:_hive_config_keys' \
                        '2:value:'
                    ;;
                get)
                    _arguments '1:key:_hive_config_keys'
                    ;;
                export|import)
                    _arguments '1:file:_files'
                    ;;
                *)
                    ;;
            esac
            ;;
    esac
}

_hive_config_subcommands() {
    local -a subcommands=(
        'show:Show current configuration with security masking'
        'set:Set a configuration value with validation'
        'get:Get a specific configuration value'
        'validate:Validate configuration against schema'
        'reset:Reset configuration to defaults (requires confirmation)'
        'edit:Edit configuration in default editor with syntax highlighting'
        'export:Export configuration to file for backup'
        'import:Import configuration from file with validation'
        'list:List all available configuration keys'
    )
    _describe 'config subcommands' subcommands
}

_hive_config_keys() {
    local -a keys=(
        'openrouter.api_key:OpenRouter API key for model access'
        'cloudflare.d1_id:Cloudflare D1 database identifier'
        'cloudflare.gateway_url:Cloudflare gateway URL for sync'
        'default_profile:Default consensus profile for operations'
        'logging.level:Logging verbosity level'
        'logging.file:Log file path'
        'cache.enabled:Enable caching for improved performance'
        'cache.max_size:Maximum cache size in MB'
        'security.trust_mode:Trust mode for directory access'
        'tui.theme:TUI color theme'
        'tui.auto_launch:Auto-launch TUI when appropriate'
        'analytics.enabled:Enable analytics collection'
        'hooks.enabled:Enable enterprise hooks system'
    )
    _describe 'config keys' keys
}

# Advanced directory completion with git awareness
_hive_smart_directories() {
    local -a dirs
    dirs=($(find . -maxdepth 2 -type d -name ".git" -exec dirname {} \; 2>/dev/null | head -20))

    if [[ ${#dirs} -gt 0 ]]; then
        _alternative \
            'git-repos:git repositories:compadd -d dirs -a dirs' \
            'directories:all directories:_directories'
    else
        _directories
    fi
}

# Context-aware file completion
_hive_smart_files() {
    local exts=()

    # Suggest relevant files based on project type
    if [[ -f "Cargo.toml" ]]; then
        exts+=("rs")
    fi
    if [[ -f "package.json" ]]; then
        exts+=("ts" "js" "tsx" "jsx")
    fi
    if [[ -f "requirements.txt" || -f "pyproject.toml" ]]; then
        exts+=("py")
    fi
    if [[ -f "go.mod" ]]; then
        exts+=("go")
    fi

    if [[ ${#exts} -gt 0 ]]; then
        local pattern=""
        for ext in "${exts[@]}"; do
            pattern="${pattern:+$pattern|}*.${ext}"
        done
        _files -g "($pattern)"
    else
        _files
    fi
}

# Register completion function
compdef _hive hive

# Set up aliases with descriptions
alias ha='hive analyze'
alias hq='hive ask'
alias hp='hive plan'
alias hs='hive search'
alias hm='hive memory search'
alias ht='hive trust check .'
alias hc='hive config show'
alias hst='hive status'
alias htui='hive tui'

# Advanced aliases for power users
alias hive-quick='hive ask --profile=speed'
alias hive-best='hive ask --profile=elite'
alias hive-cheap='hive ask --profile=cost'
alias hive-here='hive analyze . --depth=standard'
alias hive-full='hive analyze . --depth=comprehensive --dependencies --recommendations'
alias hive-check='hive trust check . && hive status'

# Zsh-specific enhancements
if [[ -n "$ZSH_VERSION" ]]; then
    # Auto-completion for aliases
    compdef _hive ha
    compdef _hive hq
    compdef _hive hp
    compdef _hive hs
    compdef _hive hm
    compdef _hive ht

    # Zsh hooks for context detection
    autoload -Uz add-zsh-hook

    _hive_detect_context() {
        local context=""

        if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
            context="git"
        fi

        [[ -f "Cargo.toml" ]] && context="$context rust"
        [[ -f "package.json" ]] && context="$context javascript"
        [[ -f "requirements.txt" || -f "pyproject.toml" ]] && context="$context python"
        [[ -f "go.mod" ]] && context="$context go"

        export HIVE_CONTEXT="$context"
    }

    add-zsh-hook chpwd _hive_detect_context
    _hive_detect_context  # Initial detection

    # Smart command suggestions
    _hive_suggest_commands() {
        if [[ -n "$HIVE_CONTEXT" ]]; then
            case "$HIVE_CONTEXT" in
                *rust*)
                    echo "💡 Rust project detected. Try: hive analyze . --focus=performance"
                    ;;
                *javascript*)
                    echo "💡 JavaScript project detected. Try: hive analyze . --focus=security"
                    ;;
                *python*)
                    echo "💡 Python project detected. Try: hive analyze . --include-tests"
                    ;;
            esac
        fi
    }

    # Show suggestions on directory change (occasionally)
    _hive_maybe_suggest() {
        # Show suggestions 20% of the time
        if (( RANDOM % 5 == 0 )); then
            _hive_suggest_commands
        fi
    }

    add-zsh-hook chpwd _hive_maybe_suggest
fi

# Help message
echo "✅ Hive AI Zsh completions loaded successfully"
echo "💡 Enhanced features: context-aware completions, smart suggestions, rich descriptions"
echo "🚀 Try: hive <TAB> or use aliases: ha, hq, hp, hs, hm, ht"
echo "🔧 Advanced: tab completion shows descriptions and context-aware suggestions"
"#.to_string()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_zsh_completions_generation() {
        let completions = generate_zsh_completions();

        // Basic structure checks
        assert!(completions.contains("#compdef hive"));
        assert!(completions.contains("_hive()"));
        assert!(completions.contains("compdef _hive hive"));

        // Check for command completions
        assert!(completions.contains("_hive_commands"));
        assert!(completions.contains("analyze:Analyze and understand"));

        // Check for subcommand completions
        assert!(completions.contains("_hive_analyze_command"));
        assert!(completions.contains("_hive_ask_command"));
        assert!(completions.contains("_hive_memory_command"));

        // Check for aliases
        assert!(completions.contains("alias ha='hive analyze'"));
        assert!(completions.contains("alias hq='hive ask'"));

        // Check for zsh-specific features
        assert!(completions.contains("add-zsh-hook"));
        assert!(completions.contains("_hive_detect_context"));
    }

    #[test]
    fn test_zsh_completions_context_awareness() {
        let completions = generate_zsh_completions();

        // Should contain context detection logic
        assert!(completions.contains("HIVE_CONTEXT"));
        assert!(completions.contains("git rev-parse"));
        assert!(completions.contains("Cargo.toml"));
        assert!(completions.contains("package.json"));

        // Should contain smart suggestions
        assert!(completions.contains("_hive_suggest_commands"));
        assert!(completions.contains("Rust project detected"));
    }
}
