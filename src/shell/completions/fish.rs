// Professional Fish Completions for Hive AI
// Native fish completion syntax with rich descriptions

/// Generate comprehensive fish completions for Hive AI
pub fn generate_fish_completions() -> String {
    r#"# Fish completion for Hive AI
# Generated by Hive AI Shell Integration
# Native fish completions with rich descriptions and context awareness

# Remove file completion by default (we'll add it where appropriate)
complete -c hive -f

# Global options available for all commands
complete -c hive -s h -l help -d "Show help information"
complete -c hive -s V -l version -d "Show version information"
complete -c hive -s v -l verbose -d "Increase verbosity (can be used multiple times)"
complete -c hive -s q -l quiet -d "Suppress non-essential output"
complete -c hive -l format -d "Output format" -x -a "text json yaml markdown table html"
complete -c hive -l no-color -d "Disable colored output"
complete -c hive -s c -l config -d "Configuration file" -r

# Main commands with rich descriptions
complete -c hive -n "__fish_use_subcommand" -a "analyze" -d "üîç Analyze and understand any repository with AI-powered insights"
complete -c hive -n "__fish_use_subcommand" -a "ask" -d "ü§ñ Ask the AI consensus engine a question with multi-model analysis"
complete -c hive -n "__fish_use_subcommand" -a "consensus" -d "üéØ Run comprehensive 4-stage consensus analysis pipeline"
complete -c hive -n "__fish_use_subcommand" -a "plan" -d "üìã Enter planning mode for complex task decomposition and execution"
complete -c hive -n "__fish_use_subcommand" -a "execute" -d "‚ö° Execute a previously created plan with monitoring and validation"
complete -c hive -n "__fish_use_subcommand" -a "improve" -d "‚ú® Apply AI-suggested improvements to files with conflict resolution"
complete -c hive -n "__fish_use_subcommand" -a "search" -d "üîé Search for symbols, patterns, and semantic content in codebase"
complete -c hive -n "__fish_use_subcommand" -a "memory" -d "üß† Manage long-term memory, conversations, and knowledge graphs"
complete -c hive -n "__fish_use_subcommand" -a "analytics" -d "üìä Generate comprehensive analytics reports and business intelligence"
complete -c hive -n "__fish_use_subcommand" -a "tool" -d "üõ†Ô∏è  Execute tools and tool chains with enterprise automation"
complete -c hive -n "__fish_use_subcommand" -a "serve" -d "üåê Start IDE integration servers (LSP, MCP) for real-time assistance"
complete -c hive -n "__fish_use_subcommand" -a "index" -d "üìö Build semantic indices for fast search and code intelligence"
complete -c hive -n "__fish_use_subcommand" -a "config" -d "‚öôÔ∏è  Manage configuration settings and environment variables"
complete -c hive -n "__fish_use_subcommand" -a "trust" -d "üîí Manage directory trust and security settings with audit trails"
complete -c hive -n "__fish_use_subcommand" -a "hooks" -d "ü™ù Manage enterprise hooks, workflows, and automation triggers"
complete -c hive -n "__fish_use_subcommand" -a "interactive" -d "üí¨ Start interactive mode with conversational interface"
complete -c hive -n "__fish_use_subcommand" -a "tui" -d "üñ•Ô∏è  Launch full TUI interface with VS Code-like experience"
complete -c hive -n "__fish_use_subcommand" -a "status" -d "üìà Show comprehensive system status and health diagnostics"
complete -c hive -n "__fish_use_subcommand" -a "completion" -d "üêö Generate and manage shell completions for all supported shells"
complete -c hive -n "__fish_use_subcommand" -a "self-update" -d "üîÑ Self-update Hive AI binary with rollback and version management"
complete -c hive -n "__fish_use_subcommand" -a "shell" -d "üîß Manage shell integration and environment setup"

# Analyze command options
complete -c hive -n "__fish_seen_subcommand_from analyze" -s d -l depth -d "Analysis depth level" -x -a "quick standard comprehensive"
complete -c hive -n "__fish_seen_subcommand_from analyze" -l focus -d "Focus on specific analysis areas" -x -a "architecture quality security performance dependencies patterns complexity maintainability"
complete -c hive -n "__fish_seen_subcommand_from analyze" -s o -l output -d "Save analysis to file" -r
complete -c hive -n "__fish_seen_subcommand_from analyze" -l dependencies -d "Include dependency analysis and vulnerability scanning"
complete -c hive -n "__fish_seen_subcommand_from analyze" -l recommendations -d "Generate actionable recommendations for improvements"
complete -c hive -n "__fish_seen_subcommand_from analyze" -l no-recommendations -d "Disable recommendation generation"
complete -c hive -n "__fish_seen_subcommand_from analyze" -l include-tests -d "Include test file analysis and coverage insights"
complete -c hive -n "__fish_seen_subcommand_from analyze" -l exclude-patterns -d "Exclude files matching patterns" -x
complete -c hive -n "__fish_seen_subcommand_from analyze" -l detailed -d "Generate detailed analysis with code examples"
complete -c hive -n "__fish_seen_subcommand_from analyze" -l metrics -d "Include quantitative code metrics and statistics"

# Ask command options
complete -c hive -n "__fish_seen_subcommand_from ask" -s p -l profile -d "Consensus profile for response quality" -x -a "speed balanced cost elite custom"
complete -c hive -n "__fish_seen_subcommand_from ask" -l plan -d "Enable planning mode for complex queries"
complete -c hive -n "__fish_seen_subcommand_from ask" -s c -l context -d "Include file or directory context" -r
complete -c hive -n "__fish_seen_subcommand_from ask" -l max-tokens -d "Maximum response tokens" -x -a "1000 2000 4000 8000 16000"
complete -c hive -n "__fish_seen_subcommand_from ask" -l temperature -d "Response creativity level (0.1-0.9)" -x -a "0.1 0.3 0.5 0.7 0.9"
complete -c hive -n "__fish_seen_subcommand_from ask" -l stream -d "Enable streaming response" -x -a "true false"
complete -c hive -n "__fish_seen_subcommand_from ask" -l no-stream -d "Disable streaming response"
complete -c hive -n "__fish_seen_subcommand_from ask" -l model -d "Specific model to use" -x -a "gpt-4 gpt-4-turbo claude-3-opus claude-3-sonnet gpt-3.5-turbo gemini-pro"
complete -c hive -n "__fish_seen_subcommand_from ask" -l save -d "Save conversation to memory"
complete -c hive -n "__fish_seen_subcommand_from ask" -l follow-up -d "Enable automatic follow-up questions"

# Consensus command options
complete -c hive -n "__fish_seen_subcommand_from consensus" -s p -l profile -d "Consensus profile" -x -a "Consensus_Elite Consensus_Balanced Consensus_Speed Consensus_Cost"
complete -c hive -n "__fish_seen_subcommand_from consensus" -l question -d "Question for consensus analysis" -x
complete -c hive -n "__fish_seen_subcommand_from consensus" -s o -l output -d "Save consensus result" -r
complete -c hive -n "__fish_seen_subcommand_from consensus" -l stream -d "Enable real-time streaming of consensus stages"
complete -c hive -n "__fish_seen_subcommand_from consensus" -l stages -d "Specific stages to run" -x -a "generator refiner validator curator all"
complete -c hive -n "__fish_seen_subcommand_from consensus" -l detailed -d "Include detailed reasoning from each stage"
complete -c hive -n "__fish_seen_subcommand_from consensus" -l timeout -d "Maximum processing time" -x -a "30s 1m 5m 10m 30m"

# Plan command options
complete -c hive -n "__fish_seen_subcommand_from plan" -l complexity -d "Task complexity level" -x -a "simple moderate complex enterprise"
complete -c hive -n "__fish_seen_subcommand_from plan" -l timeline -d "Expected timeline" -x -a "immediate short-term medium-term long-term"
complete -c hive -n "__fish_seen_subcommand_from plan" -l resources -d "Available resources" -x -a "minimal standard extensive unlimited"
complete -c hive -n "__fish_seen_subcommand_from plan" -l dependencies -d "Include dependency analysis"
complete -c hive -n "__fish_seen_subcommand_from plan" -s o -l output -d "Save plan to file" -r
complete -c hive -n "__fish_seen_subcommand_from plan" -l interactive -d "Enable interactive planning mode"
complete -c hive -n "__fish_seen_subcommand_from plan" -l template -d "Use planning template" -x -a "feature bugfix refactor migration optimization security performance"
complete -c hive -n "__fish_seen_subcommand_from plan" -l stakeholders -d "Include stakeholder analysis"
complete -c hive -n "__fish_seen_subcommand_from plan" -l risks -d "Include risk assessment"
complete -c hive -n "__fish_seen_subcommand_from plan" -l milestones -d "Generate milestone tracking"

# Execute command options
complete -c hive -n "__fish_seen_subcommand_from execute" -l plan -d "Plan file to execute" -r
complete -c hive -n "__fish_seen_subcommand_from execute" -l dry-run -d "Show what would be executed without running"
complete -c hive -n "__fish_seen_subcommand_from execute" -l step -d "Execute specific step" -x
complete -c hive -n "__fish_seen_subcommand_from execute" -l interactive -d "Prompt before each step"
complete -c hive -n "__fish_seen_subcommand_from execute" -l rollback -d "Enable automatic rollback on failure"
complete -c hive -n "__fish_seen_subcommand_from execute" -l monitor -d "Enable execution monitoring"

# Improve command options
complete -c hive -n "__fish_seen_subcommand_from improve" -l target -d "Target files or directories" -r
complete -c hive -n "__fish_seen_subcommand_from improve" -l focus -d "Improvement focus areas" -x -a "performance security readability maintainability efficiency"
complete -c hive -n "__fish_seen_subcommand_from improve" -l preview -d "Show improvements without applying"
complete -c hive -n "__fish_seen_subcommand_from improve" -l backup -d "Create backup before applying changes"
complete -c hive -n "__fish_seen_subcommand_from improve" -l interactive -d "Review each improvement before applying"
complete -c hive -n "__fish_seen_subcommand_from improve" -l confidence -d "Minimum confidence threshold" -x -a "low medium high"

# Search command options
complete -c hive -n "__fish_seen_subcommand_from search" -l pattern -d "Search pattern or regex" -x
complete -c hive -n "__fish_seen_subcommand_from search" -l type -d "Search type" -x -a "symbol function class variable semantic content"
complete -c hive -n "__fish_seen_subcommand_from search" -l scope -d "Search scope" -x -a "current project workspace global"
complete -c hive -n "__fish_seen_subcommand_from search" -l limit -d "Maximum results" -x -a "10 25 50 100"
complete -c hive -n "__fish_seen_subcommand_from search" -l context -d "Include surrounding context lines" -x

# Memory subcommands
complete -c hive -n "__fish_seen_subcommand_from memory" -a "search" -d "üîç Search conversation history and knowledge base"
complete -c hive -n "__fish_seen_subcommand_from memory" -a "stats" -d "üìä Show detailed memory usage statistics and analytics"
complete -c hive -n "__fish_seen_subcommand_from memory" -a "export" -d "üì§ Export conversation history and knowledge to file"
complete -c hive -n "__fish_seen_subcommand_from memory" -a "import" -d "üì• Import conversation history from external source"
complete -c hive -n "__fish_seen_subcommand_from memory" -a "clear" -d "üóëÔ∏è  Clear memory with optional selective deletion"
complete -c hive -n "__fish_seen_subcommand_from memory" -a "knowledge" -d "üß† Manage knowledge graph and semantic relationships"
complete -c hive -n "__fish_seen_subcommand_from memory" -a "conversations" -d "üí¨ List and manage individual conversations"
complete -c hive -n "__fish_seen_subcommand_from memory" -a "analytics" -d "üìà Generate memory usage analytics and insights"
complete -c hive -n "__fish_seen_subcommand_from memory" -a "optimize" -d "‚ö° Optimize memory storage and indexing"
complete -c hive -n "__fish_seen_subcommand_from memory" -a "vacuum" -d "üßπ Clean up and compact memory database"

# Memory search options
complete -c hive -n "__fish_seen_subcommand_from memory; and __fish_seen_subcommand_from search" -l limit -d "Maximum results" -x -a "5 10 20 50 100"
complete -c hive -n "__fish_seen_subcommand_from memory; and __fish_seen_subcommand_from search" -l since -d "Search since date" -x
complete -c hive -n "__fish_seen_subcommand_from memory; and __fish_seen_subcommand_from search" -l before -d "Search before date" -x
complete -c hive -n "__fish_seen_subcommand_from memory; and __fish_seen_subcommand_from search" -l context -d "Include context in results"

# Memory export options
complete -c hive -n "__fish_seen_subcommand_from memory; and __fish_seen_subcommand_from export" -l format -d "Export format" -x -a "json yaml sqlite"
complete -c hive -n "__fish_seen_subcommand_from memory; and __fish_seen_subcommand_from export" -l compress -d "Compress export file"
complete -c hive -n "__fish_seen_subcommand_from memory; and __fish_seen_subcommand_from export" -l include-embeddings -d "Include vector embeddings"

# Memory import options
complete -c hive -n "__fish_seen_subcommand_from memory; and __fish_seen_subcommand_from import" -l merge -d "Merge with existing data"
complete -c hive -n "__fish_seen_subcommand_from memory; and __fish_seen_subcommand_from import" -l validate -d "Validate before import"
complete -c hive -n "__fish_seen_subcommand_from memory; and __fish_seen_subcommand_from import" -l backup -d "Create backup before import"

# Analytics subcommands
complete -c hive -n "__fish_seen_subcommand_from analytics" -a "usage" -d "üìä Usage analytics and patterns"
complete -c hive -n "__fish_seen_subcommand_from analytics" -a "performance" -d "‚ö° Performance metrics and benchmarks"
complete -c hive -n "__fish_seen_subcommand_from analytics" -a "cost" -d "üí∞ Cost analysis and optimization"
complete -c hive -n "__fish_seen_subcommand_from analytics" -a "quality" -d "‚ú® Code quality metrics and trends"
complete -c hive -n "__fish_seen_subcommand_from analytics" -a "report" -d "üìã Generate comprehensive reports"
complete -c hive -n "__fish_seen_subcommand_from analytics" -a "trends" -d "üìà Trend analysis and predictions"
complete -c hive -n "__fish_seen_subcommand_from analytics" -a "dashboard" -d "üñ•Ô∏è  Interactive analytics dashboard"
complete -c hive -n "__fish_seen_subcommand_from analytics" -a "export" -d "üì§ Export analytics data"

# Config subcommands
complete -c hive -n "__fish_seen_subcommand_from config" -a "show" -d "üìÑ Show current configuration with security masking"
complete -c hive -n "__fish_seen_subcommand_from config" -a "set" -d "‚úèÔ∏è  Set a configuration value with validation"
complete -c hive -n "__fish_seen_subcommand_from config" -a "get" -d "üîç Get a specific configuration value"
complete -c hive -n "__fish_seen_subcommand_from config" -a "validate" -d "‚úÖ Validate configuration against schema"
complete -c hive -n "__fish_seen_subcommand_from config" -a "reset" -d "üîÑ Reset configuration to defaults (requires confirmation)"
complete -c hive -n "__fish_seen_subcommand_from config" -a "edit" -d "‚úèÔ∏è  Edit configuration in default editor with syntax highlighting"
complete -c hive -n "__fish_seen_subcommand_from config" -a "export" -d "üì§ Export configuration to file for backup"
complete -c hive -n "__fish_seen_subcommand_from config" -a "import" -d "üì• Import configuration from file with validation"
complete -c hive -n "__fish_seen_subcommand_from config" -a "list" -d "üìã List all available configuration keys"

# Config key completions for set/get commands
function __fish_hive_config_keys
    echo -e "openrouter.api_key\tOpenRouter API key for model access"
    echo -e "cloudflare.d1_id\tCloudflare D1 database identifier"
    echo -e "cloudflare.gateway_url\tCloudflare gateway URL for sync"
    echo -e "default_profile\tDefault consensus profile for operations"
    echo -e "logging.level\tLogging verbosity level"
    echo -e "logging.file\tLog file path"
    echo -e "cache.enabled\tEnable caching for improved performance"
    echo -e "cache.max_size\tMaximum cache size in MB"
    echo -e "security.trust_mode\tTrust mode for directory access"
    echo -e "tui.theme\tTUI color theme"
    echo -e "tui.auto_launch\tAuto-launch TUI when appropriate"
    echo -e "analytics.enabled\tEnable analytics collection"
    echo -e "hooks.enabled\tEnable enterprise hooks system"
end

complete -c hive -n "__fish_seen_subcommand_from config; and __fish_seen_subcommand_from set" -a "(__fish_hive_config_keys)"
complete -c hive -n "__fish_seen_subcommand_from config; and __fish_seen_subcommand_from get" -a "(__fish_hive_config_keys)"

# Trust subcommands
complete -c hive -n "__fish_seen_subcommand_from trust" -a "list" -d "üìã List all trusted directories with security levels"
complete -c hive -n "__fish_seen_subcommand_from trust" -a "add" -d "‚ûï Add a directory to trusted paths with permission levels"
complete -c hive -n "__fish_seen_subcommand_from trust" -a "remove" -d "‚ûñ Remove a directory from trusted paths"
complete -c hive -n "__fish_seen_subcommand_from trust" -a "clear" -d "üóëÔ∏è  Clear all trusted paths (requires confirmation)"
complete -c hive -n "__fish_seen_subcommand_from trust" -a "check" -d "üîç Check trust status and security assessment of directory"
complete -c hive -n "__fish_seen_subcommand_from trust" -a "security" -d "üîí Manage security configuration and policies"
complete -c hive -n "__fish_seen_subcommand_from trust" -a "import" -d "üì• Import trust settings from file with validation"
complete -c hive -n "__fish_seen_subcommand_from trust" -a "export" -d "üì§ Export trust settings to file for backup"
complete -c hive -n "__fish_seen_subcommand_from trust" -a "status" -d "üìä Show comprehensive trust system status"
complete -c hive -n "__fish_seen_subcommand_from trust" -a "audit" -d "üîç Generate security audit report for trust system"

# Hooks subcommands
complete -c hive -n "__fish_seen_subcommand_from hooks" -a "list" -d "üìã List all configured hooks and their status"
complete -c hive -n "__fish_seen_subcommand_from hooks" -a "add" -d "‚ûï Add a new hook with configuration"
complete -c hive -n "__fish_seen_subcommand_from hooks" -a "remove" -d "‚ûñ Remove an existing hook"
complete -c hive -n "__fish_seen_subcommand_from hooks" -a "toggle" -d "üîÑ Enable or disable a hook"
complete -c hive -n "__fish_seen_subcommand_from hooks" -a "test" -d "üß™ Test a hook configuration"
complete -c hive -n "__fish_seen_subcommand_from hooks" -a "validate" -d "‚úÖ Validate hook configurations"
complete -c hive -n "__fish_seen_subcommand_from hooks" -a "history" -d "üìú Show hook execution history"
complete -c hive -n "__fish_seen_subcommand_from hooks" -a "config" -d "‚öôÔ∏è  Manage hook configurations"
complete -c hive -n "__fish_seen_subcommand_from hooks" -a "approval" -d "‚úã Manage approval workflows"
complete -c hive -n "__fish_seen_subcommand_from hooks" -a "workflow" -d "üîÑ Manage workflow automation"

# Shell subcommands
complete -c hive -n "__fish_seen_subcommand_from shell" -a "install" -d "üì¶ Install shell integration for specified shell"
complete -c hive -n "__fish_seen_subcommand_from shell" -a "setup" -d "‚öôÔ∏è  Setup PATH and environment variables automatically"
complete -c hive -n "__fish_seen_subcommand_from shell" -a "status" -d "üìä Show shell integration status for all shells"
complete -c hive -n "__fish_seen_subcommand_from shell" -a "completions" -d "üêö Generate and install completion files"
complete -c hive -n "__fish_seen_subcommand_from shell" -a "uninstall" -d "üóëÔ∏è  Remove shell integration with optional config preservation"

# Shell type completions
complete -c hive -n "__fish_seen_subcommand_from shell; and __fish_seen_subcommand_from install" -a "bash zsh fish powershell elvish all" -d "Shell type"
complete -c hive -n "__fish_seen_subcommand_from shell; and __fish_seen_subcommand_from completions" -a "bash zsh fish powershell elvish all" -d "Shell type"
complete -c hive -n "__fish_seen_subcommand_from shell; and __fish_seen_subcommand_from uninstall" -a "bash zsh fish powershell elvish all" -d "Shell type"

# Shell install/uninstall options
complete -c hive -n "__fish_seen_subcommand_from shell; and __fish_seen_subcommand_from install" -l force -d "Force installation"
complete -c hive -n "__fish_seen_subcommand_from shell; and __fish_seen_subcommand_from uninstall" -l preserve-config -d "Preserve configuration files"

# Completion command options
complete -c hive -n "__fish_seen_subcommand_from completion" -s o -l output -d "Output file for completion script" -r
complete -c hive -n "__fish_seen_subcommand_from completion" -l install -d "Install completions for current shell"
complete -c hive -n "__fish_seen_subcommand_from completion" -l shell -d "Target shell" -x -a "bash zsh fish powershell elvish"
complete -c hive -n "__fish_seen_subcommand_from completion" -a "bash zsh fish powershell elvish install status" -d "Shell type or action"

# Self-update command options
complete -c hive -n "__fish_seen_subcommand_from self-update" -l check-only -d "Check for updates only"
complete -c hive -n "__fish_seen_subcommand_from self-update" -l force -d "Force update"
complete -c hive -n "__fish_seen_subcommand_from self-update" -l version -d "Update to specific version" -x
complete -c hive -n "__fish_seen_subcommand_from self-update" -l rollback -d "Rollback to previous version"
complete -c hive -n "__fish_seen_subcommand_from self-update" -l list-versions -d "Show available versions"
complete -c hive -n "__fish_seen_subcommand_from self-update" -l channel -d "Update channel" -x -a "stable beta nightly"

# TUI command options
complete -c hive -n "__fish_seen_subcommand_from tui" -l theme -d "TUI color theme" -x -a "dark light auto"
complete -c hive -n "__fish_seen_subcommand_from tui" -l layout -d "TUI layout configuration" -x -a "default compact wide"
complete -c hive -n "__fish_seen_subcommand_from tui" -l no-consensus -d "Start without consensus panel"
complete -c hive -n "__fish_seen_subcommand_from tui" -l workspace -d "Start in specific workspace" -r

# Status command options
complete -c hive -n "__fish_seen_subcommand_from status" -l detailed -d "Show detailed status information"
complete -c hive -n "__fish_seen_subcommand_from status" -l json -d "Output status as JSON"
complete -c hive -n "__fish_seen_subcommand_from status" -l check-updates -d "Check for available updates"
complete -c hive -n "__fish_seen_subcommand_from status" -l health -d "Run comprehensive health checks"

# Context-aware suggestions based on current directory
function __fish_hive_suggest_based_on_context
    set -l context_suggestions

    # Check for various project types and suggest relevant commands
    if test -f Cargo.toml
        echo -e "analyze\tü¶Ä Analyze this Rust project"
        echo -e "ask 'How can I optimize this Rust code?'\tüí° Get Rust-specific optimization suggestions"
    end

    if test -f package.json
        echo -e "analyze\tüì¶ Analyze this Node.js/JavaScript project"
        echo -e "ask 'Review this JavaScript code for security issues'\tüîí Security analysis"
    end

    if test -f requirements.txt -o -f pyproject.toml
        echo -e "analyze\tüêç Analyze this Python project"
        echo -e "ask 'Suggest Python best practices for this code'\t‚ú® Python improvements"
    end

    if test -f go.mod
        echo -e "analyze\tüêπ Analyze this Go project"
        echo -e "ask 'How can I improve Go code performance?'\t‚ö° Go optimization"
    end

    if test -d .git
        echo -e "trust check .\tüîç Check git repository trust status"
        echo -e "ask 'Analyze git history for patterns'\tüìä Git analysis"
    end
end

# Smart directory completion for analyze command
function __fish_hive_analyze_directories
    # Prioritize project directories
    for dir in src lib app packages components
        if test -d $dir
            echo $dir
        end
    end

    # Include git repositories
    find . -maxdepth 2 -name ".git" -type d | sed 's|/\.git$||' | sed 's|^\./||'
end

complete -c hive -n "__fish_seen_subcommand_from analyze" -a "(__fish_hive_analyze_directories)" -d "Project directory"

# Smart file completion for improve command
function __fish_hive_improve_files
    # Suggest source files based on project type
    if test -f Cargo.toml
        find . -name "*.rs" -not -path "./target/*" | head -20
    else if test -f package.json
        find . -name "*.ts" -o -name "*.js" -o -name "*.tsx" -o -name "*.jsx" | grep -v node_modules | head -20
    else if test -f requirements.txt -o -f pyproject.toml
        find . -name "*.py" | head -20
    else if test -f go.mod
        find . -name "*.go" | head -20
    else
        # Generic source files
        find . \( -name "*.rs" -o -name "*.ts" -o -name "*.js" -o -name "*.py" -o -name "*.go" \) | head -20
    end
end

complete -c hive -n "__fish_seen_subcommand_from improve" -a "(__fish_hive_improve_files)" -d "Source file"

# Professional abbreviations (Fish-specific feature)
abbr -a ha 'hive analyze'
abbr -a hq 'hive ask'
abbr -a hp 'hive plan'
abbr -a hs 'hive search'
abbr -a hm 'hive memory search'
abbr -a ht 'hive trust check .'
abbr -a hc 'hive config show'
abbr -a hst 'hive status'
abbr -a htui 'hive tui'

# Advanced abbreviations for power users
abbr -a hive-quick 'hive ask --profile=speed'
abbr -a hive-best 'hive ask --profile=elite'
abbr -a hive-cheap 'hive ask --profile=cost'
abbr -a hive-here 'hive analyze . --depth=standard'
abbr -a hive-full 'hive analyze . --depth=comprehensive --dependencies --recommendations'
abbr -a hive-check 'hive trust check . && hive status'

# Fish-specific functions for enhanced workflow
function hive_quick_ask -d "üöÄ Quick AI question with speed profile"
    if test (count $argv) -eq 0
        echo "Usage: hive_quick_ask <question>"
        return 1
    end
    hive ask $argv --profile=speed --stream
end

function hive_analyze_current -d "üîç Analyze current directory with specified depth"
    set -l depth standard
    if test (count $argv) -gt 0
        set depth $argv[1]
    end
    hive analyze . --depth=$depth --recommendations --format=text
end

function hive_plan_feature -d "üìã Plan a new feature interactively"
    if test (count $argv) -eq 0
        echo "Usage: hive_plan_feature <feature_description>"
        return 1
    end
    hive plan $argv --template=feature --interactive
end

function hive_memory_find -d "üß† Search memory with formatted output"
    if test (count $argv) -eq 0
        echo "Usage: hive_memory_find <search_term>"
        return 1
    end
    hive memory search $argv --format=table --limit=10
end

function hive_context_detect -d "üîç Detect and display project context"
    set -l context ""

    if git rev-parse --is-inside-work-tree >/dev/null 2>&1
        set context "git"
    end

    if test -f Cargo.toml
        set context "$context rust"
    end

    if test -f package.json
        set context "$context javascript"
    end

    if test -f requirements.txt -o -f pyproject.toml
        set context "$context python"
    end

    if test -f go.mod
        set context "$context go"
    end

    if test -n "$context"
        echo "üîç Detected context: $context"

        # Provide context-specific suggestions
        switch $context
            case "*rust*"
                echo "üí° Try: hive analyze . --focus=performance"
            case "*javascript*"
                echo "üí° Try: hive analyze . --focus=security"
            case "*python*"
                echo "üí° Try: hive analyze . --include-tests"
            case "*go*"
                echo "üí° Try: hive analyze . --focus=efficiency"
        end
    else
        echo "üîç No specific project context detected"
        echo "üí° Try: hive analyze . --depth=standard"
    end
end

# Fish event handlers for enhanced UX
function __fish_hive_directory_changed --on-variable PWD
    # Occasionally show context suggestions (20% of the time)
    if test (random 1 5) -eq 1
        hive_context_detect
    end
end

# Help and welcome message
function __fish_hive_welcome
    echo "‚úÖ Hive AI Fish completions loaded successfully"
    echo "üêü Enhanced with native Fish features: rich descriptions, smart suggestions, abbreviations"
    echo "üí° Try: hive <TAB> or use abbreviations: ha, hq, hp, hs, hm, ht"
    echo "üöÄ Functions: hive_quick_ask, hive_analyze_current, hive_plan_feature, hive_memory_find"
    echo "üîß Use 'hive --help' for complete command reference"
end

# Show welcome message when completions are loaded
__fish_hive_welcome
"#.to_string()
}

#[cfg(all(test, feature = "legacy-tests"))]
mod tests {
    use super::*;

    #[test]
    fn test_fish_completions_generation() {
        let completions = generate_fish_completions();

        // Basic structure checks
        assert!(completions.contains("# Fish completion for Hive AI"));
        assert!(completions.contains("complete -c hive -f"));

        // Check for main commands with emojis
        assert!(completions.contains("üîç Analyze and understand"));
        assert!(completions.contains("ü§ñ Ask the AI consensus"));

        // Check for subcommands
        assert!(completions.contains("__fish_seen_subcommand_from analyze"));
        assert!(completions.contains("__fish_seen_subcommand_from memory"));

        // Check for Fish-specific features
        assert!(completions.contains("abbr -a ha"));
        assert!(completions.contains("function hive_quick_ask"));
        assert!(completions.contains("__fish_hive_welcome"));
    }

    #[test]
    fn test_fish_completions_context_awareness() {
        let completions = generate_fish_completions();

        // Should contain context detection
        assert!(completions.contains("__fish_hive_suggest_based_on_context"));
        assert!(completions.contains("test -f Cargo.toml"));
        assert!(completions.contains("test -f package.json"));

        // Should contain smart file completion
        assert!(completions.contains("__fish_hive_improve_files"));
        assert!(completions.contains("__fish_hive_analyze_directories"));
    }

    #[test]
    fn test_fish_completions_abbreviations() {
        let completions = generate_fish_completions();

        // Check for abbreviations
        assert!(completions.contains("abbr -a ha 'hive analyze'"));
        assert!(completions.contains("abbr -a hq 'hive ask'"));
        assert!(completions.contains("abbr -a hive-quick 'hive ask --profile=speed'"));
    }
}
