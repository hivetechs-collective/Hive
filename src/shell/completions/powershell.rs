// Professional PowerShell Completions for Hive AI
// Advanced PowerShell completions with parameter validation and IntelliSense

/// Generate comprehensive PowerShell completions for Hive AI
pub fn generate_powershell_completions() -> String {
    r#"# PowerShell completion for Hive AI
# Generated by Hive AI Shell Integration
# Professional-grade completions with IntelliSense and parameter validation

# Register the argument completer for the hive command
Register-ArgumentCompleter -Native -CommandName hive -ScriptBlock {
    param($commandName, $wordToComplete, $cursorPosition)
    
    # Parse the command line to understand context
    $line = $wordToComplete
    $words = $line -split '\s+'
    
    # Remove empty entries
    $words = $words | Where-Object { $_ -ne '' }
    
    # If we only have 'hive', suggest main commands
    if ($words.Count -le 1) {
        return Get-HiveMainCommands | Where-Object { $_ -like "$wordToComplete*" }
    }
    
    # Get the subcommand
    $subcommand = $words[1]
    
    # Handle subcommand completions
    switch ($subcommand) {
        'analyze' { return Get-HiveAnalyzeCompletions $words $wordToComplete }
        'ask' { return Get-HiveAskCompletions $words $wordToComplete }
        'consensus' { return Get-HiveConsensusCompletions $words $wordToComplete }
        'plan' { return Get-HivePlanCompletions $words $wordToComplete }
        'execute' { return Get-HiveExecuteCompletions $words $wordToComplete }
        'improve' { return Get-HiveImproveCompletions $words $wordToComplete }
        'search' { return Get-HiveSearchCompletions $words $wordToComplete }
        'memory' { return Get-HiveMemoryCompletions $words $wordToComplete }
        'analytics' { return Get-HiveAnalyticsCompletions $words $wordToComplete }
        'tool' { return Get-HiveToolCompletions $words $wordToComplete }
        'serve' { return Get-HiveServeCompletions $words $wordToComplete }
        'index' { return Get-HiveIndexCompletions $words $wordToComplete }
        'config' { return Get-HiveConfigCompletions $words $wordToComplete }
        'trust' { return Get-HiveTrustCompletions $words $wordToComplete }
        'hooks' { return Get-HiveHooksCompletions $words $wordToComplete }
        'interactive' { return Get-HiveInteractiveCompletions $words $wordToComplete }
        'tui' { return Get-HiveTuiCompletions $words $wordToComplete }
        'status' { return Get-HiveStatusCompletions $words $wordToComplete }
        'completion' { return Get-HiveCompletionCompletions $words $wordToComplete }
        'self-update' { return Get-HiveUpdateCompletions $words $wordToComplete }
        'shell' { return Get-HiveShellCompletions $words $wordToComplete }
        default { return Get-HiveGlobalOptions | Where-Object { $_ -like "$wordToComplete*" } }
    }
}

# Main command completions with descriptions
function Get-HiveMainCommands {
    return @(
        [System.Management.Automation.CompletionResult]::new('analyze', 'analyze', 'ParameterValue', 'üîç Analyze and understand any repository with AI-powered insights'),
        [System.Management.Automation.CompletionResult]::new('ask', 'ask', 'ParameterValue', 'ü§ñ Ask the AI consensus engine a question with multi-model analysis'),
        [System.Management.Automation.CompletionResult]::new('consensus', 'consensus', 'ParameterValue', 'üéØ Run comprehensive 4-stage consensus analysis pipeline'),
        [System.Management.Automation.CompletionResult]::new('plan', 'plan', 'ParameterValue', 'üìã Enter planning mode for complex task decomposition and execution'),
        [System.Management.Automation.CompletionResult]::new('execute', 'execute', 'ParameterValue', '‚ö° Execute a previously created plan with monitoring and validation'),
        [System.Management.Automation.CompletionResult]::new('improve', 'improve', 'ParameterValue', '‚ú® Apply AI-suggested improvements to files with conflict resolution'),
        [System.Management.Automation.CompletionResult]::new('search', 'search', 'ParameterValue', 'üîé Search for symbols, patterns, and semantic content in codebase'),
        [System.Management.Automation.CompletionResult]::new('memory', 'memory', 'ParameterValue', 'üß† Manage long-term memory, conversations, and knowledge graphs'),
        [System.Management.Automation.CompletionResult]::new('analytics', 'analytics', 'ParameterValue', 'üìä Generate comprehensive analytics reports and business intelligence'),
        [System.Management.Automation.CompletionResult]::new('tool', 'tool', 'ParameterValue', 'üõ†Ô∏è Execute tools and tool chains with enterprise automation'),
        [System.Management.Automation.CompletionResult]::new('serve', 'serve', 'ParameterValue', 'üåê Start IDE integration servers (LSP, MCP) for real-time assistance'),
        [System.Management.Automation.CompletionResult]::new('index', 'index', 'ParameterValue', 'üìö Build semantic indices for fast search and code intelligence'),
        [System.Management.Automation.CompletionResult]::new('config', 'config', 'ParameterValue', '‚öôÔ∏è Manage configuration settings and environment variables'),
        [System.Management.Automation.CompletionResult]::new('trust', 'trust', 'ParameterValue', 'üîí Manage directory trust and security settings with audit trails'),
        [System.Management.Automation.CompletionResult]::new('hooks', 'hooks', 'ParameterValue', 'ü™ù Manage enterprise hooks, workflows, and automation triggers'),
        [System.Management.Automation.CompletionResult]::new('interactive', 'interactive', 'ParameterValue', 'üí¨ Start interactive mode with conversational interface'),
        [System.Management.Automation.CompletionResult]::new('tui', 'tui', 'ParameterValue', 'üñ•Ô∏è Launch full TUI interface with VS Code-like experience'),
        [System.Management.Automation.CompletionResult]::new('status', 'status', 'ParameterValue', 'üìà Show comprehensive system status and health diagnostics'),
        [System.Management.Automation.CompletionResult]::new('completion', 'completion', 'ParameterValue', 'üêö Generate and manage shell completions for all supported shells'),
        [System.Management.Automation.CompletionResult]::new('self-update', 'self-update', 'ParameterValue', 'üîÑ Self-update Hive AI binary with rollback and version management'),
        [System.Management.Automation.CompletionResult]::new('shell', 'shell', 'ParameterValue', 'üîß Manage shell integration and environment setup')
    )
}

# Global options available for all commands
function Get-HiveGlobalOptions {
    return @(
        [System.Management.Automation.CompletionResult]::new('-h', '-h', 'ParameterName', 'Show help information'),
        [System.Management.Automation.CompletionResult]::new('--help', '--help', 'ParameterName', 'Show help information'),
        [System.Management.Automation.CompletionResult]::new('-V', '-V', 'ParameterName', 'Show version information'),
        [System.Management.Automation.CompletionResult]::new('--version', '--version', 'ParameterName', 'Show version information'),
        [System.Management.Automation.CompletionResult]::new('-v', '-v', 'ParameterName', 'Increase verbosity (can be used multiple times)'),
        [System.Management.Automation.CompletionResult]::new('--verbose', '--verbose', 'ParameterName', 'Increase verbosity'),
        [System.Management.Automation.CompletionResult]::new('-q', '-q', 'ParameterName', 'Suppress non-essential output'),
        [System.Management.Automation.CompletionResult]::new('--quiet', '--quiet', 'ParameterName', 'Suppress non-essential output'),
        [System.Management.Automation.CompletionResult]::new('--format', '--format', 'ParameterName', 'Output format (text, json, yaml, markdown, table)'),
        [System.Management.Automation.CompletionResult]::new('--no-color', '--no-color', 'ParameterName', 'Disable colored output'),
        [System.Management.Automation.CompletionResult]::new('-c', '-c', 'ParameterName', 'Configuration file'),
        [System.Management.Automation.CompletionResult]::new('--config', '--config', 'ParameterName', 'Configuration file')
    )
}

# Analyze command completions
function Get-HiveAnalyzeCompletions($words, $wordToComplete) {
    # Check if we're completing an option value
    if ($words[-2] -eq '--depth') {
        return @('quick', 'standard', 'comprehensive') | Where-Object { $_ -like "$wordToComplete*" }
    }
    if ($words[-2] -eq '--focus') {
        return @('architecture', 'quality', 'security', 'performance', 'dependencies', 'patterns', 'complexity', 'maintainability') | Where-Object { $_ -like "$wordToComplete*" }
    }
    if ($words[-2] -eq '--format') {
        return @('text', 'json', 'yaml', 'markdown', 'table', 'html') | Where-Object { $_ -like "$wordToComplete*" }
    }
    
    # If completing an option
    if ($wordToComplete.StartsWith('-')) {
        return @(
            [System.Management.Automation.CompletionResult]::new('--depth', '--depth', 'ParameterName', 'Analysis depth level (quick, standard, comprehensive)'),
            [System.Management.Automation.CompletionResult]::new('--focus', '--focus', 'ParameterName', 'Focus on specific analysis areas'),
            [System.Management.Automation.CompletionResult]::new('--output', '--output', 'ParameterName', 'Save analysis to file'),
            [System.Management.Automation.CompletionResult]::new('--dependencies', '--dependencies', 'ParameterName', 'Include dependency analysis and vulnerability scanning'),
            [System.Management.Automation.CompletionResult]::new('--recommendations', '--recommendations', 'ParameterName', 'Generate actionable recommendations for improvements'),
            [System.Management.Automation.CompletionResult]::new('--no-recommendations', '--no-recommendations', 'ParameterName', 'Disable recommendation generation'),
            [System.Management.Automation.CompletionResult]::new('--include-tests', '--include-tests', 'ParameterName', 'Include test file analysis and coverage insights'),
            [System.Management.Automation.CompletionResult]::new('--exclude-patterns', '--exclude-patterns', 'ParameterName', 'Exclude files matching patterns'),
            [System.Management.Automation.CompletionResult]::new('--detailed', '--detailed', 'ParameterName', 'Generate detailed analysis with code examples'),
            [System.Management.Automation.CompletionResult]::new('--metrics', '--metrics', 'ParameterName', 'Include quantitative code metrics and statistics')
        ) + (Get-HiveGlobalOptions) | Where-Object { $_.CompletionText -like "$wordToComplete*" }
    }
    
    # Directory completion for analyze target
    return Get-HiveProjectDirectories $wordToComplete
}

# Ask command completions
function Get-HiveAskCompletions($words, $wordToComplete) {
    # Check if we're completing an option value
    if ($words[-2] -eq '--profile') {
        return @('speed', 'balanced', 'cost', 'elite', 'custom') | Where-Object { $_ -like "$wordToComplete*" }
    }
    if ($words[-2] -eq '--model') {
        return @('gpt-4', 'gpt-4-turbo', 'claude-3-opus', 'claude-3-sonnet', 'gpt-3.5-turbo', 'gemini-pro') | Where-Object { $_ -like "$wordToComplete*" }
    }
    if ($words[-2] -eq '--max-tokens') {
        return @('1000', '2000', '4000', '8000', '16000') | Where-Object { $_ -like "$wordToComplete*" }
    }
    if ($words[-2] -eq '--temperature') {
        return @('0.1', '0.3', '0.5', '0.7', '0.9') | Where-Object { $_ -like "$wordToComplete*" }
    }
    if ($words[-2] -eq '--stream') {
        return @('true', 'false') | Where-Object { $_ -like "$wordToComplete*" }
    }
    
    # If completing an option
    if ($wordToComplete.StartsWith('-')) {
        return @(
            [System.Management.Automation.CompletionResult]::new('--profile', '--profile', 'ParameterName', 'Consensus profile for response quality'),
            [System.Management.Automation.CompletionResult]::new('--plan', '--plan', 'ParameterName', 'Enable planning mode for complex queries'),
            [System.Management.Automation.CompletionResult]::new('--context', '--context', 'ParameterName', 'Include file or directory context'),
            [System.Management.Automation.CompletionResult]::new('--max-tokens', '--max-tokens', 'ParameterName', 'Maximum response tokens'),
            [System.Management.Automation.CompletionResult]::new('--temperature', '--temperature', 'ParameterName', 'Response creativity level (0.1-0.9)'),
            [System.Management.Automation.CompletionResult]::new('--stream', '--stream', 'ParameterName', 'Enable streaming response'),
            [System.Management.Automation.CompletionResult]::new('--no-stream', '--no-stream', 'ParameterName', 'Disable streaming response'),
            [System.Management.Automation.CompletionResult]::new('--model', '--model', 'ParameterName', 'Specific model to use'),
            [System.Management.Automation.CompletionResult]::new('--save', '--save', 'ParameterName', 'Save conversation to memory'),
            [System.Management.Automation.CompletionResult]::new('--follow-up', '--follow-up', 'ParameterName', 'Enable automatic follow-up questions')
        ) + (Get-HiveGlobalOptions) | Where-Object { $_.CompletionText -like "$wordToComplete*" }
    }
    
    # Context-aware question suggestions
    return Get-HiveQuestionSuggestions $wordToComplete
}

# Memory command completions
function Get-HiveMemoryCompletions($words, $wordToComplete) {
    # If we have a memory subcommand
    if ($words.Count -ge 3) {
        $subcommand = $words[2]
        switch ($subcommand) {
            'search' {
                if ($wordToComplete.StartsWith('-')) {
                    return @(
                        [System.Management.Automation.CompletionResult]::new('--limit', '--limit', 'ParameterName', 'Maximum results (5, 10, 20, 50, 100)'),
                        [System.Management.Automation.CompletionResult]::new('--since', '--since', 'ParameterName', 'Search since date'),
                        [System.Management.Automation.CompletionResult]::new('--before', '--before', 'ParameterName', 'Search before date'),
                        [System.Management.Automation.CompletionResult]::new('--context', '--context', 'ParameterName', 'Include context in results')
                    ) | Where-Object { $_.CompletionText -like "$wordToComplete*" }
                }
            }
            'export' {
                if ($words[-2] -eq '--format') {
                    return @('json', 'yaml', 'sqlite') | Where-Object { $_ -like "$wordToComplete*" }
                }
                if ($wordToComplete.StartsWith('-')) {
                    return @(
                        [System.Management.Automation.CompletionResult]::new('--format', '--format', 'ParameterName', 'Export format (json, yaml, sqlite)'),
                        [System.Management.Automation.CompletionResult]::new('--compress', '--compress', 'ParameterName', 'Compress export file'),
                        [System.Management.Automation.CompletionResult]::new('--include-embeddings', '--include-embeddings', 'ParameterName', 'Include vector embeddings')
                    ) | Where-Object { $_.CompletionText -like "$wordToComplete*" }
                }
            }
            'import' {
                if ($wordToComplete.StartsWith('-')) {
                    return @(
                        [System.Management.Automation.CompletionResult]::new('--merge', '--merge', 'ParameterName', 'Merge with existing data'),
                        [System.Management.Automation.CompletionResult]::new('--validate', '--validate', 'ParameterName', 'Validate before import'),
                        [System.Management.Automation.CompletionResult]::new('--backup', '--backup', 'ParameterName', 'Create backup before import')
                    ) | Where-Object { $_.CompletionText -like "$wordToComplete*" }
                }
            }
        }
    } else {
        # Memory subcommands
        return @(
            [System.Management.Automation.CompletionResult]::new('search', 'search', 'ParameterValue', 'üîç Search conversation history and knowledge base'),
            [System.Management.Automation.CompletionResult]::new('stats', 'stats', 'ParameterValue', 'üìä Show detailed memory usage statistics and analytics'),
            [System.Management.Automation.CompletionResult]::new('export', 'export', 'ParameterValue', 'üì§ Export conversation history and knowledge to file'),
            [System.Management.Automation.CompletionResult]::new('import', 'import', 'ParameterValue', 'üì• Import conversation history from external source'),
            [System.Management.Automation.CompletionResult]::new('clear', 'clear', 'ParameterValue', 'üóëÔ∏è Clear memory with optional selective deletion'),
            [System.Management.Automation.CompletionResult]::new('knowledge', 'knowledge', 'ParameterValue', 'üß† Manage knowledge graph and semantic relationships'),
            [System.Management.Automation.CompletionResult]::new('conversations', 'conversations', 'ParameterValue', 'üí¨ List and manage individual conversations'),
            [System.Management.Automation.CompletionResult]::new('analytics', 'analytics', 'ParameterValue', 'üìà Generate memory usage analytics and insights'),
            [System.Management.Automation.CompletionResult]::new('optimize', 'optimize', 'ParameterValue', '‚ö° Optimize memory storage and indexing'),
            [System.Management.Automation.CompletionResult]::new('vacuum', 'vacuum', 'ParameterValue', 'üßπ Clean up and compact memory database')
        ) | Where-Object { $_.CompletionText -like "$wordToComplete*" }
    }
    
    return @()
}

# Config command completions
function Get-HiveConfigCompletions($words, $wordToComplete) {
    if ($words.Count -ge 3) {
        $subcommand = $words[2]
        switch ($subcommand) {
            'set' {
                if ($words.Count -eq 4) {
                    return Get-HiveConfigKeys | Where-Object { $_ -like "$wordToComplete*" }
                }
            }
            'get' {
                return Get-HiveConfigKeys | Where-Object { $_ -like "$wordToComplete*" }
            }
        }
    } else {
        return @(
            [System.Management.Automation.CompletionResult]::new('show', 'show', 'ParameterValue', 'üìÑ Show current configuration with security masking'),
            [System.Management.Automation.CompletionResult]::new('set', 'set', 'ParameterValue', '‚úèÔ∏è Set a configuration value with validation'),
            [System.Management.Automation.CompletionResult]::new('get', 'get', 'ParameterValue', 'üîç Get a specific configuration value'),
            [System.Management.Automation.CompletionResult]::new('validate', 'validate', 'ParameterValue', '‚úÖ Validate configuration against schema'),
            [System.Management.Automation.CompletionResult]::new('reset', 'reset', 'ParameterValue', 'üîÑ Reset configuration to defaults (requires confirmation)'),
            [System.Management.Automation.CompletionResult]::new('edit', 'edit', 'ParameterValue', '‚úèÔ∏è Edit configuration in default editor'),
            [System.Management.Automation.CompletionResult]::new('export', 'export', 'ParameterValue', 'üì§ Export configuration to file for backup'),
            [System.Management.Automation.CompletionResult]::new('import', 'import', 'ParameterValue', 'üì• Import configuration from file with validation'),
            [System.Management.Automation.CompletionResult]::new('list', 'list', 'ParameterValue', 'üìã List all available configuration keys')
        ) | Where-Object { $_.CompletionText -like "$wordToComplete*" }
    }
    
    return @()
}

# Shell command completions
function Get-HiveShellCompletions($words, $wordToComplete) {
    if ($words.Count -ge 3) {
        $subcommand = $words[2]
        switch ($subcommand) {
            'install' {
                if ($wordToComplete.StartsWith('-')) {
                    return @(
                        [System.Management.Automation.CompletionResult]::new('--force', '--force', 'ParameterName', 'Force installation')
                    ) | Where-Object { $_.CompletionText -like "$wordToComplete*" }
                } else {
                    return @('bash', 'zsh', 'fish', 'powershell', 'elvish', 'all') | Where-Object { $_ -like "$wordToComplete*" }
                }
            }
            'completions' {
                return @('bash', 'zsh', 'fish', 'powershell', 'elvish', 'all') | Where-Object { $_ -like "$wordToComplete*" }
            }
            'uninstall' {
                if ($wordToComplete.StartsWith('-')) {
                    return @(
                        [System.Management.Automation.CompletionResult]::new('--preserve-config', '--preserve-config', 'ParameterName', 'Preserve configuration files')
                    ) | Where-Object { $_.CompletionText -like "$wordToComplete*" }
                } else {
                    return @('bash', 'zsh', 'fish', 'powershell', 'elvish', 'all') | Where-Object { $_ -like "$wordToComplete*" }
                }
            }
        }
    } else {
        return @(
            [System.Management.Automation.CompletionResult]::new('install', 'install', 'ParameterValue', 'üì¶ Install shell integration for specified shell'),
            [System.Management.Automation.CompletionResult]::new('setup', 'setup', 'ParameterValue', '‚öôÔ∏è Setup PATH and environment variables automatically'),
            [System.Management.Automation.CompletionResult]::new('status', 'status', 'ParameterValue', 'üìä Show shell integration status for all shells'),
            [System.Management.Automation.CompletionResult]::new('completions', 'completions', 'ParameterValue', 'üêö Generate and install completion files'),
            [System.Management.Automation.CompletionResult]::new('uninstall', 'uninstall', 'ParameterValue', 'üóëÔ∏è Remove shell integration with optional config preservation')
        ) | Where-Object { $_.CompletionText -like "$wordToComplete*" }
    }
    
    return @()
}

# Helper functions for context-aware completions
function Get-HiveProjectDirectories($wordToComplete) {
    $results = @()
    
    # Look for common project directories
    $projectDirs = @('src', 'lib', 'app', 'packages', 'components')
    foreach ($dir in $projectDirs) {
        if (Test-Path $dir -PathType Container) {
            $results += [System.Management.Automation.CompletionResult]::new($dir, $dir, 'ParameterValue', "Project directory: $dir")
        }
    }
    
    # Look for git repositories
    $gitDirs = Get-ChildItem -Directory -Depth 1 | Where-Object { Test-Path (Join-Path $_.FullName '.git') } | Select-Object -First 10
    foreach ($dir in $gitDirs) {
        $results += [System.Management.Automation.CompletionResult]::new($dir.Name, $dir.Name, 'ParameterValue', "Git repository: $($dir.Name)")
    }
    
    # Add current directory option
    $results += [System.Management.Automation.CompletionResult]::new('.', '.', 'ParameterValue', 'Current directory')
    
    return $results | Where-Object { $_.CompletionText -like "$wordToComplete*" }
}

function Get-HiveQuestionSuggestions($wordToComplete) {
    $suggestions = @()
    
    # Context-aware suggestions
    if (Test-Path 'Cargo.toml') {
        $suggestions += @(
            'How can I optimize this Rust project?',
            'What are the security issues in this codebase?',
            'Suggest performance improvements for this Rust code'
        )
    }
    
    if (Test-Path 'package.json') {
        $suggestions += @(
            'Analyze the dependencies in this Node.js project',
            'How can I improve the TypeScript code quality?',
            'What are potential security vulnerabilities?'
        )
    }
    
    if (Test-Path 'requirements.txt' -or Test-Path 'pyproject.toml') {
        $suggestions += @(
            'Review this Python codebase for best practices',
            'Suggest optimizations for this Python project',
            'How can I improve error handling?'
        )
    }
    
    if (Test-Path '.git' -PathType Container) {
        $suggestions += @(
            'Analyze the git history for patterns',
            'What are the main development trends?',
            'Review recent commits for quality'
        )
    }
    
    # General suggestions
    $suggestions += @(
        'Explain this code',
        'How can I improve this?',
        'What are potential issues?',
        'Suggest optimizations',
        'Review for security',
        'Generate documentation',
        'Create tests for this',
        'Refactor this code'
    )
    
    $results = @()
    foreach ($suggestion in $suggestions) {
        if ($suggestion -like "*$wordToComplete*") {
            $results += [System.Management.Automation.CompletionResult]::new("`"$suggestion`"", $suggestion, 'ParameterValue', $suggestion)
        }
    }
    
    return $results
}

function Get-HiveConfigKeys() {
    return @(
        'openrouter.api_key',
        'cloudflare.d1_id',
        'cloudflare.gateway_url',
        'default_profile',
        'logging.level',
        'logging.file',
        'cache.enabled',
        'cache.max_size',
        'security.trust_mode',
        'tui.theme',
        'tui.auto_launch',
        'analytics.enabled',
        'hooks.enabled'
    )
}

# Placeholder functions for other commands (implement as needed)
function Get-HiveConsensusCompletions($words, $wordToComplete) { return @() }
function Get-HivePlanCompletions($words, $wordToComplete) { return @() }
function Get-HiveExecuteCompletions($words, $wordToComplete) { return @() }
function Get-HiveImproveCompletions($words, $wordToComplete) { return @() }
function Get-HiveSearchCompletions($words, $wordToComplete) { return @() }
function Get-HiveAnalyticsCompletions($words, $wordToComplete) { return @() }
function Get-HiveToolCompletions($words, $wordToComplete) { return @() }
function Get-HiveServeCompletions($words, $wordToComplete) { return @() }
function Get-HiveIndexCompletions($words, $wordToComplete) { return @() }
function Get-HiveTrustCompletions($words, $wordToComplete) { return @() }
function Get-HiveHooksCompletions($words, $wordToComplete) { return @() }
function Get-HiveInteractiveCompletions($words, $wordToComplete) { return @() }
function Get-HiveTuiCompletions($words, $wordToComplete) { return @() }
function Get-HiveStatusCompletions($words, $wordToComplete) { return @() }
function Get-HiveCompletionCompletions($words, $wordToComplete) { return @() }
function Get-HiveUpdateCompletions($words, $wordToComplete) { return @() }

# Professional aliases for PowerShell users
Set-Alias -Name ha -Value 'hive analyze' -Description 'Quick analyze command'
Set-Alias -Name hq -Value 'hive ask' -Description 'Quick ask command'
Set-Alias -Name hp -Value 'hive plan' -Description 'Quick plan command'
Set-Alias -Name hs -Value 'hive search' -Description 'Quick search command'
Set-Alias -Name hm -Value 'hive memory search' -Description 'Quick memory search command'
Set-Alias -Name ht -Value 'hive trust check .' -Description 'Quick trust check for current directory'
Set-Alias -Name hc -Value 'hive config show' -Description 'Quick config show command'
Set-Alias -Name hst -Value 'hive status' -Description 'Quick status command'
Set-Alias -Name htui -Value 'hive tui' -Description 'Quick TUI launch command'

# Advanced PowerShell functions for enhanced workflow
function Invoke-HiveQuickAsk {
    <#
    .SYNOPSIS
    Ask Hive AI a quick question with speed profile
    
    .DESCRIPTION
    Wrapper function for hive ask with speed profile and streaming enabled
    
    .PARAMETER Question
    The question to ask Hive AI
    
    .EXAMPLE
    Invoke-HiveQuickAsk "How can I optimize this PowerShell script?"
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true, Position = 0)]
        [string]$Question
    )
    
    hive ask $Question --profile=speed --stream
}

function Invoke-HiveAnalyzeCurrent {
    <#
    .SYNOPSIS
    Analyze the current directory with Hive AI
    
    .DESCRIPTION
    Analyze the current directory with specified depth and generate recommendations
    
    .PARAMETER Depth
    Analysis depth level (quick, standard, comprehensive)
    
    .EXAMPLE
    Invoke-HiveAnalyzeCurrent -Depth standard
    #>
    [CmdletBinding()]
    param(
        [Parameter(Position = 0)]
        [ValidateSet('quick', 'standard', 'comprehensive')]
        [string]$Depth = 'standard'
    )
    
    hive analyze . --depth=$Depth --recommendations --format=text
}

function Invoke-HivePlanFeature {
    <#
    .SYNOPSIS
    Plan a new feature with Hive AI
    
    .DESCRIPTION
    Create an interactive plan for a new feature using Hive AI's planning mode
    
    .PARAMETER Description
    Description of the feature to plan
    
    .EXAMPLE
    Invoke-HivePlanFeature "Add user authentication system"
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true, Position = 0)]
        [string]$Description
    )
    
    hive plan $Description --template=feature --interactive
}

function Search-HiveMemory {
    <#
    .SYNOPSIS
    Search Hive AI memory with formatted output
    
    .DESCRIPTION
    Search conversation history and knowledge base with table formatting
    
    .PARAMETER SearchTerm
    Term to search for in memory
    
    .PARAMETER Limit
    Maximum number of results to return
    
    .EXAMPLE
    Search-HiveMemory "PowerShell optimization" -Limit 5
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true, Position = 0)]
        [string]$SearchTerm,
        
        [Parameter(Position = 1)]
        [int]$Limit = 10
    )
    
    hive memory search $SearchTerm --format=table --limit=$Limit
}

function Get-HiveContext {
    <#
    .SYNOPSIS
    Detect and display project context
    
    .DESCRIPTION
    Analyze the current directory to detect project type and suggest relevant Hive AI commands
    
    .EXAMPLE
    Get-HiveContext
    #>
    [CmdletBinding()]
    param()
    
    $context = @()
    
    if (Test-Path '.git' -PathType Container) {
        $context += 'git'
    }
    
    if (Test-Path 'Cargo.toml') {
        $context += 'rust'
    }
    
    if (Test-Path 'package.json') {
        $context += 'javascript'
    }
    
    if (Test-Path 'requirements.txt' -or Test-Path 'pyproject.toml') {
        $context += 'python'
    }
    
    if (Test-Path 'go.mod') {
        $context += 'go'
    }
    
    if (Test-Path '*.ps1' -or Test-Path '*.psm1' -or Test-Path '*.psd1') {
        $context += 'powershell'
    }
    
    if ($context.Count -gt 0) {
        Write-Host "üîç Detected context: $($context -join ', ')" -ForegroundColor Cyan
        
        switch ($context) {
            { $_ -contains 'rust' } {
                Write-Host "üí° Try: hive analyze . --focus=performance" -ForegroundColor Yellow
            }
            { $_ -contains 'javascript' } {
                Write-Host "üí° Try: hive analyze . --focus=security" -ForegroundColor Yellow
            }
            { $_ -contains 'python' } {
                Write-Host "üí° Try: hive analyze . --include-tests" -ForegroundColor Yellow
            }
            { $_ -contains 'powershell' } {
                Write-Host "üí° Try: hive ask 'How can I improve this PowerShell code?'" -ForegroundColor Yellow
            }
        }
    } else {
        Write-Host "üîç No specific project context detected" -ForegroundColor Gray
        Write-Host "üí° Try: hive analyze . --depth=standard" -ForegroundColor Yellow
    }
}

# Set up module aliases
Set-Alias -Name hive-quick -Value Invoke-HiveQuickAsk
Set-Alias -Name hive-here -Value Invoke-HiveAnalyzeCurrent
Set-Alias -Name hive-plan -Value Invoke-HivePlanFeature
Set-Alias -Name hive-find -Value Search-HiveMemory
Set-Alias -Name hive-context -Value Get-HiveContext

# Environment variables for PowerShell users
$env:HIVE_DEFAULT_PROFILE = "balanced"
$env:HIVE_DEFAULT_FORMAT = "text"
$env:HIVE_AUTO_TRUST_CURRENT = "false"

# Welcome message
Write-Host "‚úÖ Hive AI PowerShell completions loaded successfully" -ForegroundColor Green
Write-Host "üîß Enhanced with IntelliSense, parameter validation, and context awareness" -ForegroundColor Cyan
Write-Host "üí° Try: hive <Tab> or use aliases: ha, hq, hp, hs, hm, ht" -ForegroundColor Yellow
Write-Host "üöÄ Functions: Invoke-HiveQuickAsk, Invoke-HiveAnalyzeCurrent, Invoke-HivePlanFeature" -ForegroundColor Magenta
Write-Host "üîç Use 'Get-Help hive' or 'hive --help' for complete command reference" -ForegroundColor Gray
"#.to_string()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_powershell_completions_generation() {
        let completions = generate_powershell_completions();
        
        // Basic structure checks
        assert!(completions.contains("Register-ArgumentCompleter"));
        assert!(completions.contains("-CommandName hive"));
        
        // Check for main command function
        assert!(completions.contains("Get-HiveMainCommands"));
        assert!(completions.contains("System.Management.Automation.CompletionResult"));
        
        // Check for subcommand completions
        assert!(completions.contains("Get-HiveAnalyzeCompletions"));
        assert!(completions.contains("Get-HiveAskCompletions"));
        
        // Check for PowerShell-specific features
        assert!(completions.contains("Set-Alias"));
        assert!(completions.contains("Invoke-HiveQuickAsk"));
        assert!(completions.contains("[CmdletBinding()]"));
    }

    #[test]
    fn test_powershell_completions_functions() {
        let completions = generate_powershell_completions();
        
        // Should contain PowerShell functions
        assert!(completions.contains("function Invoke-HiveQuickAsk"));
        assert!(completions.contains("function Invoke-HiveAnalyzeCurrent"));
        assert!(completions.contains("function Get-HiveContext"));
        
        // Should contain parameter definitions
        assert!(completions.contains("[Parameter(Mandatory = $true)]"));
        assert!(completions.contains("[ValidateSet("));
    }

    #[test]
    fn test_powershell_completions_context_awareness() {
        let completions = generate_powershell_completions();
        
        // Should contain context detection
        assert!(completions.contains("Test-Path 'Cargo.toml'"));
        assert!(completions.contains("Test-Path 'package.json'"));
        assert!(completions.contains("Get-HiveProjectDirectories"));
        assert!(completions.contains("Get-HiveQuestionSuggestions"));
    }
}